// Generated from grammars/CqlParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var CqlParserListener = require('./CqlParserListener').CqlParserListener;
var CqlParserVisitor = require('./CqlParserVisitor').CqlParserVisitor;

var grammarFileName = "CqlParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00b5\u09f8\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
    "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
    "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
    "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
    "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
    "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
    "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
    "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
    "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
    "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
    "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004",
    "\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t",
    "\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004",
    "\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004\u00cf\t",
    "\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t\u00d2\u0004",
    "\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004\u00d6\t",
    "\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t\u00d9\u0004",
    "\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004\u00dd\t",
    "\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t\u00e0\u0004",
    "\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004\u00e4\t",
    "\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t\u00e7\u0004",
    "\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004\u00eb\t",
    "\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t\u00ee\u0004",
    "\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004\u00f2\t",
    "\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t\u00f5\u0004",
    "\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004\u00f9\t",
    "\u00f9\u0004\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t\u00fc\u0004",
    "\u00fd\t\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004\u0100\t",
    "\u0100\u0004\u0101\t\u0101\u0004\u0102\t\u0102\u0004\u0103\t\u0103\u0004",
    "\u0104\t\u0104\u0004\u0105\t\u0105\u0004\u0106\t\u0106\u0004\u0107\t",
    "\u0107\u0004\u0108\t\u0108\u0004\u0109\t\u0109\u0004\u010a\t\u010a\u0004",
    "\u010b\t\u010b\u0004\u010c\t\u010c\u0004\u010d\t\u010d\u0004\u010e\t",
    "\u010e\u0004\u010f\t\u010f\u0004\u0110\t\u0110\u0004\u0111\t\u0111\u0004",
    "\u0112\t\u0112\u0004\u0113\t\u0113\u0004\u0114\t\u0114\u0004\u0115\t",
    "\u0115\u0004\u0116\t\u0116\u0004\u0117\t\u0117\u0004\u0118\t\u0118\u0004",
    "\u0119\t\u0119\u0004\u011a\t\u011a\u0004\u011b\t\u011b\u0004\u011c\t",
    "\u011c\u0004\u011d\t\u011d\u0004\u011e\t\u011e\u0004\u011f\t\u011f\u0003",
    "\u0002\u0005\u0002\u0240\n\u0002\u0003\u0002\u0005\u0002\u0243\n\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0005\u0003\u0249\n",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0007\u0003\u024e\n\u0003",
    "\f\u0003\u000e\u0003\u0251\u000b\u0003\u0003\u0003\u0003\u0003\u0005",
    "\u0003\u0255\n\u0003\u0003\u0003\u0005\u0003\u0258\n\u0003\u0003\u0003",
    "\u0005\u0003\u025b\n\u0003\u0003\u0004\u0003\u0004\u0003\u0005\u0003",
    "\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0005\u0006\u0286\n\u0006\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\b",
    "\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0297",
    "\n\t\u0003\t\u0005\t\u029a\n\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0005\n\u02a1\n\n\u0003\n\u0003\n\u0003\n\u0005\n\u02a6\n\n\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\f\u0003\f\u0005\f\u02b1\n\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u02bb\n\f\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0005\r\u02ca\n\r\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u02d5\n\r\u0003\r\u0003",
    "\r\u0003\r\u0005\r\u02da\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u02e5\n\r\u0003\r\u0003\r\u0005",
    "\r\u02e9\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u02ee\n",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0005\u000e\u02f6\n\u000e\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0005\u000f\u02fb\n\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u02ff",
    "\n\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0304\n\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0309\n\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u0316",
    "\n\u0011\f\u0011\u000e\u0011\u0319\u000b\u0011\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0005\u0012\u031e\n\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0005\u0012\u0323\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013",
    "\u032d\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0332",
    "\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u033c\n\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0341\n\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0005\u0013\u0346\n\u0013\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u034d\n\u0014",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0007\u0015\u0353\n",
    "\u0015\f\u0015\u000e\u0015\u0356\u000b\u0015\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0005\u0018\u0362\n\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u036e\n\u0018\u0003\u0019",
    "\u0003\u0019\u0005\u0019\u0372\n\u0019\u0003\u0019\u0003\u0019\u0005",
    "\u0019\u0376\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019",
    "\u037b\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0380",
    "\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0007\u001b\u0391\n",
    "\u001b\f\u001b\u000e\u001b\u0394\u000b\u001b\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0005\u001c\u039a\n\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0005\u001d\u03a2",
    "\n\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u03a6\n\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0005\u001d\u03ab\n\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u03be\n\u001e",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0007\u001f",
    "\u03c5\n\u001f\f\u001f\u000e\u001f\u03c8\u000b\u001f\u0003\u001f\u0003",
    "\u001f\u0003 \u0003 \u0003 \u0003 \u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0007!\u03d6\n!\f!\u000e!\u03d9\u000b!\u0003!\u0003!\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0007\"\u03e2\n\"\f\"\u000e\"\u03e5",
    "\u000b\"\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0005$\u03f2\n$\u0003%\u0003%\u0003%\u0003&\u0003&\u0005",
    "&\u03f9\n&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u0400\n\'",
    "\u0003\'\u0003\'\u0003\'\u0003(\u0003(\u0003(\u0005(\u0408\n(\u0003",
    ")\u0003)\u0003)\u0003*\u0003*\u0003*\u0003*\u0007*\u0411\n*\f*\u000e",
    "*\u0414\u000b*\u0003+\u0003+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003.\u0005",
    ".\u0427\n.\u0003.\u0003.\u0003.\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0005/\u0432\n/\u00030\u00030\u00030\u00031\u00031\u00031\u00031\u0003",
    "1\u00032\u00032\u00032\u00032\u00033\u00033\u00033\u00034\u00034\u0003",
    "4\u00034\u00074\u0447\n4\f4\u000e4\u044a\u000b4\u00035\u00035\u0003",
    "5\u00036\u00036\u00036\u00036\u00036\u00036\u00076\u0455\n6\f6\u000e",
    "6\u0458\u000b6\u00037\u00037\u00037\u00037\u00057\u045e\n7\u00038\u0003",
    "8\u00038\u00038\u00038\u00078\u0465\n8\f8\u000e8\u0468\u000b8\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00059\u047a\n9\u0003:\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0005:\u0482\n:\u0003:\u0003:\u0003:\u0003:\u0005",
    ":\u0488\n:\u0003;\u0003;\u0003;\u0005;\u048d\n;\u0003;\u0003;\u0003",
    "<\u0003<\u0003<\u0005<\u0494\n<\u0003<\u0003<\u0003<\u0005<\u0499\n",
    "<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0005=\u04a1\n=\u0003=\u0003",
    "=\u0003=\u0005=\u04a6\n=\u0003=\u0003=\u0003>\u0003>\u0003>\u0005>\u04ad",
    "\n>\u0003>\u0003>\u0003>\u0005>\u04b2\n>\u0003>\u0003>\u0003?\u0003",
    "?\u0003?\u0005?\u04b9\n?\u0003?\u0003?\u0003?\u0005?\u04be\n?\u0003",
    "?\u0003?\u0003@\u0003@\u0003@\u0005@\u04c5\n@\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0005@\u04cc\n@\u0003@\u0003@\u0003A\u0003A\u0003A\u0005A\u04d3",
    "\nA\u0003A\u0003A\u0003B\u0003B\u0003B\u0005B\u04da\nB\u0003B\u0003",
    "B\u0003B\u0005B\u04df\nB\u0003B\u0003B\u0003C\u0003C\u0003C\u0005C\u04e6",
    "\nC\u0003C\u0003C\u0003D\u0003D\u0003D\u0005D\u04ed\nD\u0003D\u0003",
    "D\u0003D\u0005D\u04f2\nD\u0003D\u0003D\u0003E\u0003E\u0003E\u0005E\u04f9",
    "\nE\u0003E\u0003E\u0003E\u0005E\u04fe\nE\u0003E\u0003E\u0003E\u0003",
    "E\u0003E\u0005E\u0505\nE\u0003F\u0003F\u0005F\u0509\nF\u0003G\u0003",
    "G\u0005G\u050d\nG\u0003G\u0003G\u0003G\u0005G\u0512\nG\u0007G\u0514",
    "\nG\fG\u000eG\u0517\u000bG\u0003H\u0003H\u0003H\u0003H\u0003H\u0003",
    "H\u0003H\u0003I\u0003I\u0003I\u0003I\u0007I\u0524\nI\fI\u000eI\u0527",
    "\u000bI\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003",
    "J\u0005J\u0532\nJ\u0003K\u0003K\u0003L\u0003L\u0003L\u0005L\u0539\n",
    "L\u0003M\u0003M\u0003M\u0003M\u0003M\u0007M\u0540\nM\fM\u000eM\u0543",
    "\u000bM\u0003M\u0003M\u0003N\u0003N\u0003N\u0003N\u0003O\u0003O\u0003",
    "P\u0003P\u0005P\u054f\nP\u0003Q\u0003Q\u0003Q\u0003Q\u0007Q\u0555\n",
    "Q\fQ\u000eQ\u0558\u000bQ\u0003Q\u0003Q\u0003Q\u0005Q\u055d\nQ\u0003",
    "R\u0003R\u0003R\u0005R\u0562\nR\u0003S\u0003S\u0003S\u0003T\u0003T\u0003",
    "T\u0003T\u0003T\u0003T\u0003U\u0003U\u0003U\u0005U\u0570\nU\u0003V\u0003",
    "V\u0003W\u0003W\u0003W\u0003W\u0005W\u0578\nW\u0003X\u0003X\u0003X\u0003",
    "X\u0003X\u0003X\u0005X\u0580\nX\u0003Y\u0003Y\u0003Y\u0003Y\u0007Y\u0586",
    "\nY\fY\u000eY\u0589\u000bY\u0003Z\u0003Z\u0003Z\u0003Z\u0007Z\u058f",
    "\nZ\fZ\u000eZ\u0592\u000bZ\u0003[\u0003[\u0003\\\u0003\\\u0003]\u0003",
    "]\u0003]\u0003^\u0003^\u0005^\u059d\n^\u0003^\u0003^\u0005^\u05a1\n",
    "^\u0003_\u0003_\u0005_\u05a5\n_\u0003`\u0003`\u0003`\u0003`\u0003`\u0003",
    "`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0005`\u05b3\n`\u0003a\u0003",
    "a\u0003a\u0003a\u0007a\u05b9\na\fa\u000ea\u05bc\u000ba\u0003b\u0003",
    "b\u0003b\u0003b\u0003b\u0003b\u0005b\u05c4\nb\u0003c\u0003c\u0003c\u0003",
    "c\u0003d\u0003d\u0003d\u0003e\u0003e\u0005e\u05cf\ne\u0003e\u0003e\u0003",
    "e\u0005e\u05d4\ne\u0003e\u0003e\u0003f\u0003f\u0003f\u0005f\u05db\n",
    "f\u0003f\u0005f\u05de\nf\u0003f\u0003f\u0003f\u0003f\u0005f\u05e4\n",
    "f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003g\u0003g\u0005g\u05ed\ng\u0003",
    "h\u0003h\u0003h\u0003h\u0005h\u05f3\nh\u0003i\u0003i\u0003i\u0003i\u0003",
    "i\u0003j\u0003j\u0003j\u0003j\u0003j\u0003k\u0003k\u0003k\u0003k\u0003",
    "k\u0003l\u0005l\u0605\nl\u0003l\u0003l\u0005l\u0609\nl\u0003l\u0003",
    "l\u0005l\u060d\nl\u0003l\u0003l\u0003l\u0005l\u0612\nl\u0003m\u0003",
    "m\u0003m\u0003m\u0007m\u0618\nm\fm\u000em\u061b\u000bm\u0003n\u0003",
    "n\u0003n\u0003n\u0003n\u0005n\u0622\nn\u0003n\u0003n\u0005n\u0626\n",
    "n\u0003o\u0005o\u0629\no\u0003o\u0003o\u0003o\u0003o\u0005o\u062f\n",
    "o\u0003o\u0003o\u0005o\u0633\no\u0003o\u0003o\u0003o\u0003o\u0003o\u0005",
    "o\u063a\no\u0003p\u0003p\u0003p\u0003q\u0003q\u0003q\u0003q\u0007q\u0643",
    "\nq\fq\u000eq\u0646\u000bq\u0003r\u0003r\u0003r\u0003r\u0003s\u0003",
    "s\u0003s\u0003s\u0007s\u0650\ns\fs\u000es\u0653\u000bs\u0003t\u0003",
    "t\u0003t\u0003t\u0003t\u0003t\u0005t\u065b\nt\u0003t\u0003t\u0003t\u0003",
    "t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003",
    "t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003",
    "t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003",
    "t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003",
    "t\u0003t\u0003t\u0003t\u0003t\u0003t\u0005t\u068e\nt\u0003u\u0003u\u0003",
    "u\u0003u\u0003u\u0007u\u0695\nu\fu\u000eu\u0698\u000bu\u0005u\u069a",
    "\nu\u0003u\u0003u\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003",
    "v\u0003v\u0003v\u0007v\u06a8\nv\fv\u000ev\u06ab\u000bv\u0003v\u0003",
    "v\u0003w\u0003w\u0003w\u0003w\u0003w\u0007w\u06b4\nw\fw\u000ew\u06b7",
    "\u000bw\u0003w\u0003w\u0003x\u0003x\u0003x\u0003x\u0003x\u0007x\u06c0",
    "\nx\fx\u000ex\u06c3\u000bx\u0003x\u0003x\u0003y\u0003y\u0003y\u0003",
    "y\u0003y\u0007y\u06cc\ny\fy\u000ey\u06cf\u000by\u0003y\u0003y\u0003",
    "y\u0007y\u06d4\ny\fy\u000ey\u06d7\u000by\u0005y\u06d9\ny\u0003y\u0003",
    "y\u0003y\u0003y\u0007y\u06df\ny\fy\u000ey\u06e2\u000by\u0005y\u06e4",
    "\ny\u0003y\u0003y\u0003z\u0005z\u06e9\nz\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0005z\u06f0\nz\u0003z\u0003z\u0005z\u06f4\nz\u0003z\u0003",
    "z\u0005z\u06f8\nz\u0003z\u0005z\u06fb\nz\u0003{\u0003{\u0003{\u0003",
    "{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003",
    "{\u0003{\u0003{\u0005{\u070d\n{\u0003|\u0003|\u0003|\u0003}\u0003}\u0003",
    "}\u0003~\u0003~\u0003~\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f",
    "\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0081\u0003\u0081\u0003\u0081",
    "\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081",
    "\u0727\n\u0081\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003",
    "\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0007\u0083\u0731\n\u0083",
    "\f\u0083\u000e\u0083\u0734\u000b\u0083\u0003\u0084\u0003\u0084\u0003",
    "\u0084\u0003\u0084\u0007\u0084\u073a\n\u0084\f\u0084\u000e\u0084\u073d",
    "\u000b\u0084\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085",
    "\u0003\u0085\u0005\u0085\u0745\n\u0085\u0003\u0086\u0003\u0086\u0005",
    "\u0086\u0749\n\u0086\u0003\u0086\u0005\u0086\u074c\n\u0086\u0003\u0086",
    "\u0003\u0086\u0003\u0086\u0005\u0086\u0751\n\u0086\u0003\u0086\u0005",
    "\u0086\u0754\n\u0086\u0003\u0086\u0005\u0086\u0757\n\u0086\u0003\u0086",
    "\u0005\u0086\u075a\n\u0086\u0003\u0087\u0003\u0087\u0003\u0087\u0003",
    "\u0088\u0003\u0088\u0003\u0088\u0003\u0089\u0003\u0089\u0003\u0089\u0003",
    "\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0005\u008a\u076a",
    "\n\u008a\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008c",
    "\u0003\u008c\u0003\u008c\u0005\u008c\u0773\n\u008c\u0003\u008d\u0003",
    "\u008d\u0003\u008d\u0003\u008e\u0003\u008e\u0003\u008f\u0003\u008f\u0005",
    "\u008f\u077c\n\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0007\u008f",
    "\u0781\n\u008f\f\u008f\u000e\u008f\u0784\u000b\u008f\u0003\u0090\u0003",
    "\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003",
    "\u0090\u0005\u0090\u078e\n\u0090\u0003\u0090\u0003\u0090\u0003\u0090",
    "\u0003\u0090\u0005\u0090\u0794\n\u0090\u0005\u0090\u0796\n\u0090\u0003",
    "\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0007\u0091\u079c\n\u0091",
    "\f\u0091\u000e\u0091\u079f\u000b\u0091\u0003\u0092\u0003\u0092\u0003",
    "\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003",
    "\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003",
    "\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003",
    "\u0092\u0003\u0092\u0005\u0092\u07b7\n\u0092\u0003\u0092\u0003\u0092",
    "\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0007\u0092",
    "\u07c0\n\u0092\f\u0092\u000e\u0092\u07c3\u000b\u0092\u0003\u0092\u0003",
    "\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0007",
    "\u0092\u07cc\n\u0092\f\u0092\u000e\u0092\u07cf\u000b\u0092\u0003\u0092",
    "\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092",
    "\u0007\u0092\u07d8\n\u0092\f\u0092\u000e\u0092\u07db\u000b\u0092\u0003",
    "\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0007",
    "\u0092\u07e3\n\u0092\f\u0092\u000e\u0092\u07e6\u000b\u0092\u0003\u0092",
    "\u0003\u0092\u0005\u0092\u07ea\n\u0092\u0003\u0093\u0003\u0093\u0003",
    "\u0093\u0003\u0093\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003",
    "\u0094\u0003\u0094\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003",
    "\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0005\u0095\u07fe\n\u0095",
    "\u0003\u0095\u0003\u0095\u0005\u0095\u0802\n\u0095\u0003\u0096\u0003",
    "\u0096\u0003\u0096\u0005\u0096\u0807\n\u0096\u0003\u0096\u0003\u0096",
    "\u0003\u0096\u0003\u0096\u0005\u0096\u080d\n\u0096\u0007\u0096\u080f",
    "\n\u0096\f\u0096\u000e\u0096\u0812\u000b\u0096\u0003\u0097\u0003\u0097",
    "\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097",
    "\u0003\u0097\u0005\u0097\u081d\n\u0097\u0003\u0098\u0003\u0098\u0003",
    "\u0099\u0003\u0099\u0003\u009a\u0003\u009a\u0003\u009b\u0003\u009b\u0003",
    "\u009c\u0003\u009c\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0003",
    "\u009d\u0005\u009d\u082e\n\u009d\u0003\u009e\u0003\u009e\u0003\u009e",
    "\u0003\u009e\u0003\u009e\u0005\u009e\u0835\n\u009e\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0005\u009f\u083c\n\u009f",
    "\u0003\u00a0\u0003\u00a0\u0005\u00a0\u0840\n\u00a0\u0003\u00a1\u0003",
    "\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003",
    "\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003",
    "\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003",
    "\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003",
    "\u00a1\u0003\u00a1\u0003\u00a1\u0005\u00a1\u085e\n\u00a1\u0003\u00a2",
    "\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0007\u00a2\u0865\n",
    "\u00a2\f\u00a2\u000e\u00a2\u0868\u000b\u00a2\u0003\u00a2\u0003\u00a2",
    "\u0003\u00a3\u0003\u00a3\u0005\u00a3\u086e\n\u00a3\u0003\u00a4\u0003",
    "\u00a4\u0003\u00a5\u0003\u00a5\u0003\u00a6\u0003\u00a6\u0003\u00a7\u0003",
    "\u00a7\u0003\u00a8\u0003\u00a8\u0003\u00a9\u0003\u00a9\u0003\u00aa\u0003",
    "\u00aa\u0003\u00ab\u0003\u00ab\u0003\u00ac\u0003\u00ac\u0003\u00ad\u0003",
    "\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00af\u0003\u00af\u0003\u00af\u0003",
    "\u00b0\u0003\u00b0\u0003\u00b1\u0003\u00b1\u0003\u00b2\u0003\u00b2\u0003",
    "\u00b3\u0003\u00b3\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b5\u0003",
    "\u00b5\u0003\u00b6\u0003\u00b6\u0003\u00b7\u0003\u00b7\u0003\u00b8\u0003",
    "\u00b8\u0003\u00b9\u0003\u00b9\u0003\u00ba\u0003\u00ba\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bc\u0003\u00bc\u0003\u00bd\u0003\u00bd\u0003\u00be\u0003",
    "\u00be\u0003\u00bf\u0003\u00bf\u0003\u00c0\u0003\u00c0\u0003\u00c1\u0003",
    "\u00c1\u0003\u00c2\u0003\u00c2\u0003\u00c3\u0003\u00c3\u0003\u00c4\u0003",
    "\u00c4\u0003\u00c5\u0003\u00c5\u0003\u00c6\u0003\u00c6\u0003\u00c7\u0003",
    "\u00c7\u0003\u00c8\u0003\u00c8\u0003\u00c9\u0003\u00c9\u0003\u00ca\u0003",
    "\u00ca\u0003\u00cb\u0003\u00cb\u0003\u00cc\u0003\u00cc\u0003\u00cd\u0003",
    "\u00cd\u0003\u00ce\u0003\u00ce\u0003\u00cf\u0003\u00cf\u0003\u00d0\u0003",
    "\u00d0\u0003\u00d1\u0003\u00d1\u0003\u00d2\u0003\u00d2\u0003\u00d3\u0003",
    "\u00d3\u0003\u00d4\u0003\u00d4\u0003\u00d5\u0003\u00d5\u0003\u00d6\u0003",
    "\u00d6\u0003\u00d7\u0003\u00d7\u0003\u00d8\u0003\u00d8\u0003\u00d9\u0003",
    "\u00d9\u0003\u00da\u0003\u00da\u0003\u00db\u0003\u00db\u0003\u00dc\u0003",
    "\u00dc\u0003\u00dd\u0003\u00dd\u0003\u00de\u0003\u00de\u0003\u00df\u0003",
    "\u00df\u0003\u00e0\u0003\u00e0\u0003\u00e1\u0003\u00e1\u0003\u00e2\u0003",
    "\u00e2\u0003\u00e3\u0003\u00e3\u0003\u00e4\u0003\u00e4\u0003\u00e5\u0003",
    "\u00e5\u0003\u00e6\u0003\u00e6\u0003\u00e7\u0003\u00e7\u0003\u00e8\u0003",
    "\u00e8\u0003\u00e9\u0003\u00e9\u0003\u00ea\u0003\u00ea\u0003\u00eb\u0003",
    "\u00eb\u0003\u00ec\u0003\u00ec\u0003\u00ed\u0003\u00ed\u0003\u00ee\u0003",
    "\u00ee\u0003\u00ef\u0003\u00ef\u0003\u00f0\u0003\u00f0\u0003\u00f1\u0003",
    "\u00f1\u0003\u00f2\u0003\u00f2\u0003\u00f3\u0003\u00f3\u0003\u00f4\u0003",
    "\u00f4\u0003\u00f5\u0003\u00f5\u0003\u00f6\u0003\u00f6\u0003\u00f7\u0003",
    "\u00f7\u0003\u00f8\u0003\u00f8\u0003\u00f9\u0003\u00f9\u0003\u00fa\u0003",
    "\u00fa\u0003\u00fb\u0003\u00fb\u0003\u00fc\u0003\u00fc\u0003\u00fd\u0003",
    "\u00fd\u0003\u00fe\u0003\u00fe\u0003\u00ff\u0003\u00ff\u0003\u0100\u0003",
    "\u0100\u0003\u0101\u0003\u0101\u0003\u0102\u0003\u0102\u0003\u0103\u0003",
    "\u0103\u0003\u0104\u0003\u0104\u0003\u0105\u0003\u0105\u0003\u0106\u0003",
    "\u0106\u0003\u0107\u0003\u0107\u0003\u0108\u0003\u0108\u0003\u0109\u0003",
    "\u0109\u0003\u010a\u0003\u010a\u0003\u010b\u0003\u010b\u0003\u010c\u0003",
    "\u010c\u0003\u010d\u0003\u010d\u0003\u010e\u0003\u010e\u0003\u010f\u0003",
    "\u010f\u0003\u0110\u0003\u0110\u0003\u0111\u0003\u0111\u0003\u0112\u0003",
    "\u0112\u0003\u0113\u0003\u0113\u0003\u0114\u0003\u0114\u0003\u0115\u0003",
    "\u0115\u0003\u0116\u0003\u0116\u0003\u0117\u0003\u0117\u0003\u0118\u0003",
    "\u0118\u0003\u0119\u0003\u0119\u0003\u011a\u0003\u011a\u0003\u011b\u0003",
    "\u011b\u0003\u011c\u0003\u011c\u0003\u011d\u0003\u011d\u0003\u011e\u0003",
    "\u011e\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0005\u011f\u09f6",
    "\n\u011f\u0003\u011f\u0002\u0002\u0120\u0002\u0004\u0006\b\n\f\u000e",
    "\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@B",
    "DFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a",
    "\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2",
    "\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba",
    "\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2",
    "\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea",
    "\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102",
    "\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a",
    "\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132",
    "\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a",
    "\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162",
    "\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a",
    "\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192",
    "\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa",
    "\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2",
    "\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da",
    "\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2",
    "\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a",
    "\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222",
    "\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a",
    "\u023c\u0002\u0007\u0003\u0002\u00a8\u00a9\u0004\u0002\u0014\u0014\u0016",
    "\u0016\u0003\u0002\u00b0\u00b4\u0003\u0002\u00aa\u00ab\u0004\u00029",
    "9\u0082\u0082\u0002\u0a9a\u0002\u023f\u0003\u0002\u0002\u0002\u0004",
    "\u024f\u0003\u0002\u0002\u0002\u0006\u025c\u0003\u0002\u0002\u0002\b",
    "\u025e\u0003\u0002\u0002\u0002\n\u0285\u0003\u0002\u0002\u0002\f\u0287",
    "\u0003\u0002\u0002\u0002\u000e\u028e\u0003\u0002\u0002\u0002\u0010\u0291",
    "\u0003\u0002\u0002\u0002\u0012\u029b\u0003\u0002\u0002\u0002\u0014\u02a7",
    "\u0003\u0002\u0002\u0002\u0016\u02ba\u0003\u0002\u0002\u0002\u0018\u02e8",
    "\u0003\u0002\u0002\u0002\u001a\u02ea\u0003\u0002\u0002\u0002\u001c\u02f7",
    "\u0003\u0002\u0002\u0002\u001e\u0300\u0003\u0002\u0002\u0002 \u030f",
    "\u0003\u0002\u0002\u0002\"\u031a\u0003\u0002\u0002\u0002$\u0328\u0003",
    "\u0002\u0002\u0002&\u0347\u0003\u0002\u0002\u0002(\u034e\u0003\u0002",
    "\u0002\u0002*\u0357\u0003\u0002\u0002\u0002,\u035c\u0003\u0002\u0002",
    "\u0002.\u035e\u0003\u0002\u0002\u00020\u036f\u0003\u0002\u0002\u0002",
    "2\u038a\u0003\u0002\u0002\u00024\u038c\u0003\u0002\u0002\u00026\u0399",
    "\u0003\u0002\u0002\u00028\u039f\u0003\u0002\u0002\u0002:\u03bd\u0003",
    "\u0002\u0002\u0002<\u03bf\u0003\u0002\u0002\u0002>\u03cb\u0003\u0002",
    "\u0002\u0002@\u03cf\u0003\u0002\u0002\u0002B\u03dc\u0003\u0002\u0002",
    "\u0002D\u03e8\u0003\u0002\u0002\u0002F\u03eb\u0003\u0002\u0002\u0002",
    "H\u03f3\u0003\u0002\u0002\u0002J\u03f8\u0003\u0002\u0002\u0002L\u03fa",
    "\u0003\u0002\u0002\u0002N\u0407\u0003\u0002\u0002\u0002P\u0409\u0003",
    "\u0002\u0002\u0002R\u040c\u0003\u0002\u0002\u0002T\u0415\u0003\u0002",
    "\u0002\u0002V\u0419\u0003\u0002\u0002\u0002X\u041c\u0003\u0002\u0002",
    "\u0002Z\u0421\u0003\u0002\u0002\u0002\\\u0431\u0003\u0002\u0002\u0002",
    "^\u0433\u0003\u0002\u0002\u0002`\u0436\u0003\u0002\u0002\u0002b\u043b",
    "\u0003\u0002\u0002\u0002d\u043f\u0003\u0002\u0002\u0002f\u0442\u0003",
    "\u0002\u0002\u0002h\u044b\u0003\u0002\u0002\u0002j\u044e\u0003\u0002",
    "\u0002\u0002l\u0459\u0003\u0002\u0002\u0002n\u045f\u0003\u0002\u0002",
    "\u0002p\u0479\u0003\u0002\u0002\u0002r\u047b\u0003\u0002\u0002\u0002",
    "t\u0489\u0003\u0002\u0002\u0002v\u0490\u0003\u0002\u0002\u0002x\u049c",
    "\u0003\u0002\u0002\u0002z\u04a9\u0003\u0002\u0002\u0002|\u04b5\u0003",
    "\u0002\u0002\u0002~\u04c1\u0003\u0002\u0002\u0002\u0080\u04cf\u0003",
    "\u0002\u0002\u0002\u0082\u04d6\u0003\u0002\u0002\u0002\u0084\u04e2\u0003",
    "\u0002\u0002\u0002\u0086\u04e9\u0003\u0002\u0002\u0002\u0088\u04f5\u0003",
    "\u0002\u0002\u0002\u008a\u0506\u0003\u0002\u0002\u0002\u008c\u050a\u0003",
    "\u0002\u0002\u0002\u008e\u0518\u0003\u0002\u0002\u0002\u0090\u051f\u0003",
    "\u0002\u0002\u0002\u0092\u0531\u0003\u0002\u0002\u0002\u0094\u0533\u0003",
    "\u0002\u0002\u0002\u0096\u0538\u0003\u0002\u0002\u0002\u0098\u053a\u0003",
    "\u0002\u0002\u0002\u009a\u0546\u0003\u0002\u0002\u0002\u009c\u054a\u0003",
    "\u0002\u0002\u0002\u009e\u054e\u0003\u0002\u0002\u0002\u00a0\u0550\u0003",
    "\u0002\u0002\u0002\u00a2\u055e\u0003\u0002\u0002\u0002\u00a4\u0563\u0003",
    "\u0002\u0002\u0002\u00a6\u0566\u0003\u0002\u0002\u0002\u00a8\u056f\u0003",
    "\u0002\u0002\u0002\u00aa\u0571\u0003\u0002\u0002\u0002\u00ac\u0573\u0003",
    "\u0002\u0002\u0002\u00ae\u0579\u0003\u0002\u0002\u0002\u00b0\u0581\u0003",
    "\u0002\u0002\u0002\u00b2\u058a\u0003\u0002\u0002\u0002\u00b4\u0593\u0003",
    "\u0002\u0002\u0002\u00b6\u0595\u0003\u0002\u0002\u0002\u00b8\u0597\u0003",
    "\u0002\u0002\u0002\u00ba\u059a\u0003\u0002\u0002\u0002\u00bc\u05a4\u0003",
    "\u0002\u0002\u0002\u00be\u05a6\u0003\u0002\u0002\u0002\u00c0\u05b4\u0003",
    "\u0002\u0002\u0002\u00c2\u05c3\u0003\u0002\u0002\u0002\u00c4\u05c5\u0003",
    "\u0002\u0002\u0002\u00c6\u05c9\u0003\u0002\u0002\u0002\u00c8\u05cc\u0003",
    "\u0002\u0002\u0002\u00ca\u05d7\u0003\u0002\u0002\u0002\u00cc\u05ec\u0003",
    "\u0002\u0002\u0002\u00ce\u05f2\u0003\u0002\u0002\u0002\u00d0\u05f4\u0003",
    "\u0002\u0002\u0002\u00d2\u05f9\u0003\u0002\u0002\u0002\u00d4\u05fe\u0003",
    "\u0002\u0002\u0002\u00d6\u0604\u0003\u0002\u0002\u0002\u00d8\u0613\u0003",
    "\u0002\u0002\u0002\u00da\u0625\u0003\u0002\u0002\u0002\u00dc\u0628\u0003",
    "\u0002\u0002\u0002\u00de\u063b\u0003\u0002\u0002\u0002\u00e0\u063e\u0003",
    "\u0002\u0002\u0002\u00e2\u0647\u0003\u0002\u0002\u0002\u00e4\u064b\u0003",
    "\u0002\u0002\u0002\u00e6\u068d\u0003\u0002\u0002\u0002\u00e8\u068f\u0003",
    "\u0002\u0002\u0002\u00ea\u069d\u0003\u0002\u0002\u0002\u00ec\u06ae\u0003",
    "\u0002\u0002\u0002\u00ee\u06ba\u0003\u0002\u0002\u0002\u00f0\u06c6\u0003",
    "\u0002\u0002\u0002\u00f2\u06e8\u0003\u0002\u0002\u0002\u00f4\u070c\u0003",
    "\u0002\u0002\u0002\u00f6\u070e\u0003\u0002\u0002\u0002\u00f8\u0711\u0003",
    "\u0002\u0002\u0002\u00fa\u0714\u0003\u0002\u0002\u0002\u00fc\u0717\u0003",
    "\u0002\u0002\u0002\u00fe\u071b\u0003\u0002\u0002\u0002\u0100\u0726\u0003",
    "\u0002\u0002\u0002\u0102\u0728\u0003\u0002\u0002\u0002\u0104\u072c\u0003",
    "\u0002\u0002\u0002\u0106\u0735\u0003\u0002\u0002\u0002\u0108\u0744\u0003",
    "\u0002\u0002\u0002\u010a\u0746\u0003\u0002\u0002\u0002\u010c\u075b\u0003",
    "\u0002\u0002\u0002\u010e\u075e\u0003\u0002\u0002\u0002\u0110\u0761\u0003",
    "\u0002\u0002\u0002\u0112\u0769\u0003\u0002\u0002\u0002\u0114\u076b\u0003",
    "\u0002\u0002\u0002\u0116\u076f\u0003\u0002\u0002\u0002\u0118\u0774\u0003",
    "\u0002\u0002\u0002\u011a\u0777\u0003\u0002\u0002\u0002\u011c\u077b\u0003",
    "\u0002\u0002\u0002\u011e\u0795\u0003\u0002\u0002\u0002\u0120\u0797\u0003",
    "\u0002\u0002\u0002\u0122\u07e9\u0003\u0002\u0002\u0002\u0124\u07eb\u0003",
    "\u0002\u0002\u0002\u0126\u07ef\u0003\u0002\u0002\u0002\u0128\u0801\u0003",
    "\u0002\u0002\u0002\u012a\u0806\u0003\u0002\u0002\u0002\u012c\u081c\u0003",
    "\u0002\u0002\u0002\u012e\u081e\u0003\u0002\u0002\u0002\u0130\u0820\u0003",
    "\u0002\u0002\u0002\u0132\u0822\u0003\u0002\u0002\u0002\u0134\u0824\u0003",
    "\u0002\u0002\u0002\u0136\u0826\u0003\u0002\u0002\u0002\u0138\u082d\u0003",
    "\u0002\u0002\u0002\u013a\u0834\u0003\u0002\u0002\u0002\u013c\u083b\u0003",
    "\u0002\u0002\u0002\u013e\u083d\u0003\u0002\u0002\u0002\u0140\u085d\u0003",
    "\u0002\u0002\u0002\u0142\u085f\u0003\u0002\u0002\u0002\u0144\u086d\u0003",
    "\u0002\u0002\u0002\u0146\u086f\u0003\u0002\u0002\u0002\u0148\u0871\u0003",
    "\u0002\u0002\u0002\u014a\u0873\u0003\u0002\u0002\u0002\u014c\u0875\u0003",
    "\u0002\u0002\u0002\u014e\u0877\u0003\u0002\u0002\u0002\u0150\u0879\u0003",
    "\u0002\u0002\u0002\u0152\u087b\u0003\u0002\u0002\u0002\u0154\u087d\u0003",
    "\u0002\u0002\u0002\u0156\u087f\u0003\u0002\u0002\u0002\u0158\u0881\u0003",
    "\u0002\u0002\u0002\u015a\u0883\u0003\u0002\u0002\u0002\u015c\u0885\u0003",
    "\u0002\u0002\u0002\u015e\u0888\u0003\u0002\u0002\u0002\u0160\u088a\u0003",
    "\u0002\u0002\u0002\u0162\u088c\u0003\u0002\u0002\u0002\u0164\u088e\u0003",
    "\u0002\u0002\u0002\u0166\u0890\u0003\u0002\u0002\u0002\u0168\u0893\u0003",
    "\u0002\u0002\u0002\u016a\u0895\u0003\u0002\u0002\u0002\u016c\u0897\u0003",
    "\u0002\u0002\u0002\u016e\u0899\u0003\u0002\u0002\u0002\u0170\u089b\u0003",
    "\u0002\u0002\u0002\u0172\u089d\u0003\u0002\u0002\u0002\u0174\u089f\u0003",
    "\u0002\u0002\u0002\u0176\u08a1\u0003\u0002\u0002\u0002\u0178\u08a3\u0003",
    "\u0002\u0002\u0002\u017a\u08a5\u0003\u0002\u0002\u0002\u017c\u08a7\u0003",
    "\u0002\u0002\u0002\u017e\u08a9\u0003\u0002\u0002\u0002\u0180\u08ab\u0003",
    "\u0002\u0002\u0002\u0182\u08ad\u0003\u0002\u0002\u0002\u0184\u08af\u0003",
    "\u0002\u0002\u0002\u0186\u08b1\u0003\u0002\u0002\u0002\u0188\u08b3\u0003",
    "\u0002\u0002\u0002\u018a\u08b5\u0003\u0002\u0002\u0002\u018c\u08b7\u0003",
    "\u0002\u0002\u0002\u018e\u08b9\u0003\u0002\u0002\u0002\u0190\u08bb\u0003",
    "\u0002\u0002\u0002\u0192\u08bd\u0003\u0002\u0002\u0002\u0194\u08bf\u0003",
    "\u0002\u0002\u0002\u0196\u08c1\u0003\u0002\u0002\u0002\u0198\u08c3\u0003",
    "\u0002\u0002\u0002\u019a\u08c5\u0003\u0002\u0002\u0002\u019c\u08c7\u0003",
    "\u0002\u0002\u0002\u019e\u08c9\u0003\u0002\u0002\u0002\u01a0\u08cb\u0003",
    "\u0002\u0002\u0002\u01a2\u08cd\u0003\u0002\u0002\u0002\u01a4\u08cf\u0003",
    "\u0002\u0002\u0002\u01a6\u08d1\u0003\u0002\u0002\u0002\u01a8\u08d3\u0003",
    "\u0002\u0002\u0002\u01aa\u08d5\u0003\u0002\u0002\u0002\u01ac\u08d7\u0003",
    "\u0002\u0002\u0002\u01ae\u08d9\u0003\u0002\u0002\u0002\u01b0\u08db\u0003",
    "\u0002\u0002\u0002\u01b2\u08dd\u0003\u0002\u0002\u0002\u01b4\u08df\u0003",
    "\u0002\u0002\u0002\u01b6\u08e1\u0003\u0002\u0002\u0002\u01b8\u08e3\u0003",
    "\u0002\u0002\u0002\u01ba\u08e5\u0003\u0002\u0002\u0002\u01bc\u08e7\u0003",
    "\u0002\u0002\u0002\u01be\u08e9\u0003\u0002\u0002\u0002\u01c0\u08eb\u0003",
    "\u0002\u0002\u0002\u01c2\u08ed\u0003\u0002\u0002\u0002\u01c4\u08ef\u0003",
    "\u0002\u0002\u0002\u01c6\u08f1\u0003\u0002\u0002\u0002\u01c8\u08f3\u0003",
    "\u0002\u0002\u0002\u01ca\u08f5\u0003\u0002\u0002\u0002\u01cc\u08f7\u0003",
    "\u0002\u0002\u0002\u01ce\u08f9\u0003\u0002\u0002\u0002\u01d0\u08fb\u0003",
    "\u0002\u0002\u0002\u01d2\u08fd\u0003\u0002\u0002\u0002\u01d4\u08ff\u0003",
    "\u0002\u0002\u0002\u01d6\u0901\u0003\u0002\u0002\u0002\u01d8\u0903\u0003",
    "\u0002\u0002\u0002\u01da\u0905\u0003\u0002\u0002\u0002\u01dc\u0907\u0003",
    "\u0002\u0002\u0002\u01de\u0909\u0003\u0002\u0002\u0002\u01e0\u090b\u0003",
    "\u0002\u0002\u0002\u01e2\u090d\u0003\u0002\u0002\u0002\u01e4\u090f\u0003",
    "\u0002\u0002\u0002\u01e6\u0911\u0003\u0002\u0002\u0002\u01e8\u0913\u0003",
    "\u0002\u0002\u0002\u01ea\u0915\u0003\u0002\u0002\u0002\u01ec\u0917\u0003",
    "\u0002\u0002\u0002\u01ee\u0919\u0003\u0002\u0002\u0002\u01f0\u091b\u0003",
    "\u0002\u0002\u0002\u01f2\u091d\u0003\u0002\u0002\u0002\u01f4\u091f\u0003",
    "\u0002\u0002\u0002\u01f6\u0921\u0003\u0002\u0002\u0002\u01f8\u0923\u0003",
    "\u0002\u0002\u0002\u01fa\u0925\u0003\u0002\u0002\u0002\u01fc\u0927\u0003",
    "\u0002\u0002\u0002\u01fe\u0929\u0003\u0002\u0002\u0002\u0200\u092b\u0003",
    "\u0002\u0002\u0002\u0202\u092d\u0003\u0002\u0002\u0002\u0204\u092f\u0003",
    "\u0002\u0002\u0002\u0206\u0931\u0003\u0002\u0002\u0002\u0208\u0933\u0003",
    "\u0002\u0002\u0002\u020a\u0935\u0003\u0002\u0002\u0002\u020c\u0937\u0003",
    "\u0002\u0002\u0002\u020e\u0939\u0003\u0002\u0002\u0002\u0210\u093b\u0003",
    "\u0002\u0002\u0002\u0212\u093d\u0003\u0002\u0002\u0002\u0214\u093f\u0003",
    "\u0002\u0002\u0002\u0216\u0941\u0003\u0002\u0002\u0002\u0218\u0943\u0003",
    "\u0002\u0002\u0002\u021a\u0945\u0003\u0002\u0002\u0002\u021c\u0947\u0003",
    "\u0002\u0002\u0002\u021e\u0949\u0003\u0002\u0002\u0002\u0220\u094b\u0003",
    "\u0002\u0002\u0002\u0222\u094d\u0003\u0002\u0002\u0002\u0224\u094f\u0003",
    "\u0002\u0002\u0002\u0226\u0951\u0003\u0002\u0002\u0002\u0228\u0953\u0003",
    "\u0002\u0002\u0002\u022a\u0955\u0003\u0002\u0002\u0002\u022c\u0957\u0003",
    "\u0002\u0002\u0002\u022e\u0959\u0003\u0002\u0002\u0002\u0230\u095b\u0003",
    "\u0002\u0002\u0002\u0232\u095d\u0003\u0002\u0002\u0002\u0234\u095f\u0003",
    "\u0002\u0002\u0002\u0236\u0961\u0003\u0002\u0002\u0002\u0238\u0963\u0003",
    "\u0002\u0002\u0002\u023a\u0965\u0003\u0002\u0002\u0002\u023c\u09f5\u0003",
    "\u0002\u0002\u0002\u023e\u0240\u0005\u0004\u0003\u0002\u023f\u023e\u0003",
    "\u0002\u0002\u0002\u023f\u0240\u0003\u0002\u0002\u0002\u0240\u0242\u0003",
    "\u0002\u0002\u0002\u0241\u0243\u0007\u0015\u0002\u0002\u0242\u0241\u0003",
    "\u0002\u0002\u0002\u0242\u0243\u0003\u0002\u0002\u0002\u0243\u0244\u0003",
    "\u0002\u0002\u0002\u0244\u0245\u0005\u0226\u0114\u0002\u0245\u0003\u0003",
    "\u0002\u0002\u0002\u0246\u0248\u0005\n\u0006\u0002\u0247\u0249\u0007",
    "\u0015\u0002\u0002\u0248\u0247\u0003\u0002\u0002\u0002\u0248\u0249\u0003",
    "\u0002\u0002\u0002\u0249\u024a\u0003\u0002\u0002\u0002\u024a\u024b\u0005",
    "\u0006\u0004\u0002\u024b\u024e\u0003\u0002\u0002\u0002\u024c\u024e\u0005",
    "\b\u0005\u0002\u024d\u0246\u0003\u0002\u0002\u0002\u024d\u024c\u0003",
    "\u0002\u0002\u0002\u024e\u0251\u0003\u0002\u0002\u0002\u024f\u024d\u0003",
    "\u0002\u0002\u0002\u024f\u0250\u0003\u0002\u0002\u0002\u0250\u025a\u0003",
    "\u0002\u0002\u0002\u0251\u024f\u0003\u0002\u0002\u0002\u0252\u0257\u0005",
    "\n\u0006\u0002\u0253\u0255\u0007\u0015\u0002\u0002\u0254\u0253\u0003",
    "\u0002\u0002\u0002\u0254\u0255\u0003\u0002\u0002\u0002\u0255\u0256\u0003",
    "\u0002\u0002\u0002\u0256\u0258\u0005\u0006\u0004\u0002\u0257\u0254\u0003",
    "\u0002\u0002\u0002\u0257\u0258\u0003\u0002\u0002\u0002\u0258\u025b\u0003",
    "\u0002\u0002\u0002\u0259\u025b\u0005\b\u0005\u0002\u025a\u0252\u0003",
    "\u0002\u0002\u0002\u025a\u0259\u0003\u0002\u0002\u0002\u025b\u0005\u0003",
    "\u0002\u0002\u0002\u025c\u025d\u0007\n\u0002\u0002\u025d\u0007\u0003",
    "\u0002\u0002\u0002\u025e\u025f\u0005\u0006\u0004\u0002\u025f\t\u0003",
    "\u0002\u0002\u0002\u0260\u0286\u0005\u00be`\u0002\u0261\u0286\u0005",
    "r:\u0002\u0262\u0286\u0005l7\u0002\u0263\u0286\u0005Z.\u0002\u0264\u0286",
    "\u0005L\'\u0002\u0265\u0286\u0005F$\u0002\u0266\u0286\u0005\u00b8]\u0002",
    "\u0267\u0286\u00058\u001d\u0002\u0268\u0286\u00050\u0019\u0002\u0269",
    "\u0286\u0005\u00caf\u0002\u026a\u0286\u0005.\u0018\u0002\u026b\u0286",
    "\u0005$\u0013\u0002\u026c\u0286\u0005\u001c\u000f\u0002\u026d\u0286",
    "\u0005\u0088E\u0002\u026e\u0286\u0005\"\u0012\u0002\u026f\u0286\u0005",
    "\u001e\u0010\u0002\u0270\u0286\u0005\u001a\u000e\u0002\u0271\u0286\u0005",
    "\u00d6l\u0002\u0272\u0286\u0005z>\u0002\u0273\u0286\u0005|?\u0002\u0274",
    "\u0286\u0005\u0086D\u0002\u0275\u0286\u0005\u0084C\u0002\u0276\u0286",
    "\u0005x=\u0002\u0277\u0286\u0005\u0080A\u0002\u0278\u0286\u0005\u0082",
    "B\u0002\u0279\u0286\u0005~@\u0002\u027a\u0286\u0005v<\u0002\u027b\u0286",
    "\u0005t;\u0002\u027c\u0286\u0005\u0014\u000b\u0002\u027d\u0286\u0005",
    "\u00f2z\u0002\u027e\u0286\u0005\u0012\n\u0002\u027f\u0286\u0005\u0010",
    "\t\u0002\u0280\u0286\u0005\f\u0007\u0002\u0281\u0286\u0005\u010a\u0086",
    "\u0002\u0282\u0286\u0005\u00c8e\u0002\u0283\u0286\u0005\u00dco\u0002",
    "\u0284\u0286\u0005\u00c6d\u0002\u0285\u0260\u0003\u0002\u0002\u0002",
    "\u0285\u0261\u0003\u0002\u0002\u0002\u0285\u0262\u0003\u0002\u0002\u0002",
    "\u0285\u0263\u0003\u0002\u0002\u0002\u0285\u0264\u0003\u0002\u0002\u0002",
    "\u0285\u0265\u0003\u0002\u0002\u0002\u0285\u0266\u0003\u0002\u0002\u0002",
    "\u0285\u0267\u0003\u0002\u0002\u0002\u0285\u0268\u0003\u0002\u0002\u0002",
    "\u0285\u0269\u0003\u0002\u0002\u0002\u0285\u026a\u0003\u0002\u0002\u0002",
    "\u0285\u026b\u0003\u0002\u0002\u0002\u0285\u026c\u0003\u0002\u0002\u0002",
    "\u0285\u026d\u0003\u0002\u0002\u0002\u0285\u026e\u0003\u0002\u0002\u0002",
    "\u0285\u026f\u0003\u0002\u0002\u0002\u0285\u0270\u0003\u0002\u0002\u0002",
    "\u0285\u0271\u0003\u0002\u0002\u0002\u0285\u0272\u0003\u0002\u0002\u0002",
    "\u0285\u0273\u0003\u0002\u0002\u0002\u0285\u0274\u0003\u0002\u0002\u0002",
    "\u0285\u0275\u0003\u0002\u0002\u0002\u0285\u0276\u0003\u0002\u0002\u0002",
    "\u0285\u0277\u0003\u0002\u0002\u0002\u0285\u0278\u0003\u0002\u0002\u0002",
    "\u0285\u0279\u0003\u0002\u0002\u0002\u0285\u027a\u0003\u0002\u0002\u0002",
    "\u0285\u027b\u0003\u0002\u0002\u0002\u0285\u027c\u0003\u0002\u0002\u0002",
    "\u0285\u027d\u0003\u0002\u0002\u0002\u0285\u027e\u0003\u0002\u0002\u0002",
    "\u0285\u027f\u0003\u0002\u0002\u0002\u0285\u0280\u0003\u0002\u0002\u0002",
    "\u0285\u0281\u0003\u0002\u0002\u0002\u0285\u0282\u0003\u0002\u0002\u0002",
    "\u0285\u0283\u0003\u0002\u0002\u0002\u0285\u0284\u0003\u0002\u0002\u0002",
    "\u0286\u000b\u0003\u0002\u0002\u0002\u0287\u0288\u0005\u0224\u0113\u0002",
    "\u0288\u0289\u0005\u0016\f\u0002\u0289\u028a\u0005\u01d8\u00ed\u0002",
    "\u028a\u028b\u0005\u0018\r\u0002\u028b\u028c\u0005\u019c\u00cf\u0002",
    "\u028c\u028d\u0005\u0146\u00a4\u0002\u028d\r\u0003\u0002\u0002\u0002",
    "\u028e\u028f\u0005\u01c4\u00e3\u0002\u028f\u0290\u0005\u0218\u010d\u0002",
    "\u0290\u000f\u0003\u0002\u0002\u0002\u0291\u0292\u0005\u01c4\u00e3\u0002",
    "\u0292\u0296\u0005\u01f4\u00fb\u0002\u0293\u0294\u0005\u01d6\u00ec\u0002",
    "\u0294\u0295\u0005\u0146\u00a4\u0002\u0295\u0297\u0003\u0002\u0002\u0002",
    "\u0296\u0293\u0003\u0002\u0002\u0002\u0296\u0297\u0003\u0002\u0002\u0002",
    "\u0297\u0299\u0003\u0002\u0002\u0002\u0298\u029a\u0005\u01d0\u00e9\u0002",
    "\u0299\u0298\u0003\u0002\u0002\u0002\u0299\u029a\u0003\u0002\u0002\u0002",
    "\u029a\u0011\u0003\u0002\u0002\u0002\u029b\u029c\u0005\u01c4\u00e3\u0002",
    "\u029c\u02a0\u0005\u0016\f\u0002\u029d\u029e\u0005\u01d8\u00ed\u0002",
    "\u029e\u029f\u0005\u0018\r\u0002\u029f\u02a1\u0003\u0002\u0002\u0002",
    "\u02a0\u029d\u0003\u0002\u0002\u0002\u02a0\u02a1\u0003\u0002\u0002\u0002",
    "\u02a1\u02a5\u0003\u0002\u0002\u0002\u02a2\u02a3\u0005\u01d6\u00ec\u0002",
    "\u02a3\u02a4\u0005\u0146\u00a4\u0002\u02a4\u02a6\u0003\u0002\u0002\u0002",
    "\u02a5\u02a2\u0003\u0002\u0002\u0002\u02a5\u02a6\u0003\u0002\u0002\u0002",
    "\u02a6\u0013\u0003\u0002\u0002\u0002\u02a7\u02a8\u0005\u01a4\u00d3\u0002",
    "\u02a8\u02a9\u0005\u0016\f\u0002\u02a9\u02aa\u0005\u01d8\u00ed\u0002",
    "\u02aa\u02ab\u0005\u0018\r\u0002\u02ab\u02ac\u0005\u0206\u0104\u0002",
    "\u02ac\u02ad\u0005\u0146\u00a4\u0002\u02ad\u0015\u0003\u0002\u0002\u0002",
    "\u02ae\u02b1\u0005\u0164\u00b3\u0002\u02af\u02b1\u0005\u0166\u00b4\u0002",
    "\u02b0\u02ae\u0003\u0002\u0002\u0002\u02b0\u02af\u0003\u0002\u0002\u0002",
    "\u02b1\u02bb\u0003\u0002\u0002\u0002\u02b2\u02bb\u0005\u016a\u00b6\u0002",
    "\u02b3\u02bb\u0005\u0174\u00bb\u0002\u02b4\u02bb\u0005\u018a\u00c6\u0002",
    "\u02b5\u02bb\u0005\u0194\u00cb\u0002\u02b6\u02bb\u0005\u0184\u00c3\u0002",
    "\u02b7\u02bb\u0005\u018e\u00c8\u0002\u02b8\u02bb\u0005\u01cc\u00e7\u0002",
    "\u02b9\u02bb\u0005\u01f6\u00fc\u0002\u02ba\u02b0\u0003\u0002\u0002\u0002",
    "\u02ba\u02b2\u0003\u0002\u0002\u0002\u02ba\u02b3\u0003\u0002\u0002\u0002",
    "\u02ba\u02b4\u0003\u0002\u0002\u0002\u02ba\u02b5\u0003\u0002\u0002\u0002",
    "\u02ba\u02b6\u0003\u0002\u0002\u0002\u02ba\u02b7\u0003\u0002\u0002\u0002",
    "\u02ba\u02b8\u0003\u0002\u0002\u0002\u02ba\u02b9\u0003\u0002\u0002\u0002",
    "\u02bb\u0017\u0003\u0002\u0002\u0002\u02bc\u02bd\u0005\u0164\u00b3\u0002",
    "\u02bd\u02be\u0005\u01a2\u00d2\u0002\u02be\u02e9\u0003\u0002\u0002\u0002",
    "\u02bf\u02c0\u0005\u0164\u00b3\u0002\u02c0\u02c1\u0005\u01a2\u00d2\u0002",
    "\u02c1\u02c2\u0005\u01a8\u00d5\u0002\u02c2\u02c3\u0005\u01bc\u00df\u0002",
    "\u02c3\u02c4\u0005\u0138\u009d\u0002\u02c4\u02e9\u0003\u0002\u0002\u0002",
    "\u02c5\u02c9\u0005\u01a0\u00d1\u0002\u02c6\u02c7\u0005\u0138\u009d\u0002",
    "\u02c7\u02c8\u0007\u0010\u0002\u0002\u02c8\u02ca\u0003\u0002\u0002\u0002",
    "\u02c9\u02c6\u0003\u0002\u0002\u0002\u02c9\u02ca\u0003\u0002\u0002\u0002",
    "\u02ca\u02cb\u0003\u0002\u0002\u0002\u02cb\u02cc\u0005\u0152\u00aa\u0002",
    "\u02cc\u02e9\u0003\u0002\u0002\u0002\u02cd\u02ce\u0005\u0164\u00b3\u0002",
    "\u02ce\u02cf\u0005\u01be\u00e0\u0002\u02cf\u02e9\u0003\u0002\u0002\u0002",
    "\u02d0\u02d1\u0005\u01bc\u00df\u0002\u02d1\u02d2\u0005\u0138\u009d\u0002",
    "\u02d2\u02e9\u0003\u0002\u0002\u0002\u02d3\u02d5\u0005\u0202\u0102\u0002",
    "\u02d4\u02d3\u0003\u0002\u0002\u0002\u02d4\u02d5\u0003\u0002\u0002\u0002",
    "\u02d5\u02d9\u0003\u0002\u0002\u0002\u02d6\u02d7\u0005\u0138\u009d\u0002",
    "\u02d7\u02d8\u0007\u0010\u0002\u0002\u02d8\u02da\u0003\u0002\u0002\u0002",
    "\u02d9\u02d6\u0003\u0002\u0002\u0002\u02d9\u02da\u0003\u0002\u0002\u0002",
    "\u02da\u02db\u0003\u0002\u0002\u0002\u02db\u02e9\u0005\u013a\u009e\u0002",
    "\u02dc\u02dd\u0005\u0164\u00b3\u0002\u02dd\u02de\u0005\u01f4\u00fb\u0002",
    "\u02de\u02e9\u0003\u0002\u0002\u0002\u02df\u02e0\u0005\u01ec\u00f7\u0002",
    "\u02e0\u02e1\u0005\u0146\u00a4\u0002\u02e1\u02e9\u0003\u0002\u0002\u0002",
    "\u02e2\u02e5\u0005\u01ee\u00f8\u0002\u02e3\u02e5\u0005\u01f0\u00f9\u0002",
    "\u02e4\u02e2\u0003\u0002\u0002\u0002\u02e4\u02e3\u0003\u0002\u0002\u0002",
    "\u02e5\u02e6\u0003\u0002\u0002\u0002\u02e6\u02e7\u0005\u01f2\u00fa\u0002",
    "\u02e7\u02e9\u0003\u0002\u0002\u0002\u02e8\u02bc\u0003\u0002\u0002\u0002",
    "\u02e8\u02bf\u0003\u0002\u0002\u0002\u02e8\u02c5\u0003\u0002\u0002\u0002",
    "\u02e8\u02cd\u0003\u0002\u0002\u0002\u02e8\u02d0\u0003\u0002\u0002\u0002",
    "\u02e8\u02d4\u0003\u0002\u0002\u0002\u02e8\u02dc\u0003\u0002\u0002\u0002",
    "\u02e8\u02df\u0003\u0002\u0002\u0002\u02e8\u02e4\u0003\u0002\u0002\u0002",
    "\u02e9\u0019\u0003\u0002\u0002\u0002\u02ea\u02eb\u0005\u0184\u00c3\u0002",
    "\u02eb\u02ed\u0005\u0216\u010c\u0002\u02ec\u02ee\u0005\u00fc\u007f\u0002",
    "\u02ed\u02ec\u0003\u0002\u0002\u0002\u02ed\u02ee\u0003\u0002\u0002\u0002",
    "\u02ee\u02ef\u0003\u0002\u0002\u0002\u02ef\u02f0\u0005\u0156\u00ac\u0002",
    "\u02f0\u02f1\u0005\u0222\u0112\u0002\u02f1\u02f2\u0005\u01e0\u00f1\u0002",
    "\u02f2\u02f5\u0005\u0132\u009a\u0002\u02f3\u02f6\u0005\u0200\u0101\u0002",
    "\u02f4\u02f6\u0005\u01ce\u00e8\u0002\u02f5\u02f3\u0003\u0002\u0002\u0002",
    "\u02f5\u02f4\u0003\u0002\u0002\u0002\u02f5\u02f6\u0003\u0002\u0002\u0002",
    "\u02f6\u001b\u0003\u0002\u0002\u0002\u02f7\u02f8\u0005\u0184\u00c3\u0002",
    "\u02f8\u02fa\u0005\u01ec\u00f7\u0002\u02f9\u02fb\u0005\u00fc\u007f\u0002",
    "\u02fa\u02f9\u0003\u0002\u0002\u0002\u02fa\u02fb\u0003\u0002\u0002\u0002",
    "\u02fb\u02fc\u0003\u0002\u0002\u0002\u02fc\u02fe\u0005\u0146\u00a4\u0002",
    "\u02fd\u02ff\u0005n8\u0002\u02fe\u02fd\u0003\u0002\u0002\u0002\u02fe",
    "\u02ff\u0003\u0002\u0002\u0002\u02ff\u001d\u0003\u0002\u0002\u0002\u0300",
    "\u0301\u0005\u0184\u00c3\u0002\u0301\u0303\u0005\u020e\u0108\u0002\u0302",
    "\u0304\u0005\u00fc\u007f\u0002\u0303\u0302\u0003\u0002\u0002\u0002\u0303",
    "\u0304\u0003\u0002\u0002\u0002\u0304\u0308\u0003\u0002\u0002\u0002\u0305",
    "\u0306\u0005\u0138\u009d\u0002\u0306\u0307\u0007\u0010\u0002\u0002\u0307",
    "\u0309\u0003\u0002\u0002\u0002\u0308\u0305\u0003\u0002\u0002\u0002\u0308",
    "\u0309\u0003\u0002\u0002\u0002\u0309\u030a\u0003\u0002\u0002\u0002\u030a",
    "\u030b\u0005\u014e\u00a8\u0002\u030b\u030c\u0005\u0228\u0115\u0002\u030c",
    "\u030d\u0005 \u0011\u0002\u030d\u030e\u0005\u022a\u0116\u0002\u030e",
    "\u001f\u0003\u0002\u0002\u0002\u030f\u0310\u0005\u013c\u009f\u0002\u0310",
    "\u0317\u0005\u013e\u00a0\u0002\u0311\u0312\u0005\u0238\u011d\u0002\u0312",
    "\u0313\u0005\u013c\u009f\u0002\u0313\u0314\u0005\u013e\u00a0\u0002\u0314",
    "\u0316\u0003\u0002\u0002\u0002\u0315\u0311\u0003\u0002\u0002\u0002\u0316",
    "\u0319\u0003\u0002\u0002\u0002\u0317\u0315\u0003\u0002\u0002\u0002\u0317",
    "\u0318\u0003\u0002\u0002\u0002\u0318!\u0003\u0002\u0002\u0002\u0319",
    "\u0317\u0003\u0002\u0002\u0002\u031a\u031b\u0005\u0184\u00c3\u0002\u031b",
    "\u031d\u0005\u0208\u0105\u0002\u031c\u031e\u0005\u00fc\u007f\u0002\u031d",
    "\u031c\u0003\u0002\u0002\u0002\u031d\u031e\u0003\u0002\u0002\u0002\u031e",
    "\u0322\u0003\u0002\u0002\u0002\u031f\u0320\u0005\u0138\u009d\u0002\u0320",
    "\u0321\u0007\u0010\u0002\u0002\u0321\u0323\u0003\u0002\u0002\u0002\u0322",
    "\u031f\u0003\u0002\u0002\u0002\u0322\u0323\u0003\u0002\u0002\u0002\u0323",
    "\u0324\u0003\u0002\u0002\u0002\u0324\u0325\u0005\u0148\u00a5\u0002\u0325",
    "\u0326\u0005\u021a\u010e\u0002\u0326\u0327\u0005\u014a\u00a6\u0002\u0327",
    "#\u0003\u0002\u0002\u0002\u0328\u0329\u0005\u0184\u00c3\u0002\u0329",
    "\u032a\u0005\u01ca\u00e6\u0002\u032a\u032c\u0005\u021e\u0110\u0002\u032b",
    "\u032d\u0005\u00fc\u007f\u0002\u032c\u032b\u0003\u0002\u0002\u0002\u032c",
    "\u032d\u0003\u0002\u0002\u0002\u032d\u0331\u0003\u0002\u0002\u0002\u032e",
    "\u032f\u0005\u0138\u009d\u0002\u032f\u0330\u0007\u0010\u0002\u0002\u0330",
    "\u0332\u0003\u0002\u0002\u0002\u0331\u032e\u0003\u0002\u0002\u0002\u0331",
    "\u0332\u0003\u0002\u0002\u0002\u0332\u0333\u0003\u0002\u0002\u0002\u0333",
    "\u0334\u0005\u014c\u00a7\u0002\u0334\u0335\u0005\u0170\u00b9\u0002\u0335",
    "\u0336\u0005\u01f6\u00fc\u0002\u0336\u0337\u0005\u0104\u0083\u0002\u0337",
    "\u033b\u0005\u019c\u00cf\u0002\u0338\u0339\u0005\u0138\u009d\u0002\u0339",
    "\u033a\u0007\u0010\u0002\u0002\u033a\u033c\u0003\u0002\u0002\u0002\u033b",
    "\u0338\u0003\u0002\u0002\u0002\u033b\u033c\u0003\u0002\u0002\u0002\u033c",
    "\u033d\u0003\u0002\u0002\u0002\u033d\u033e\u0005\u013a\u009e\u0002\u033e",
    "\u0340\u0005&\u0014\u0002\u033f\u0341\u0005\u00a6T\u0002\u0340\u033f",
    "\u0003\u0002\u0002\u0002\u0340\u0341\u0003\u0002\u0002\u0002\u0341\u0345",
    "\u0003\u0002\u0002\u0002\u0342\u0343\u0005\u0222\u0112\u0002\u0343\u0344",
    "\u0005,\u0017\u0002\u0344\u0346\u0003\u0002\u0002\u0002\u0345\u0342",
    "\u0003\u0002\u0002\u0002\u0345\u0346\u0003\u0002\u0002\u0002\u0346%",
    "\u0003\u0002\u0002\u0002\u0347\u0348\u0005\u0220\u0111\u0002\u0348\u034c",
    "\u0005(\u0015\u0002\u0349\u034a\u0005\u016c\u00b7\u0002\u034a\u034b",
    "\u0005\u0120\u0091\u0002\u034b\u034d\u0003\u0002\u0002\u0002\u034c\u0349",
    "\u0003\u0002\u0002\u0002\u034c\u034d\u0003\u0002\u0002\u0002\u034d\'",
    "\u0003\u0002\u0002\u0002\u034e\u0354\u0005*\u0016\u0002\u034f\u0350",
    "\u0005\u016c\u00b7\u0002\u0350\u0351\u0005*\u0016\u0002\u0351\u0353",
    "\u0003\u0002\u0002\u0002\u0352\u034f\u0003\u0002\u0002\u0002\u0353\u0356",
    "\u0003\u0002\u0002\u0002\u0354\u0352\u0003\u0002\u0002\u0002\u0354\u0355",
    "\u0003\u0002\u0002\u0002\u0355)\u0003\u0002\u0002\u0002\u0356\u0354",
    "\u0003\u0002\u0002\u0002\u0357\u0358\u0005\u013c\u009f\u0002\u0358\u0359",
    "\u0005\u01b4\u00db\u0002\u0359\u035a\u0005\u01d2\u00ea\u0002\u035a\u035b",
    "\u0005\u01d4\u00eb\u0002\u035b+\u0003\u0002\u0002\u0002\u035c\u035d",
    "\u0005\u0090I\u0002\u035d-\u0003\u0002\u0002\u0002\u035e\u035f\u0005",
    "\u0184\u00c3\u0002\u035f\u0361\u0005\u01bc\u00df\u0002\u0360\u0362\u0005",
    "\u00fc\u007f\u0002\u0361\u0360\u0003\u0002\u0002\u0002\u0361\u0362\u0003",
    "\u0002\u0002\u0002\u0362\u0363\u0003\u0002\u0002\u0002\u0363\u0364\u0005",
    "\u0138\u009d\u0002\u0364\u0365\u0005\u0222\u0112\u0002\u0365\u0366\u0005",
    "\u01e8\u00f5\u0002\u0366\u0367\u0007\u00b0\u0002\u0002\u0367\u0368\u0005",
    "\u022c\u0117\u0002\u0368\u0369\u0005\u00c0a\u0002\u0369\u036d\u0005",
    "\u022e\u0118\u0002\u036a\u036b\u0005\u016c\u00b7\u0002\u036b\u036c\u0005",
    "\u00c4c\u0002\u036c\u036e\u0003\u0002\u0002\u0002\u036d\u036a\u0003",
    "\u0002\u0002\u0002\u036d\u036e\u0003\u0002\u0002\u0002\u036e/\u0003",
    "\u0002\u0002\u0002\u036f\u0371\u0005\u0184\u00c3\u0002\u0370\u0372\u0005",
    "D#\u0002\u0371\u0370\u0003\u0002\u0002\u0002\u0371\u0372\u0003\u0002",
    "\u0002\u0002\u0372\u0373\u0003\u0002\u0002\u0002\u0373\u0375\u0005\u01a0",
    "\u00d1\u0002\u0374\u0376\u0005\u00fc\u007f\u0002\u0375\u0374\u0003\u0002",
    "\u0002\u0002\u0375\u0376\u0003\u0002\u0002\u0002\u0376\u037a\u0003\u0002",
    "\u0002\u0002\u0377\u0378\u0005\u0138\u009d\u0002\u0378\u0379\u0007\u0010",
    "\u0002\u0002\u0379\u037b\u0003\u0002\u0002\u0002\u037a\u0377\u0003\u0002",
    "\u0002\u0002\u037a\u037b\u0003\u0002\u0002\u0002\u037b\u037c\u0003\u0002",
    "\u0002\u0002\u037c\u037d\u0005\u0152\u00aa\u0002\u037d\u037f\u0005\u0228",
    "\u0115\u0002\u037e\u0380\u00054\u001b\u0002\u037f\u037e\u0003\u0002",
    "\u0002\u0002\u037f\u0380\u0003\u0002\u0002\u0002\u0380\u0381\u0003\u0002",
    "\u0002\u0002\u0381\u0382\u0005\u022a\u0116\u0002\u0382\u0383\u00056",
    "\u001c\u0002\u0383\u0384\u0005\u01ea\u00f6\u0002\u0384\u0385\u0005\u013e",
    "\u00a0\u0002\u0385\u0386\u0005\u01c0\u00e1\u0002\u0386\u0387\u0005\u0154",
    "\u00ab\u0002\u0387\u0388\u0005\u0170\u00b9\u0002\u0388\u0389\u00052",
    "\u001a\u0002\u03891\u0003\u0002\u0002\u0002\u038a\u038b\t\u0002\u0002",
    "\u0002\u038b3\u0003\u0002\u0002\u0002\u038c\u0392\u0005\u015c\u00af",
    "\u0002\u038d\u038e\u0005\u0238\u011d\u0002\u038e\u038f\u0005\u015c\u00af",
    "\u0002\u038f\u0391\u0003\u0002\u0002\u0002\u0390\u038d\u0003\u0002\u0002",
    "\u0002\u0391\u0394\u0003\u0002\u0002\u0002\u0392\u0390\u0003\u0002\u0002",
    "\u0002\u0392\u0393\u0003\u0002\u0002\u0002\u03935\u0003\u0002\u0002",
    "\u0002\u0394\u0392\u0003\u0002\u0002\u0002\u0395\u039a\u0005\u017c\u00bf",
    "\u0002\u0396\u0397\u0005\u01ea\u00f6\u0002\u0397\u0398\u0005\u01d4\u00eb",
    "\u0002\u0398\u039a\u0003\u0002\u0002\u0002\u0399\u0395\u0003\u0002\u0002",
    "\u0002\u0399\u0396\u0003\u0002\u0002\u0002\u039a\u039b\u0003\u0002\u0002",
    "\u0002\u039b\u039c\u0005\u01d8\u00ed\u0002\u039c\u039d\u0005\u01d4\u00eb",
    "\u0002\u039d\u039e\u0005\u01ae\u00d8\u0002\u039e7\u0003\u0002\u0002",
    "\u0002\u039f\u03a1\u0005\u0184\u00c3\u0002\u03a0\u03a2\u0005D#\u0002",
    "\u03a1\u03a0\u0003\u0002\u0002\u0002\u03a1\u03a2\u0003\u0002\u0002\u0002",
    "\u03a2\u03a3\u0003\u0002\u0002\u0002\u03a3\u03a5\u0005\u0162\u00b2\u0002",
    "\u03a4\u03a6\u0005\u00fc\u007f\u0002\u03a5\u03a4\u0003\u0002\u0002\u0002",
    "\u03a5\u03a6\u0003\u0002\u0002\u0002\u03a6\u03aa\u0003\u0002\u0002\u0002",
    "\u03a7\u03a8\u0005\u0138\u009d\u0002\u03a8\u03a9\u0007\u0010\u0002\u0002",
    "\u03a9\u03ab\u0003\u0002\u0002\u0002\u03aa\u03a7\u0003\u0002\u0002\u0002",
    "\u03aa\u03ab\u0003\u0002\u0002\u0002\u03ab\u03ac\u0003\u0002\u0002\u0002",
    "\u03ac\u03ad\u0005\u0150\u00a9\u0002\u03ad\u03ae\u0005\u0228\u0115\u0002",
    "\u03ae\u03af\u0005\u013e\u00a0\u0002\u03af\u03b0\u0005\u022a\u0116\u0002",
    "\u03b0\u03b1\u0005\u01fa\u00fe\u0002\u03b1\u03b2\u0005\u0152\u00aa\u0002",
    "\u03b2\u03b3\u0005\u01fe\u0100\u0002\u03b3\u03b4\u0005\u013e\u00a0\u0002",
    "\u03b4\u03b5\u0005\u019a\u00ce\u0002\u03b5\u03b6\u0005\u0152\u00aa\u0002",
    "\u03b6\u03b7\u0005\u01ac\u00d7\u0002\u03b7\u03b8\u0005:\u001e\u0002",
    "\u03b89\u0003\u0002\u0002\u0002\u03b9\u03be\u0005\u012c\u0097\u0002",
    "\u03ba\u03be\u0005B\"\u0002\u03bb\u03be\u0005@!\u0002\u03bc\u03be\u0005",
    "<\u001f\u0002\u03bd\u03b9\u0003\u0002\u0002\u0002\u03bd\u03ba\u0003",
    "\u0002\u0002\u0002\u03bd\u03bb\u0003\u0002\u0002\u0002\u03bd\u03bc\u0003",
    "\u0002\u0002\u0002\u03be;\u0003\u0002\u0002\u0002\u03bf\u03c0\u0005",
    "\u022c\u0117\u0002\u03c0\u03c6\u0005> \u0002\u03c1\u03c2\u0005\u0238",
    "\u011d\u0002\u03c2\u03c3\u0005> \u0002\u03c3\u03c5\u0003\u0002\u0002",
    "\u0002\u03c4\u03c1\u0003\u0002\u0002\u0002\u03c5\u03c8\u0003\u0002\u0002",
    "\u0002\u03c6\u03c4\u0003\u0002\u0002\u0002\u03c6\u03c7\u0003\u0002\u0002",
    "\u0002\u03c7\u03c9\u0003\u0002\u0002\u0002\u03c8\u03c6\u0003\u0002\u0002",
    "\u0002\u03c9\u03ca\u0005\u022e\u0118\u0002\u03ca=\u0003\u0002\u0002",
    "\u0002\u03cb\u03cc\u0005\u015a\u00ae\u0002\u03cc\u03cd\u0007\u000b\u0002",
    "\u0002\u03cd\u03ce\u0005:\u001e\u0002\u03ce?\u0003\u0002\u0002\u0002",
    "\u03cf\u03d0\u0005\u0228\u0115\u0002\u03d0\u03d7\u0005B\"\u0002\u03d1",
    "\u03d2\u0005\u0238\u011d\u0002\u03d2\u03d3\u0005\u012c\u0097\u0002\u03d3",
    "\u03d6\u0003\u0002\u0002\u0002\u03d4\u03d6\u0005B\"\u0002\u03d5\u03d1",
    "\u0003\u0002\u0002\u0002\u03d5\u03d4\u0003\u0002\u0002\u0002\u03d6\u03d9",
    "\u0003\u0002\u0002\u0002\u03d7\u03d5\u0003\u0002\u0002\u0002\u03d7\u03d8",
    "\u0003\u0002\u0002\u0002\u03d8\u03da\u0003\u0002\u0002\u0002\u03d9\u03d7",
    "\u0003\u0002\u0002\u0002\u03da\u03db\u0005\u022a\u0116\u0002\u03dbA",
    "\u0003\u0002\u0002\u0002\u03dc\u03dd\u0005\u0228\u0115\u0002\u03dd\u03e3",
    "\u0005\u012c\u0097\u0002\u03de\u03df\u0005\u0238\u011d\u0002\u03df\u03e0",
    "\u0005\u012c\u0097\u0002\u03e0\u03e2\u0003\u0002\u0002\u0002\u03e1\u03de",
    "\u0003\u0002\u0002\u0002\u03e2\u03e5\u0003\u0002\u0002\u0002\u03e3\u03e1",
    "\u0003\u0002\u0002\u0002\u03e3\u03e4\u0003\u0002\u0002\u0002\u03e4\u03e6",
    "\u0003\u0002\u0002\u0002\u03e5\u03e3\u0003\u0002\u0002\u0002\u03e6\u03e7",
    "\u0005\u022a\u0116\u0002\u03e7C\u0003\u0002\u0002\u0002\u03e8\u03e9",
    "\u0005\u01dc\u00ef\u0002\u03e9\u03ea\u0005\u01e6\u00f4\u0002\u03eaE",
    "\u0003\u0002\u0002\u0002\u03eb\u03ec\u0005\u016a\u00b6\u0002\u03ec\u03ed",
    "\u0005\u0216\u010c\u0002\u03ed\u03ee\u0005\u0156\u00ac\u0002\u03ee\u03ef",
    "\u0005\u0222\u0112\u0002\u03ef\u03f1\u0005H%\u0002\u03f0\u03f2\u0005",
    "J&\u0002\u03f1\u03f0\u0003\u0002\u0002\u0002\u03f1\u03f2\u0003\u0002",
    "\u0002\u0002\u03f2G\u0003\u0002\u0002\u0002\u03f3\u03f4\u0005\u01e0",
    "\u00f1\u0002\u03f4\u03f5\u0005\u0132\u009a\u0002\u03f5I\u0003\u0002",
    "\u0002\u0002\u03f6\u03f9\u0005\u0200\u0101\u0002\u03f7\u03f9\u0005\u01ce",
    "\u00e8\u0002\u03f8\u03f6\u0003\u0002\u0002\u0002\u03f8\u03f7\u0003\u0002",
    "\u0002\u0002\u03f9K\u0003\u0002\u0002\u0002\u03fa\u03fb\u0005\u016a",
    "\u00b6\u0002\u03fb\u03ff\u0005\u020e\u0108\u0002\u03fc\u03fd\u0005\u0138",
    "\u009d\u0002\u03fd\u03fe\u0007\u0010\u0002\u0002\u03fe\u0400\u0003\u0002",
    "\u0002\u0002\u03ff\u03fc\u0003\u0002\u0002\u0002\u03ff\u0400\u0003\u0002",
    "\u0002\u0002\u0400\u0401\u0003\u0002\u0002\u0002\u0401\u0402\u0005\u014e",
    "\u00a8\u0002\u0402\u0403\u0005N(\u0002\u0403M\u0003\u0002\u0002\u0002",
    "\u0404\u0408\u0005X-\u0002\u0405\u0408\u0005V,\u0002\u0406\u0408\u0005",
    "P)\u0002\u0407\u0404\u0003\u0002\u0002\u0002\u0407\u0405\u0003\u0002",
    "\u0002\u0002\u0407\u0406\u0003\u0002\u0002\u0002\u0408O\u0003\u0002",
    "\u0002\u0002\u0409\u040a\u0005\u01e4\u00f3\u0002\u040a\u040b\u0005R",
    "*\u0002\u040bQ\u0003\u0002\u0002\u0002\u040c\u0412\u0005T+\u0002\u040d",
    "\u040e\u0005\u016c\u00b7\u0002\u040e\u040f\u0005T+\u0002\u040f\u0411",
    "\u0003\u0002\u0002\u0002\u0410\u040d\u0003\u0002\u0002\u0002\u0411\u0414",
    "\u0003\u0002\u0002\u0002\u0412\u0410\u0003\u0002\u0002\u0002\u0412\u0413",
    "\u0003\u0002\u0002\u0002\u0413S\u0003\u0002\u0002\u0002\u0414\u0412",
    "\u0003\u0002\u0002\u0002\u0415\u0416\u0005\u013c\u009f\u0002\u0416\u0417",
    "\u0005\u0206\u0104\u0002\u0417\u0418\u0005\u013c\u009f\u0002\u0418U",
    "\u0003\u0002\u0002\u0002\u0419\u041a\u0005\u0160\u00b1\u0002\u041a\u041b",
    "\u0005 \u0011\u0002\u041bW\u0003\u0002\u0002\u0002\u041c\u041d\u0005",
    "\u016a\u00b6\u0002\u041d\u041e\u0005\u013c\u009f\u0002\u041e\u041f\u0005",
    "\u020e\u0108\u0002\u041f\u0420\u0005\u013e\u00a0\u0002\u0420Y\u0003",
    "\u0002\u0002\u0002\u0421\u0422\u0005\u016a\u00b6\u0002\u0422\u0426\u0005",
    "\u0202\u0102\u0002\u0423\u0424\u0005\u0138\u009d\u0002\u0424\u0425\u0007",
    "\u0010\u0002\u0002\u0425\u0427\u0003\u0002\u0002\u0002\u0426\u0423\u0003",
    "\u0002\u0002\u0002\u0426\u0427\u0003\u0002\u0002\u0002\u0427\u0428\u0003",
    "\u0002\u0002\u0002\u0428\u0429\u0005\u013a\u009e\u0002\u0429\u042a\u0005",
    "\\/\u0002\u042a[\u0003\u0002\u0002\u0002\u042b\u0432\u0005h5\u0002\u042c",
    "\u0432\u0005d3\u0002\u042d\u0432\u0005d3\u0002\u042e\u0432\u0005b2\u0002",
    "\u042f\u0432\u0005`1\u0002\u0430\u0432\u0005^0\u0002\u0431\u042b\u0003",
    "\u0002\u0002\u0002\u0431\u042c\u0003\u0002\u0002\u0002\u0431\u042d\u0003",
    "\u0002\u0002\u0002\u0431\u042e\u0003\u0002\u0002\u0002\u0431\u042f\u0003",
    "\u0002\u0002\u0002\u0431\u0430\u0003\u0002\u0002\u0002\u0432]\u0003",
    "\u0002\u0002\u0002\u0433\u0434\u0005\u0222\u0112\u0002\u0434\u0435\u0005",
    "\u0090I\u0002\u0435_\u0003\u0002\u0002\u0002\u0436\u0437\u0005\u01e4",
    "\u00f3\u0002\u0437\u0438\u0005\u013c\u009f\u0002\u0438\u0439\u0005\u0206",
    "\u0104\u0002\u0439\u043a\u0005\u013c\u009f\u0002\u043aa\u0003\u0002",
    "\u0002\u0002\u043b\u043c\u0005\u018e\u00c8\u0002\u043c\u043d\u0005\u0180",
    "\u00c1\u0002\u043d\u043e\u0005\u01fc\u00ff\u0002\u043ec\u0003\u0002",
    "\u0002\u0002\u043f\u0440\u0005\u018e\u00c8\u0002\u0440\u0441\u0005f",
    "4\u0002\u0441e\u0003\u0002\u0002\u0002\u0442\u0448\u0005\u013c\u009f",
    "\u0002\u0443\u0444\u0005\u0238\u011d\u0002\u0444\u0445\u0005\u013c\u009f",
    "\u0002\u0445\u0447\u0003\u0002\u0002\u0002\u0446\u0443\u0003\u0002\u0002",
    "\u0002\u0447\u044a\u0003\u0002\u0002\u0002\u0448\u0446\u0003\u0002\u0002",
    "\u0002\u0448\u0449\u0003\u0002\u0002\u0002\u0449g\u0003\u0002\u0002",
    "\u0002\u044a\u0448\u0003\u0002\u0002\u0002\u044b\u044c\u0005\u0160\u00b1",
    "\u0002\u044c\u044d\u0005j6\u0002\u044di\u0003\u0002\u0002\u0002\u044e",
    "\u044f\u0005\u013c\u009f\u0002\u044f\u0456\u0005\u013e\u00a0\u0002\u0450",
    "\u0451\u0005\u0238\u011d\u0002\u0451\u0452\u0005\u013c\u009f\u0002\u0452",
    "\u0453\u0005\u013e\u00a0\u0002\u0453\u0455\u0003\u0002\u0002\u0002\u0454",
    "\u0450\u0003\u0002\u0002\u0002\u0455\u0458\u0003\u0002\u0002\u0002\u0456",
    "\u0454\u0003\u0002\u0002\u0002\u0456\u0457\u0003\u0002\u0002\u0002\u0457",
    "k\u0003\u0002\u0002\u0002\u0458\u0456\u0003\u0002\u0002\u0002\u0459",
    "\u045a\u0005\u016a\u00b6\u0002\u045a\u045b\u0005\u01ec\u00f7\u0002\u045b",
    "\u045d\u0005\u0146\u00a4\u0002\u045c\u045e\u0005n8\u0002\u045d\u045c",
    "\u0003\u0002\u0002\u0002\u045d\u045e\u0003\u0002\u0002\u0002\u045em",
    "\u0003\u0002\u0002\u0002\u045f\u0460\u0005\u0222\u0112\u0002\u0460\u0466",
    "\u0005p9\u0002\u0461\u0462\u0005\u016c\u00b7\u0002\u0462\u0463\u0005",
    "p9\u0002\u0463\u0465\u0003\u0002\u0002\u0002\u0464\u0461\u0003\u0002",
    "\u0002\u0002\u0465\u0468\u0003\u0002\u0002\u0002\u0466\u0464\u0003\u0002",
    "\u0002\u0002\u0466\u0467\u0003\u0002\u0002\u0002\u0467o\u0003\u0002",
    "\u0002\u0002\u0468\u0466\u0003\u0002\u0002\u0002\u0469\u046a\u0005\u01e0",
    "\u00f1\u0002\u046a\u046b\u0007\u00b0\u0002\u0002\u046b\u046c\u0005\u0132",
    "\u009a\u0002\u046c\u047a\u0003\u0002\u0002\u0002\u046d\u046e\u0005\u01c8",
    "\u00e5\u0002\u046e\u046f\u0007\u00b0\u0002\u0002\u046f\u0470\u0005\u0134",
    "\u009b\u0002\u0470\u047a\u0003\u0002\u0002\u0002\u0471\u0472\u0005\u0200",
    "\u0101\u0002\u0472\u0473\u0007\u00b0\u0002\u0002\u0473\u0474\u0005\u0134",
    "\u009b\u0002\u0474\u047a\u0003\u0002\u0002\u0002\u0475\u0476\u0005\u01da",
    "\u00ee\u0002\u0476\u0477\u0007\u00b0\u0002\u0002\u0477\u0478\u0005\u0098",
    "M\u0002\u0478\u047a\u0003\u0002\u0002\u0002\u0479\u0469\u0003\u0002",
    "\u0002\u0002\u0479\u046d\u0003\u0002\u0002\u0002\u0479\u0471\u0003\u0002",
    "\u0002\u0002\u0479\u0475\u0003\u0002\u0002\u0002\u047aq\u0003\u0002",
    "\u0002\u0002\u047b\u047c\u0005\u016a\u00b6\u0002\u047c\u047d\u0005\u01ca",
    "\u00e6\u0002\u047d\u0481\u0005\u021e\u0110\u0002\u047e\u047f\u0005\u0138",
    "\u009d\u0002\u047f\u0480\u0007\u0010\u0002\u0002\u0480\u0482\u0003\u0002",
    "\u0002\u0002\u0481\u047e\u0003\u0002\u0002\u0002\u0481\u0482\u0003\u0002",
    "\u0002\u0002\u0482\u0483\u0003\u0002\u0002\u0002\u0483\u0487\u0005\u014c",
    "\u00a7\u0002\u0484\u0485\u0005\u0222\u0112\u0002\u0485\u0486\u0005\u0090",
    "I\u0002\u0486\u0488\u0003\u0002\u0002\u0002\u0487\u0484\u0003\u0002",
    "\u0002\u0002\u0487\u0488\u0003\u0002\u0002\u0002\u0488s\u0003\u0002",
    "\u0002\u0002\u0489\u048a\u0005\u018e\u00c8\u0002\u048a\u048c\u0005\u0216",
    "\u010c\u0002\u048b\u048d\u0005\u00fe\u0080\u0002\u048c\u048b\u0003\u0002",
    "\u0002\u0002\u048c\u048d\u0003\u0002\u0002\u0002\u048d\u048e\u0003\u0002",
    "\u0002\u0002\u048e\u048f\u0005\u0156\u00ac\u0002\u048fu\u0003\u0002",
    "\u0002\u0002\u0490\u0491\u0005\u018e\u00c8\u0002\u0491\u0493\u0005\u020e",
    "\u0108\u0002\u0492\u0494\u0005\u00fe\u0080\u0002\u0493\u0492\u0003\u0002",
    "\u0002\u0002\u0493\u0494\u0003\u0002\u0002\u0002\u0494\u0498\u0003\u0002",
    "\u0002\u0002\u0495\u0496\u0005\u0138\u009d\u0002\u0496\u0497\u0007\u0010",
    "\u0002\u0002\u0497\u0499\u0003\u0002\u0002\u0002\u0498\u0495\u0003\u0002",
    "\u0002\u0002\u0498\u0499\u0003\u0002\u0002\u0002\u0499\u049a\u0003\u0002",
    "\u0002\u0002\u049a\u049b\u0005\u014e\u00a8\u0002\u049bw\u0003\u0002",
    "\u0002\u0002\u049c\u049d\u0005\u018e\u00c8\u0002\u049d\u049e\u0005\u01ca",
    "\u00e6\u0002\u049e\u04a0\u0005\u021e\u0110\u0002\u049f\u04a1\u0005\u00fe",
    "\u0080\u0002\u04a0\u049f\u0003\u0002\u0002\u0002\u04a0\u04a1\u0003\u0002",
    "\u0002\u0002\u04a1\u04a5\u0003\u0002\u0002\u0002\u04a2\u04a3\u0005\u0138",
    "\u009d\u0002\u04a3\u04a4\u0007\u0010\u0002\u0002\u04a4\u04a6\u0003\u0002",
    "\u0002\u0002\u04a5\u04a2\u0003\u0002\u0002\u0002\u04a5\u04a6\u0003\u0002",
    "\u0002\u0002\u04a6\u04a7\u0003\u0002\u0002\u0002\u04a7\u04a8\u0005\u014c",
    "\u00a7\u0002\u04a8y\u0003\u0002\u0002\u0002\u04a9\u04aa\u0005\u018e",
    "\u00c8\u0002\u04aa\u04ac\u0005\u0162\u00b2\u0002\u04ab\u04ad\u0005\u00fe",
    "\u0080\u0002\u04ac\u04ab\u0003\u0002\u0002\u0002\u04ac\u04ad\u0003\u0002",
    "\u0002\u0002\u04ad\u04b1\u0003\u0002\u0002\u0002\u04ae\u04af\u0005\u0138",
    "\u009d\u0002\u04af\u04b0\u0007\u0010\u0002\u0002\u04b0\u04b2\u0003\u0002",
    "\u0002\u0002\u04b1\u04ae\u0003\u0002\u0002\u0002\u04b1\u04b2\u0003\u0002",
    "\u0002\u0002\u04b2\u04b3\u0003\u0002\u0002\u0002\u04b3\u04b4\u0005\u0150",
    "\u00a9\u0002\u04b4{\u0003\u0002\u0002\u0002\u04b5\u04b6\u0005\u018e",
    "\u00c8\u0002\u04b6\u04b8\u0005\u01a0\u00d1\u0002\u04b7\u04b9\u0005\u00fe",
    "\u0080\u0002\u04b8\u04b7\u0003\u0002\u0002\u0002\u04b8\u04b9\u0003\u0002",
    "\u0002\u0002\u04b9\u04bd\u0003\u0002\u0002\u0002\u04ba\u04bb\u0005\u0138",
    "\u009d\u0002\u04bb\u04bc\u0007\u0010\u0002\u0002\u04bc\u04be\u0003\u0002",
    "\u0002\u0002\u04bd\u04ba\u0003\u0002\u0002\u0002\u04bd\u04be\u0003\u0002",
    "\u0002\u0002\u04be\u04bf\u0003\u0002\u0002\u0002\u04bf\u04c0\u0005\u0152",
    "\u00aa\u0002\u04c0}\u0003\u0002\u0002\u0002\u04c1\u04c2\u0005\u018e",
    "\u00c8\u0002\u04c2\u04c4\u0005\u0208\u0105\u0002\u04c3\u04c5\u0005\u00fe",
    "\u0080\u0002\u04c4\u04c3\u0003\u0002\u0002\u0002\u04c4\u04c5\u0003\u0002",
    "\u0002\u0002\u04c5\u04c6\u0003\u0002\u0002\u0002\u04c6\u04c7\u0005\u0148",
    "\u00a5\u0002\u04c7\u04cb\u0005\u01d8\u00ed\u0002\u04c8\u04c9\u0005\u0138",
    "\u009d\u0002\u04c9\u04ca\u0007\u0010\u0002\u0002\u04ca\u04cc\u0003\u0002",
    "\u0002\u0002\u04cb\u04c8\u0003\u0002\u0002\u0002\u04cb\u04cc\u0003\u0002",
    "\u0002\u0002\u04cc\u04cd\u0003\u0002\u0002\u0002\u04cd\u04ce\u0005\u013a",
    "\u009e\u0002\u04ce\u007f\u0003\u0002\u0002\u0002\u04cf\u04d0\u0005\u018e",
    "\u00c8\u0002\u04d0\u04d2\u0005\u01ec\u00f7\u0002\u04d1\u04d3\u0005\u00fe",
    "\u0080\u0002\u04d2\u04d1\u0003\u0002\u0002\u0002\u04d2\u04d3\u0003\u0002",
    "\u0002\u0002\u04d3\u04d4\u0003\u0002\u0002\u0002\u04d4\u04d5\u0005\u0146",
    "\u00a4\u0002\u04d5\u0081\u0003\u0002\u0002\u0002\u04d6\u04d7\u0005\u018e",
    "\u00c8\u0002\u04d7\u04d9\u0005\u0202\u0102\u0002\u04d8\u04da\u0005\u00fe",
    "\u0080\u0002\u04d9\u04d8\u0003\u0002\u0002\u0002\u04d9\u04da\u0003\u0002",
    "\u0002\u0002\u04da\u04de\u0003\u0002\u0002\u0002\u04db\u04dc\u0005\u0138",
    "\u009d\u0002\u04dc\u04dd\u0007\u0010\u0002\u0002\u04dd\u04df\u0003\u0002",
    "\u0002\u0002\u04de\u04db\u0003\u0002\u0002\u0002\u04de\u04df\u0003\u0002",
    "\u0002\u0002\u04df\u04e0\u0003\u0002\u0002\u0002\u04e0\u04e1\u0005\u013a",
    "\u009e\u0002\u04e1\u0083\u0003\u0002\u0002\u0002\u04e2\u04e3\u0005\u018e",
    "\u00c8\u0002\u04e3\u04e5\u0005\u01bc\u00df\u0002\u04e4\u04e6\u0005\u00fe",
    "\u0080\u0002\u04e5\u04e4\u0003\u0002\u0002\u0002\u04e5\u04e6\u0003\u0002",
    "\u0002\u0002\u04e6\u04e7\u0003\u0002\u0002\u0002\u04e7\u04e8\u0005\u0138",
    "\u009d\u0002\u04e8\u0085\u0003\u0002\u0002\u0002\u04e9\u04ea\u0005\u018e",
    "\u00c8\u0002\u04ea\u04ec\u0005\u01aa\u00d6\u0002\u04eb\u04ed\u0005\u00fe",
    "\u0080\u0002\u04ec\u04eb\u0003\u0002\u0002\u0002\u04ec\u04ed\u0003\u0002",
    "\u0002\u0002\u04ed\u04f1\u0003\u0002\u0002\u0002\u04ee\u04ef\u0005\u0138",
    "\u009d\u0002\u04ef\u04f0\u0007\u0010\u0002\u0002\u04f0\u04f2\u0003\u0002",
    "\u0002\u0002\u04f1\u04ee\u0003\u0002\u0002\u0002\u04f1\u04f2\u0003\u0002",
    "\u0002\u0002\u04f2\u04f3\u0003\u0002\u0002\u0002\u04f3\u04f4\u0005\u00cc",
    "g\u0002\u04f4\u0087\u0003\u0002\u0002\u0002\u04f5\u04f6\u0005\u0184",
    "\u00c3\u0002\u04f6\u04f8\u0005\u0202\u0102\u0002\u04f7\u04f9\u0005\u00fc",
    "\u007f\u0002\u04f8\u04f7\u0003\u0002\u0002\u0002\u04f8\u04f9\u0003\u0002",
    "\u0002\u0002\u04f9\u04fd\u0003\u0002\u0002\u0002\u04fa\u04fb\u0005\u0138",
    "\u009d\u0002\u04fb\u04fc\u0007\u0010\u0002\u0002\u04fc\u04fe\u0003\u0002",
    "\u0002\u0002\u04fd\u04fa\u0003\u0002\u0002\u0002\u04fd\u04fe\u0003\u0002",
    "\u0002\u0002\u04fe\u04ff\u0003\u0002\u0002\u0002\u04ff\u0500\u0005\u013a",
    "\u009e\u0002\u0500\u0501\u0005\u0228\u0115\u0002\u0501\u0502\u0005\u00a0",
    "Q\u0002\u0502\u0504\u0005\u022a\u0116\u0002\u0503\u0505\u0005\u008a",
    "F\u0002\u0504\u0503\u0003\u0002\u0002\u0002\u0504\u0505\u0003\u0002",
    "\u0002\u0002\u0505\u0089\u0003\u0002\u0002\u0002\u0506\u0508\u0005\u0222",
    "\u0112\u0002\u0507\u0509\u0005\u0090I\u0002\u0508\u0507\u0003\u0002",
    "\u0002\u0002\u0508\u0509\u0003\u0002\u0002\u0002\u0509\u008b\u0003\u0002",
    "\u0002\u0002\u050a\u050c\u0005\u013c\u009f\u0002\u050b\u050d\u0005\u0144",
    "\u00a3\u0002\u050c\u050b\u0003\u0002\u0002\u0002\u050c\u050d\u0003\u0002",
    "\u0002\u0002\u050d\u0515\u0003\u0002\u0002\u0002\u050e\u050f\u0005\u0238",
    "\u011d\u0002\u050f\u0511\u0005\u013c\u009f\u0002\u0510\u0512\u0005\u0144",
    "\u00a3\u0002\u0511\u0510\u0003\u0002\u0002\u0002\u0511\u0512\u0003\u0002",
    "\u0002\u0002\u0512\u0514\u0003\u0002\u0002\u0002\u0513\u050e\u0003\u0002",
    "\u0002\u0002\u0514\u0517\u0003\u0002\u0002\u0002\u0515\u0513\u0003\u0002",
    "\u0002\u0002\u0515\u0516\u0003\u0002\u0002\u0002\u0516\u008d\u0003\u0002",
    "\u0002\u0002\u0517\u0515\u0003\u0002\u0002\u0002\u0518\u0519\u0005\u017e",
    "\u00c0\u0002\u0519\u051a\u0005\u01de\u00f0\u0002\u051a\u051b\u0005\u017a",
    "\u00be\u0002\u051b\u051c\u0005\u0228\u0115\u0002\u051c\u051d\u0005\u008c",
    "G\u0002\u051d\u051e\u0005\u022a\u0116\u0002\u051e\u008f\u0003\u0002",
    "\u0002\u0002\u051f\u0525\u0005\u0092J\u0002\u0520\u0521\u0005\u016c",
    "\u00b7\u0002\u0521\u0522\u0005\u0092J\u0002\u0522\u0524\u0003\u0002",
    "\u0002\u0002\u0523\u0520\u0003\u0002\u0002\u0002\u0524\u0527\u0003\u0002",
    "\u0002\u0002\u0525\u0523\u0003\u0002\u0002\u0002\u0525\u0526\u0003\u0002",
    "\u0002\u0002\u0526\u0091\u0003\u0002\u0002\u0002\u0527\u0525\u0003\u0002",
    "\u0002\u0002\u0528\u0529\u0005\u0094K\u0002\u0529\u052a\u0007\u00b0",
    "\u0002\u0002\u052a\u052b\u0005\u0096L\u0002\u052b\u0532\u0003\u0002",
    "\u0002\u0002\u052c\u052d\u0005\u0094K\u0002\u052d\u052e\u0007\u00b0",
    "\u0002\u0002\u052e\u052f\u0005\u0098M\u0002\u052f\u0532\u0003\u0002",
    "\u0002\u0002\u0530\u0532\u0005\u008eH\u0002\u0531\u0528\u0003\u0002",
    "\u0002\u0002\u0531\u052c\u0003\u0002\u0002\u0002\u0531\u0530\u0003\u0002",
    "\u0002\u0002\u0532\u0093\u0003\u0002\u0002\u0002\u0533\u0534\u0005\u023c",
    "\u011f\u0002\u0534\u0095\u0003\u0002\u0002\u0002\u0535\u0539\u0005\u0132",
    "\u009a\u0002\u0536\u0539\u0005\u0130\u0099\u0002\u0537\u0539\u0005\u023c",
    "\u011f\u0002\u0538\u0535\u0003\u0002\u0002\u0002\u0538\u0536\u0003\u0002",
    "\u0002\u0002\u0538\u0537\u0003\u0002\u0002\u0002\u0539\u0097\u0003\u0002",
    "\u0002\u0002\u053a\u053b\u0005\u022c\u0117\u0002\u053b\u0541\u0005\u009a",
    "N\u0002\u053c\u053d\u0005\u0238\u011d\u0002\u053d\u053e\u0005\u009a",
    "N\u0002\u053e\u0540\u0003\u0002\u0002\u0002\u053f\u053c\u0003\u0002",
    "\u0002\u0002\u0540\u0543\u0003\u0002\u0002\u0002\u0541\u053f\u0003\u0002",
    "\u0002\u0002\u0541\u0542\u0003\u0002\u0002\u0002\u0542\u0544\u0003\u0002",
    "\u0002\u0002\u0543\u0541\u0003\u0002\u0002\u0002\u0544\u0545\u0005\u022e",
    "\u0118\u0002\u0545\u0099\u0003\u0002\u0002\u0002\u0546\u0547\u0005\u009c",
    "O\u0002\u0547\u0548\u0007\u000b\u0002\u0002\u0548\u0549\u0005\u009e",
    "P\u0002\u0549\u009b\u0003\u0002\u0002\u0002\u054a\u054b\u0005\u0132",
    "\u009a\u0002\u054b\u009d\u0003\u0002\u0002\u0002\u054c\u054f\u0005\u0132",
    "\u009a\u0002\u054d\u054f\u0005\u0130\u0099\u0002\u054e\u054c\u0003\u0002",
    "\u0002\u0002\u054e\u054d\u0003\u0002\u0002\u0002\u054f\u009f\u0003\u0002",
    "\u0002\u0002\u0550\u0556\u0005\u00a2R\u0002\u0551\u0552\u0005\u0238",
    "\u011d\u0002\u0552\u0553\u0005\u00a2R\u0002\u0553\u0555\u0003\u0002",
    "\u0002\u0002\u0554\u0551\u0003\u0002\u0002\u0002\u0555\u0558\u0003\u0002",
    "\u0002\u0002\u0556\u0554\u0003\u0002\u0002\u0002\u0556\u0557\u0003\u0002",
    "\u0002\u0002\u0557\u055c\u0003\u0002\u0002\u0002\u0558\u0556\u0003\u0002",
    "\u0002\u0002\u0559\u055a\u0005\u0238\u011d\u0002\u055a\u055b\u0005\u00a6",
    "T\u0002\u055b\u055d\u0003\u0002\u0002\u0002\u055c\u0559\u0003\u0002",
    "\u0002\u0002\u055c\u055d\u0003\u0002\u0002\u0002\u055d\u00a1\u0003\u0002",
    "\u0002\u0002\u055e\u055f\u0005\u013c\u009f\u0002\u055f\u0561\u0005\u013e",
    "\u00a0\u0002\u0560\u0562\u0005\u00a4S\u0002\u0561\u0560\u0003\u0002",
    "\u0002\u0002\u0561\u0562\u0003\u0002\u0002\u0002\u0562\u00a3\u0003\u0002",
    "\u0002\u0002\u0563\u0564\u0005\u01e2\u00f2\u0002\u0564\u0565\u0005\u01b8",
    "\u00dd\u0002\u0565\u00a5\u0003\u0002\u0002\u0002\u0566\u0567\u0005\u01e2",
    "\u00f2\u0002\u0567\u0568\u0005\u01b8\u00dd\u0002\u0568\u0569\u0005\u0228",
    "\u0115\u0002\u0569\u056a\u0005\u00a8U\u0002\u056a\u056b\u0005\u022a",
    "\u0116\u0002\u056b\u00a7\u0003\u0002\u0002\u0002\u056c\u0570\u0005\u00aa",
    "V\u0002\u056d\u0570\u0005\u00acW\u0002\u056e\u0570\u0005\u00aeX\u0002",
    "\u056f\u056c\u0003\u0002\u0002\u0002\u056f\u056d\u0003\u0002\u0002\u0002",
    "\u056f\u056e\u0003\u0002\u0002\u0002\u0570\u00a9\u0003\u0002\u0002\u0002",
    "\u0571\u0572\u0005\u013c\u009f\u0002\u0572\u00ab\u0003\u0002\u0002\u0002",
    "\u0573\u0577\u0005\u00b4[\u0002\u0574\u0575\u0005\u0238\u011d\u0002",
    "\u0575\u0576\u0005\u00b2Z\u0002\u0576\u0578\u0003\u0002\u0002\u0002",
    "\u0577\u0574\u0003\u0002\u0002\u0002\u0577\u0578\u0003\u0002\u0002\u0002",
    "\u0578\u00ad\u0003\u0002\u0002\u0002\u0579\u057a\u0005\u0228\u0115\u0002",
    "\u057a\u057b\u0005\u00b0Y\u0002\u057b\u057f\u0005\u022a\u0116\u0002",
    "\u057c\u057d\u0005\u0238\u011d\u0002\u057d\u057e\u0005\u00b2Z\u0002",
    "\u057e\u0580\u0003\u0002\u0002\u0002\u057f\u057c\u0003\u0002\u0002\u0002",
    "\u057f\u0580\u0003\u0002\u0002\u0002\u0580\u00af\u0003\u0002\u0002\u0002",
    "\u0581\u0587\u0005\u00b4[\u0002\u0582\u0583\u0005\u0238\u011d\u0002",
    "\u0583\u0584\u0005\u00b4[\u0002\u0584\u0586\u0003\u0002\u0002\u0002",
    "\u0585\u0582\u0003\u0002\u0002\u0002\u0586\u0589\u0003\u0002\u0002\u0002",
    "\u0587\u0585\u0003\u0002\u0002\u0002\u0587\u0588\u0003\u0002\u0002\u0002",
    "\u0588\u00b1\u0003\u0002\u0002\u0002\u0589\u0587\u0003\u0002\u0002\u0002",
    "\u058a\u0590\u0005\u00b6\\\u0002\u058b\u058c\u0005\u0238\u011d\u0002",
    "\u058c\u058d\u0005\u00b6\\\u0002\u058d\u058f\u0003\u0002\u0002\u0002",
    "\u058e\u058b\u0003\u0002\u0002\u0002\u058f\u0592\u0003\u0002\u0002\u0002",
    "\u0590\u058e\u0003\u0002\u0002\u0002\u0590\u0591\u0003\u0002\u0002\u0002",
    "\u0591\u00b3\u0003\u0002\u0002\u0002\u0592\u0590\u0003\u0002\u0002\u0002",
    "\u0593\u0594\u0005\u013c\u009f\u0002\u0594\u00b5\u0003\u0002\u0002\u0002",
    "\u0595\u0596\u0005\u013c\u009f\u0002\u0596\u00b7\u0003\u0002\u0002\u0002",
    "\u0597\u0598\u0005\u016e\u00b8\u0002\u0598\u0599\u0005\u0176\u00bc\u0002",
    "\u0599\u00b9\u0003\u0002\u0002\u0002\u059a\u059c\u0005\u0178\u00bd\u0002",
    "\u059b\u059d\u0005\u00bc_\u0002\u059c\u059b\u0003\u0002\u0002\u0002",
    "\u059c\u059d\u0003\u0002\u0002\u0002\u059d\u059e\u0003\u0002\u0002\u0002",
    "\u059e\u05a0\u0005\u0176\u00bc\u0002\u059f\u05a1\u0005\u00fa~\u0002",
    "\u05a0\u059f\u0003\u0002\u0002\u0002\u05a0\u05a1\u0003\u0002\u0002\u0002",
    "\u05a1\u00bb\u0003\u0002\u0002\u0002\u05a2\u05a5\u0005\u01c6\u00e4\u0002",
    "\u05a3\u05a5\u0005\u0210\u0109\u0002\u05a4\u05a2\u0003\u0002\u0002\u0002",
    "\u05a4\u05a3\u0003\u0002\u0002\u0002\u05a5\u00bd\u0003\u0002\u0002\u0002",
    "\u05a6\u05a7\u0005\u016a\u00b6\u0002\u05a7\u05a8\u0005\u01bc\u00df\u0002",
    "\u05a8\u05a9\u0005\u0138\u009d\u0002\u05a9\u05aa\u0005\u0222\u0112\u0002",
    "\u05aa\u05ab\u0005\u01e8\u00f5\u0002\u05ab\u05ac\u0007\u00b0\u0002\u0002",
    "\u05ac\u05ad\u0005\u022c\u0117\u0002\u05ad\u05ae\u0005\u00c0a\u0002",
    "\u05ae\u05b2\u0005\u022e\u0118\u0002\u05af\u05b0\u0005\u016c\u00b7\u0002",
    "\u05b0\u05b1\u0005\u00c4c\u0002\u05b1\u05b3\u0003\u0002\u0002\u0002",
    "\u05b2\u05af\u0003\u0002\u0002\u0002\u05b2\u05b3\u0003\u0002\u0002\u0002",
    "\u05b3\u00bf\u0003\u0002\u0002\u0002\u05b4\u05ba\u0005\u00c2b\u0002",
    "\u05b5\u05b6\u0005\u0238\u011d\u0002\u05b6\u05b7\u0005\u00c2b\u0002",
    "\u05b7\u05b9\u0003\u0002\u0002\u0002\u05b8\u05b5\u0003\u0002\u0002\u0002",
    "\u05b9\u05bc\u0003\u0002\u0002\u0002\u05ba\u05b8\u0003\u0002\u0002\u0002",
    "\u05ba\u05bb\u0003\u0002\u0002\u0002\u05bb\u00c1\u0003\u0002\u0002\u0002",
    "\u05bc\u05ba\u0003\u0002\u0002\u0002\u05bd\u05be\u0007\u00a9\u0002\u0002",
    "\u05be\u05bf\u0007\u000b\u0002\u0002\u05bf\u05c4\u0007\u00a9\u0002\u0002",
    "\u05c0\u05c1\u0007\u00a9\u0002\u0002\u05c1\u05c2\u0007\u000b\u0002\u0002",
    "\u05c2\u05c4\u0007\u00aa\u0002\u0002\u05c3\u05bd\u0003\u0002\u0002\u0002",
    "\u05c3\u05c0\u0003\u0002\u0002\u0002\u05c4\u00c3\u0003\u0002\u0002\u0002",
    "\u05c5\u05c6\u0005\u0190\u00c9\u0002\u05c6\u05c7\u0007\u00b0\u0002\u0002",
    "\u05c7\u05c8\u0005\u0134\u009b\u0002\u05c8\u00c5\u0003\u0002\u0002\u0002",
    "\u05c9\u05ca\u0005\u0214\u010b\u0002\u05ca\u05cb\u0005\u0138\u009d\u0002",
    "\u05cb\u00c7\u0003\u0002\u0002\u0002\u05cc\u05ce\u0005\u020a\u0106\u0002",
    "\u05cd\u05cf\u0005\u0202\u0102\u0002\u05ce\u05cd\u0003\u0002\u0002\u0002",
    "\u05ce\u05cf\u0003\u0002\u0002\u0002\u05cf\u05d3\u0003\u0002\u0002\u0002",
    "\u05d0\u05d1\u0005\u0138\u009d\u0002\u05d1\u05d2\u0007\u0010\u0002\u0002",
    "\u05d2\u05d4\u0003\u0002\u0002\u0002\u05d3\u05d0\u0003\u0002\u0002\u0002",
    "\u05d3\u05d4\u0003\u0002\u0002\u0002\u05d4\u05d5\u0003\u0002\u0002\u0002",
    "\u05d5\u05d6\u0005\u013a\u009e\u0002\u05d6\u00c9\u0003\u0002\u0002\u0002",
    "\u05d7\u05d8\u0005\u0184\u00c3\u0002\u05d8\u05da\u0005\u01aa\u00d6\u0002",
    "\u05d9\u05db\u0005\u00fc\u007f\u0002\u05da\u05d9\u0003\u0002\u0002\u0002",
    "\u05da\u05db\u0003\u0002\u0002\u0002\u05db\u05dd\u0003\u0002\u0002\u0002",
    "\u05dc\u05de\u0005\u00ccg\u0002\u05dd\u05dc\u0003\u0002\u0002\u0002",
    "\u05dd\u05de\u0003\u0002\u0002\u0002\u05de\u05df\u0003\u0002\u0002\u0002",
    "\u05df\u05e3\u0005\u01d8\u00ed\u0002\u05e0\u05e1\u0005\u0138\u009d\u0002",
    "\u05e1\u05e2\u0007\u0010\u0002\u0002\u05e2\u05e4\u0003\u0002\u0002\u0002",
    "\u05e3\u05e0\u0003\u0002\u0002\u0002\u05e3\u05e4\u0003\u0002\u0002\u0002",
    "\u05e4\u05e5\u0003\u0002\u0002\u0002\u05e5\u05e6\u0005\u013a\u009e\u0002",
    "\u05e6\u05e7\u0005\u0228\u0115\u0002\u05e7\u05e8\u0005\u00ceh\u0002",
    "\u05e8\u05e9\u0005\u022a\u0116\u0002\u05e9\u00cb\u0003\u0002\u0002\u0002",
    "\u05ea\u05ed\u0005\u023c\u011f\u0002\u05eb\u05ed\u0005\u0132\u009a\u0002",
    "\u05ec\u05ea\u0003\u0002\u0002\u0002\u05ec\u05eb\u0003\u0002\u0002\u0002",
    "\u05ed\u00cd\u0003\u0002\u0002\u0002\u05ee\u05f3\u0005\u013c\u009f\u0002",
    "\u05ef\u05f3\u0005\u00d0i\u0002\u05f0\u05f3\u0005\u00d2j\u0002\u05f1",
    "\u05f3\u0005\u00d4k\u0002\u05f2\u05ee\u0003\u0002\u0002\u0002\u05f2",
    "\u05ef\u0003\u0002\u0002\u0002\u05f2\u05f0\u0003\u0002\u0002\u0002\u05f2",
    "\u05f1\u0003\u0002\u0002\u0002\u05f3\u00cf\u0003\u0002\u0002\u0002\u05f4",
    "\u05f5\u0005\u01ba\u00de\u0002\u05f5\u05f6\u0005\u0228\u0115\u0002\u05f6",
    "\u05f7\u0005\u013c\u009f\u0002\u05f7\u05f8\u0005\u022a\u0116\u0002\u05f8",
    "\u00d1\u0003\u0002\u0002\u0002\u05f9\u05fa\u0005\u0192\u00ca\u0002\u05fa",
    "\u05fb\u0005\u0228\u0115\u0002\u05fb\u05fc\u0005\u013c\u009f\u0002\u05fc",
    "\u05fd\u0005\u022a\u0116\u0002\u05fd\u00d3\u0003\u0002\u0002\u0002\u05fe",
    "\u05ff\u0005\u019e\u00d0\u0002\u05ff\u0600\u0005\u0228\u0115\u0002\u0600",
    "\u0601\u0005\u013c\u009f\u0002\u0601\u0602\u0005\u022a\u0116\u0002\u0602",
    "\u00d5\u0003\u0002\u0002\u0002\u0603\u0605\u0005\u00ba^\u0002\u0604",
    "\u0603\u0003\u0002\u0002\u0002\u0604\u0605\u0003\u0002\u0002\u0002\u0605",
    "\u0606\u0003\u0002\u0002\u0002\u0606\u0608\u0005\u0186\u00c4\u0002\u0607",
    "\u0609\u0005\u00d8m\u0002\u0608\u0607\u0003\u0002\u0002\u0002\u0608",
    "\u0609\u0003\u0002\u0002\u0002\u0609\u060a\u0003\u0002\u0002\u0002\u060a",
    "\u060c\u0005\u0110\u0089\u0002\u060b\u060d\u0005\u00fa~\u0002\u060c",
    "\u060b\u0003\u0002\u0002\u0002\u060c\u060d\u0003\u0002\u0002\u0002\u060d",
    "\u060e\u0003\u0002\u0002\u0002\u060e\u0611\u0005\u0118\u008d\u0002\u060f",
    "\u0612\u0005\u00fe\u0080\u0002\u0610\u0612\u0005\u00dep\u0002\u0611",
    "\u060f\u0003\u0002\u0002\u0002\u0611\u0610\u0003\u0002\u0002\u0002\u0611",
    "\u0612\u0003\u0002\u0002\u0002\u0612\u00d7\u0003\u0002\u0002\u0002\u0613",
    "\u0619\u0005\u00dan\u0002\u0614\u0615\u0005\u0238\u011d\u0002\u0615",
    "\u0616\u0005\u00dan\u0002\u0616\u0618\u0003\u0002\u0002\u0002\u0617",
    "\u0614\u0003\u0002\u0002\u0002\u0618\u061b\u0003\u0002\u0002\u0002\u0619",
    "\u0617\u0003\u0002\u0002\u0002\u0619\u061a\u0003\u0002\u0002\u0002\u061a",
    "\u00d9\u0003\u0002\u0002\u0002\u061b\u0619\u0003\u0002\u0002\u0002\u061c",
    "\u0626\u0005\u023c\u011f\u0002\u061d\u061e\u0005\u023c\u011f\u0002\u061e",
    "\u0621\u0007\u0007\u0002\u0002\u061f\u0622\u0005\u0132\u009a\u0002\u0620",
    "\u0622\u0005\u012e\u0098\u0002\u0621\u061f\u0003\u0002\u0002\u0002\u0621",
    "\u0620\u0003\u0002\u0002\u0002\u0622\u0623\u0003\u0002\u0002\u0002\u0623",
    "\u0624\u0007\b\u0002\u0002\u0624\u0626\u0003\u0002\u0002\u0002\u0625",
    "\u061c\u0003\u0002\u0002\u0002\u0625\u061d\u0003\u0002\u0002\u0002\u0626",
    "\u00db\u0003\u0002\u0002\u0002\u0627\u0629\u0005\u00ba^\u0002\u0628",
    "\u0627\u0003\u0002\u0002\u0002\u0628\u0629\u0003\u0002\u0002\u0002\u0629",
    "\u062a\u0003\u0002\u0002\u0002\u062a\u062e\u0005\u0212\u010a\u0002\u062b",
    "\u062c\u0005\u0138\u009d\u0002\u062c\u062d\u0007\u0010\u0002\u0002\u062d",
    "\u062f\u0003\u0002\u0002\u0002\u062e\u062b\u0003\u0002\u0002\u0002\u062e",
    "\u062f\u0003\u0002\u0002\u0002\u062f\u0630\u0003\u0002\u0002\u0002\u0630",
    "\u0632\u0005\u013a\u009e\u0002\u0631\u0633\u0005\u00f4{\u0002\u0632",
    "\u0631\u0003\u0002\u0002\u0002\u0632\u0633\u0003\u0002\u0002\u0002\u0633",
    "\u0634\u0003\u0002\u0002\u0002\u0634\u0635\u0005\u01f8\u00fd\u0002\u0635",
    "\u0636\u0005\u00e4s\u0002\u0636\u0639\u0005\u0118\u008d\u0002\u0637",
    "\u063a\u0005\u00fe\u0080\u0002\u0638\u063a\u0005\u00dep\u0002\u0639",
    "\u0637\u0003\u0002\u0002\u0002\u0639\u0638\u0003\u0002\u0002\u0002\u0639",
    "\u063a\u0003\u0002\u0002\u0002\u063a\u00dd\u0003\u0002\u0002\u0002\u063b",
    "\u063c\u0005\u01a6\u00d4\u0002\u063c\u063d\u0005\u00e0q\u0002\u063d",
    "\u00df\u0003\u0002\u0002\u0002\u063e\u0644\u0005\u00e2r\u0002\u063f",
    "\u0640\u0005\u016c\u00b7\u0002\u0640\u0641\u0005\u00e2r\u0002\u0641",
    "\u0643\u0003\u0002\u0002\u0002\u0642\u063f\u0003\u0002\u0002\u0002\u0643",
    "\u0646\u0003\u0002\u0002\u0002\u0644\u0642\u0003\u0002\u0002\u0002\u0644",
    "\u0645\u0003\u0002\u0002\u0002\u0645\u00e1\u0003\u0002\u0002\u0002\u0646",
    "\u0644\u0003\u0002\u0002\u0002\u0647\u0648\u0005\u023c\u011f\u0002\u0648",
    "\u0649\u0007\u00b0\u0002\u0002\u0649\u064a\u0005\u012c\u0097\u0002\u064a",
    "\u00e3\u0003\u0002\u0002\u0002\u064b\u0651\u0005\u00e6t\u0002\u064c",
    "\u064d\u0005\u0238\u011d\u0002\u064d\u064e\u0005\u00e6t\u0002\u064e",
    "\u0650\u0003\u0002\u0002\u0002\u064f\u064c\u0003\u0002\u0002\u0002\u0650",
    "\u0653\u0003\u0002\u0002\u0002\u0651\u064f\u0003\u0002\u0002\u0002\u0651",
    "\u0652\u0003\u0002\u0002\u0002\u0652\u00e5\u0003\u0002\u0002\u0002\u0653",
    "\u0651\u0003\u0002\u0002\u0002\u0654\u0655\u0005\u023c\u011f\u0002\u0655",
    "\u065a\u0007\u00b0\u0002\u0002\u0656\u065b\u0005\u012c\u0097\u0002\u0657",
    "\u065b\u0005\u00eav\u0002\u0658\u065b\u0005\u00e8u\u0002\u0659\u065b",
    "\u0005\u00eex\u0002\u065a\u0656\u0003\u0002\u0002\u0002\u065a\u0657",
    "\u0003\u0002\u0002\u0002\u065a\u0658\u0003\u0002\u0002\u0002\u065a\u0659",
    "\u0003\u0002\u0002\u0002\u065b\u068e\u0003\u0002\u0002\u0002\u065c\u065d",
    "\u0005\u023c\u011f\u0002\u065d\u065e\u0007\u00b0\u0002\u0002\u065e\u065f",
    "\u0005\u023c\u011f\u0002\u065f\u0660\t\u0003\u0002\u0002\u0660\u0661",
    "\u0005\u012e\u0098\u0002\u0661\u068e\u0003\u0002\u0002\u0002\u0662\u0663",
    "\u0005\u023c\u011f\u0002\u0663\u0664\u0007\u00b0\u0002\u0002\u0664\u0665",
    "\u0005\u023c\u011f\u0002\u0665\u0666\t\u0003\u0002\u0002\u0666\u0667",
    "\u0005\u00e8u\u0002\u0667\u068e\u0003\u0002\u0002\u0002\u0668\u0669",
    "\u0005\u023c\u011f\u0002\u0669\u066a\u0007\u00b0\u0002\u0002\u066a\u066b",
    "\u0005\u00e8u\u0002\u066b\u066c\t\u0003\u0002\u0002\u066c\u066d\u0005",
    "\u023c\u011f\u0002\u066d\u068e\u0003\u0002\u0002\u0002\u066e\u066f\u0005",
    "\u023c\u011f\u0002\u066f\u0670\u0007\u00b0\u0002\u0002\u0670\u0671\u0005",
    "\u023c\u011f\u0002\u0671\u0672\t\u0003\u0002\u0002\u0672\u0673\u0005",
    "\u00eav\u0002\u0673\u068e\u0003\u0002\u0002\u0002\u0674\u0675\u0005",
    "\u023c\u011f\u0002\u0675\u0676\u0007\u00b0\u0002\u0002\u0676\u0677\u0005",
    "\u00eav\u0002\u0677\u0678\t\u0003\u0002\u0002\u0678\u0679\u0005\u023c",
    "\u011f\u0002\u0679\u068e\u0003\u0002\u0002\u0002\u067a\u067b\u0005\u023c",
    "\u011f\u0002\u067b\u067c\u0007\u00b0\u0002\u0002\u067c\u067d\u0005\u023c",
    "\u011f\u0002\u067d\u067e\t\u0003\u0002\u0002\u067e\u067f\u0005\u00ee",
    "x\u0002\u067f\u068e\u0003\u0002\u0002\u0002\u0680\u0681\u0005\u023c",
    "\u011f\u0002\u0681\u0682\u0007\u00b0\u0002\u0002\u0682\u0683\u0005\u00ee",
    "x\u0002\u0683\u0684\t\u0003\u0002\u0002\u0684\u0685\u0005\u023c\u011f",
    "\u0002\u0685\u068e\u0003\u0002\u0002\u0002\u0686\u0687\u0005\u023c\u011f",
    "\u0002\u0687\u0688\u0005\u0234\u011b\u0002\u0688\u0689\u0005\u012e\u0098",
    "\u0002\u0689\u068a\u0005\u0236\u011c\u0002\u068a\u068b\u0007\u00b0\u0002",
    "\u0002\u068b\u068c\u0005\u012c\u0097\u0002\u068c\u068e\u0003\u0002\u0002",
    "\u0002\u068d\u0654\u0003\u0002\u0002\u0002\u068d\u065c\u0003\u0002\u0002",
    "\u0002\u068d\u0662\u0003\u0002\u0002\u0002\u068d\u0668\u0003\u0002\u0002",
    "\u0002\u068d\u066e\u0003\u0002\u0002\u0002\u068d\u0674\u0003\u0002\u0002",
    "\u0002\u068d\u067a\u0003\u0002\u0002\u0002\u068d\u0680\u0003\u0002\u0002",
    "\u0002\u068d\u0686\u0003\u0002\u0002\u0002\u068e\u00e7\u0003\u0002\u0002",
    "\u0002\u068f\u0699\u0005\u022c\u0117\u0002\u0690\u0696\u0005\u012c\u0097",
    "\u0002\u0691\u0692\u0005\u0238\u011d\u0002\u0692\u0693\u0005\u0108\u0085",
    "\u0002\u0693\u0695\u0003\u0002\u0002\u0002\u0694\u0691\u0003\u0002\u0002",
    "\u0002\u0695\u0698\u0003\u0002\u0002\u0002\u0696\u0694\u0003\u0002\u0002",
    "\u0002\u0696\u0697\u0003\u0002\u0002\u0002\u0697\u069a\u0003\u0002\u0002",
    "\u0002\u0698\u0696\u0003\u0002\u0002\u0002\u0699\u0690\u0003\u0002\u0002",
    "\u0002\u0699\u069a\u0003\u0002\u0002\u0002\u069a\u069b\u0003\u0002\u0002",
    "\u0002\u069b\u069c\u0005\u022e\u0118\u0002\u069c\u00e9\u0003\u0002\u0002",
    "\u0002\u069d\u069e\u0005\u022c\u0117\u0002\u069e\u069f\u0005\u012c\u0097",
    "\u0002\u069f\u06a0\u0005\u023a\u011e\u0002\u06a0\u06a1\u0005\u0108\u0085",
    "\u0002\u06a1\u06a9\u0003\u0002\u0002\u0002\u06a2\u06a3\u0005\u0238\u011d",
    "\u0002\u06a3\u06a4\u0005\u012c\u0097\u0002\u06a4\u06a5\u0005\u023a\u011e",
    "\u0002\u06a5\u06a6\u0005\u0108\u0085\u0002\u06a6\u06a8\u0003\u0002\u0002",
    "\u0002\u06a7\u06a2\u0003\u0002\u0002\u0002\u06a8\u06ab\u0003\u0002\u0002",
    "\u0002\u06a9\u06a7\u0003\u0002\u0002\u0002\u06a9\u06aa\u0003\u0002\u0002",
    "\u0002\u06aa\u06ac\u0003\u0002\u0002\u0002\u06ab\u06a9\u0003\u0002\u0002",
    "\u0002\u06ac\u06ad\u0005\u022e\u0118\u0002\u06ad\u00eb\u0003\u0002\u0002",
    "\u0002\u06ae\u06af\u0005\u022c\u0117\u0002\u06af\u06b5\u0005\u0108\u0085",
    "\u0002\u06b0\u06b1\u0005\u0238\u011d\u0002\u06b1\u06b2\u0005\u0108\u0085",
    "\u0002\u06b2\u06b4\u0003\u0002\u0002\u0002\u06b3\u06b0\u0003\u0002\u0002",
    "\u0002\u06b4\u06b7\u0003\u0002\u0002\u0002\u06b5\u06b3\u0003\u0002\u0002",
    "\u0002\u06b5\u06b6\u0003\u0002\u0002\u0002\u06b6\u06b8\u0003\u0002\u0002",
    "\u0002\u06b7\u06b5\u0003\u0002\u0002\u0002\u06b8\u06b9\u0005\u022e\u0118",
    "\u0002\u06b9\u00ed\u0003\u0002\u0002\u0002\u06ba\u06bb\u0005\u0234\u011b",
    "\u0002\u06bb\u06c1\u0005\u012c\u0097\u0002\u06bc\u06bd\u0005\u0238\u011d",
    "\u0002\u06bd\u06be\u0005\u0108\u0085\u0002\u06be\u06c0\u0003\u0002\u0002",
    "\u0002\u06bf\u06bc\u0003\u0002\u0002\u0002\u06c0\u06c3\u0003\u0002\u0002",
    "\u0002\u06c1\u06bf\u0003\u0002\u0002\u0002\u06c1\u06c2\u0003\u0002\u0002",
    "\u0002\u06c2\u06c4\u0003\u0002\u0002\u0002\u06c3\u06c1\u0003\u0002\u0002",
    "\u0002\u06c4\u06c5\u0005\u0236\u011c\u0002\u06c5\u00ef\u0003\u0002\u0002",
    "\u0002\u06c6\u06e3\u0005\u0228\u0115\u0002\u06c7\u06d8\u0005\u0108\u0085",
    "\u0002\u06c8\u06c9\u0005\u0238\u011d\u0002\u06c9\u06ca\u0005\u0108\u0085",
    "\u0002\u06ca\u06cc\u0003\u0002\u0002\u0002\u06cb\u06c8\u0003\u0002\u0002",
    "\u0002\u06cc\u06cf\u0003\u0002\u0002\u0002\u06cd\u06cb\u0003\u0002\u0002",
    "\u0002\u06cd\u06ce\u0003\u0002\u0002\u0002\u06ce\u06d9\u0003\u0002\u0002",
    "\u0002\u06cf\u06cd\u0003\u0002\u0002\u0002\u06d0\u06d1\u0005\u0238\u011d",
    "\u0002\u06d1\u06d2\u0005\u00f0y\u0002\u06d2\u06d4\u0003\u0002\u0002",
    "\u0002\u06d3\u06d0\u0003\u0002\u0002\u0002\u06d4\u06d7\u0003\u0002\u0002",
    "\u0002\u06d5\u06d3\u0003\u0002\u0002\u0002\u06d5\u06d6\u0003\u0002\u0002",
    "\u0002\u06d6\u06d9\u0003\u0002\u0002\u0002\u06d7\u06d5\u0003\u0002\u0002",
    "\u0002\u06d8\u06cd\u0003\u0002\u0002\u0002\u06d8\u06d5\u0003\u0002\u0002",
    "\u0002\u06d9\u06e4\u0003\u0002\u0002\u0002\u06da\u06e0\u0005\u00f0y",
    "\u0002\u06db\u06dc\u0005\u0238\u011d\u0002\u06dc\u06dd\u0005\u00f0y",
    "\u0002\u06dd\u06df\u0003\u0002\u0002\u0002\u06de\u06db\u0003\u0002\u0002",
    "\u0002\u06df\u06e2\u0003\u0002\u0002\u0002\u06e0\u06de\u0003\u0002\u0002",
    "\u0002\u06e0\u06e1\u0003\u0002\u0002\u0002\u06e1\u06e4\u0003\u0002\u0002",
    "\u0002\u06e2\u06e0\u0003\u0002\u0002\u0002\u06e3\u06c7\u0003\u0002\u0002",
    "\u0002\u06e3\u06da\u0003\u0002\u0002\u0002\u06e4\u06e5\u0003\u0002\u0002",
    "\u0002\u06e5\u06e6\u0005\u022a\u0116\u0002\u06e6\u00f1\u0003\u0002\u0002",
    "\u0002\u06e7\u06e9\u0005\u00ba^\u0002\u06e8\u06e7\u0003\u0002\u0002",
    "\u0002\u06e8\u06e9\u0003\u0002\u0002\u0002\u06e9\u06ea\u0003\u0002\u0002",
    "\u0002\u06ea\u06eb\u0005\u01b0\u00d9\u0002\u06eb\u06ef\u0005\u01b2\u00da",
    "\u0002\u06ec\u06ed\u0005\u0138\u009d\u0002\u06ed\u06ee\u0007\u0010\u0002",
    "\u0002\u06ee\u06f0\u0003\u0002\u0002\u0002\u06ef\u06ec\u0003\u0002\u0002",
    "\u0002\u06ef\u06f0\u0003\u0002\u0002\u0002\u06f0\u06f1\u0003\u0002\u0002",
    "\u0002\u06f1\u06f3\u0005\u013a\u009e\u0002\u06f2\u06f4\u0005\u0102\u0082",
    "\u0002\u06f3\u06f2\u0003\u0002\u0002\u0002\u06f3\u06f4\u0003\u0002\u0002",
    "\u0002\u06f4\u06f5\u0003\u0002\u0002\u0002\u06f5\u06f7\u0005\u0100\u0081",
    "\u0002\u06f6\u06f8\u0005\u00fc\u007f\u0002\u06f7\u06f6\u0003\u0002\u0002",
    "\u0002\u06f7\u06f8\u0003\u0002\u0002\u0002\u06f8\u06fa\u0003\u0002\u0002",
    "\u0002\u06f9\u06fb\u0005\u00f4{\u0002\u06fa\u06f9\u0003\u0002\u0002",
    "\u0002\u06fa\u06fb\u0003\u0002\u0002\u0002\u06fb\u00f3\u0003\u0002\u0002",
    "\u0002\u06fc\u06fd\u0005\u021a\u010e\u0002\u06fd\u06fe\u0005\u00f8}",
    "\u0002\u06fe\u070d\u0003\u0002\u0002\u0002\u06ff\u0700\u0005\u021a\u010e",
    "\u0002\u0700\u0701\u0005\u00f8}\u0002\u0701\u0702\u0005\u016c\u00b7",
    "\u0002\u0702\u0703\u0005\u00f6|\u0002\u0703\u070d\u0003\u0002\u0002",
    "\u0002\u0704\u0705\u0005\u021a\u010e\u0002\u0705\u0706\u0005\u00f6|",
    "\u0002\u0706\u070d\u0003\u0002\u0002\u0002\u0707\u0708\u0005\u021a\u010e",
    "\u0002\u0708\u0709\u0005\u00f6|\u0002\u0709\u070a\u0005\u016c\u00b7",
    "\u0002\u070a\u070b\u0005\u00f8}\u0002\u070b\u070d\u0003\u0002\u0002",
    "\u0002\u070c\u06fc\u0003\u0002\u0002\u0002\u070c\u06ff\u0003\u0002\u0002",
    "\u0002\u070c\u0704\u0003\u0002\u0002\u0002\u070c\u0707\u0003\u0002\u0002",
    "\u0002\u070d\u00f5\u0003\u0002\u0002\u0002\u070e\u070f\u0005\u0204\u0103",
    "\u0002\u070f\u0710\u0005\u012e\u0098\u0002\u0710\u00f7\u0003\u0002\u0002",
    "\u0002\u0711\u0712\u0005\u020c\u0107\u0002\u0712\u0713\u0005\u012e\u0098",
    "\u0002\u0713\u00f9\u0003\u0002\u0002\u0002\u0714\u0715\u0005\u021a\u010e",
    "\u0002\u0715\u0716\u0005\u00f6|\u0002\u0716\u00fb\u0003\u0002\u0002",
    "\u0002\u0717\u0718\u0005\u01a6\u00d4\u0002\u0718\u0719\u0005\u01d2\u00ea",
    "\u0002\u0719\u071a\u0005\u0196\u00cc\u0002\u071a\u00fd\u0003\u0002\u0002",
    "\u0002\u071b\u071c\u0005\u01a6\u00d4\u0002\u071c\u071d\u0005\u0196\u00cc",
    "\u0002\u071d\u00ff\u0003\u0002\u0002\u0002\u071e\u071f\u0005\u021c\u010f",
    "\u0002\u071f\u0720\u0007\u0003\u0002\u0002\u0720\u0721\u0005\u0106\u0084",
    "\u0002\u0721\u0722\u0007\u0004\u0002\u0002\u0722\u0727\u0003\u0002\u0002",
    "\u0002\u0723\u0724\u0005\u01b6\u00dc\u0002\u0724\u0725\u0005\u012c\u0097",
    "\u0002\u0725\u0727\u0003\u0002\u0002\u0002\u0726\u071e\u0003\u0002\u0002",
    "\u0002\u0726\u0723\u0003\u0002\u0002\u0002\u0727\u0101\u0003\u0002\u0002",
    "\u0002\u0728\u0729\u0007\u0003\u0002\u0002\u0729\u072a\u0005\u0104\u0083",
    "\u0002\u072a\u072b\u0007\u0004\u0002\u0002\u072b\u0103\u0003\u0002\u0002",
    "\u0002\u072c\u0732\u0005\u013c\u009f\u0002\u072d\u072e\u0005\u0238\u011d",
    "\u0002\u072e\u072f\u0005\u013c\u009f\u0002\u072f\u0731\u0003\u0002\u0002",
    "\u0002\u0730\u072d\u0003\u0002\u0002\u0002\u0731\u0734\u0003\u0002\u0002",
    "\u0002\u0732\u0730\u0003\u0002\u0002\u0002\u0732\u0733\u0003\u0002\u0002",
    "\u0002\u0733\u0105\u0003\u0002\u0002\u0002\u0734\u0732\u0003\u0002\u0002",
    "\u0002\u0735\u073b\u0005\u0108\u0085\u0002\u0736\u0737\u0005\u0238\u011d",
    "\u0002\u0737\u0738\u0005\u0108\u0085\u0002\u0738\u073a\u0003\u0002\u0002",
    "\u0002\u0739\u0736\u0003\u0002\u0002\u0002\u073a\u073d\u0003\u0002\u0002",
    "\u0002\u073b\u0739\u0003\u0002\u0002\u0002\u073b\u073c\u0003\u0002\u0002",
    "\u0002\u073c\u0107\u0003\u0002\u0002\u0002\u073d\u073b\u0003\u0002\u0002",
    "\u0002\u073e\u0745\u0005\u012c\u0097\u0002\u073f\u0745\u0005\u00eav",
    "\u0002\u0740\u0745\u0005\u00e8u\u0002\u0741\u0745\u0005\u00eex\u0002",
    "\u0742\u0745\u0005\u00f0y\u0002\u0743\u0745\u0005\u00ecw\u0002\u0744",
    "\u073e\u0003\u0002\u0002\u0002\u0744\u073f\u0003\u0002\u0002\u0002\u0744",
    "\u0740\u0003\u0002\u0002\u0002\u0744\u0741\u0003\u0002\u0002\u0002\u0744",
    "\u0742\u0003\u0002\u0002\u0002\u0744\u0743\u0003\u0002\u0002\u0002\u0745",
    "\u0109\u0003\u0002\u0002\u0002\u0746\u0748\u0005\u01f6\u00fc\u0002\u0747",
    "\u0749\u0005\u011a\u008e\u0002\u0748\u0747\u0003\u0002\u0002\u0002\u0748",
    "\u0749\u0003\u0002\u0002\u0002\u0749\u074b\u0003\u0002\u0002\u0002\u074a",
    "\u074c\u0005\u01b6\u00dc\u0002\u074b\u074a\u0003\u0002\u0002\u0002\u074b",
    "\u074c\u0003\u0002\u0002\u0002\u074c\u074d\u0003\u0002\u0002\u0002\u074d",
    "\u074e\u0005\u011c\u008f\u0002\u074e\u0750\u0005\u0110\u0089\u0002\u074f",
    "\u0751\u0005\u0118\u008d\u0002\u0750\u074f\u0003\u0002\u0002\u0002\u0750",
    "\u0751\u0003\u0002\u0002\u0002\u0751\u0753\u0003\u0002\u0002\u0002\u0752",
    "\u0754\u0005\u0114\u008b\u0002\u0753\u0752\u0003\u0002\u0002\u0002\u0753",
    "\u0754\u0003\u0002\u0002\u0002\u0754\u0756\u0003\u0002\u0002\u0002\u0755",
    "\u0757\u0005\u010e\u0088\u0002\u0756\u0755\u0003\u0002\u0002\u0002\u0756",
    "\u0757\u0003\u0002\u0002\u0002\u0757\u0759\u0003\u0002\u0002\u0002\u0758",
    "\u075a\u0005\u010c\u0087\u0002\u0759\u0758\u0003\u0002\u0002\u0002\u0759",
    "\u075a\u0003\u0002\u0002\u0002\u075a\u010b\u0003\u0002\u0002\u0002\u075b",
    "\u075c\u0005\u0168\u00b5\u0002\u075c\u075d\u0005\u0198\u00cd\u0002\u075d",
    "\u010d\u0003\u0002\u0002\u0002\u075e\u075f\u0005\u01c2\u00e2\u0002\u075f",
    "\u0760\u0005\u012e\u0098\u0002\u0760\u010f\u0003\u0002\u0002\u0002\u0761",
    "\u0762\u0005\u019c\u00cf\u0002\u0762\u0763\u0005\u0112\u008a\u0002\u0763",
    "\u0111\u0003\u0002\u0002\u0002\u0764\u076a\u0005\u023c\u011f\u0002\u0765",
    "\u0766\u0005\u023c\u011f\u0002\u0766\u0767\u0007\u0010\u0002\u0002\u0767",
    "\u0768\u0005\u023c\u011f\u0002\u0768\u076a\u0003\u0002\u0002\u0002\u0769",
    "\u0764\u0003\u0002\u0002\u0002\u0769\u0765\u0003\u0002\u0002\u0002\u076a",
    "\u0113\u0003\u0002\u0002\u0002\u076b\u076c\u0005\u01de\u00f0\u0002\u076c",
    "\u076d\u0005\u017a\u00be\u0002\u076d\u076e\u0005\u0116\u008c\u0002\u076e",
    "\u0115\u0003\u0002\u0002\u0002\u076f\u0772\u0005\u023c\u011f\u0002\u0770",
    "\u0773\u0005\u0172\u00ba\u0002\u0771\u0773\u0005\u0188\u00c5\u0002\u0772",
    "\u0770\u0003\u0002\u0002\u0002\u0772\u0771\u0003\u0002\u0002\u0002\u0772",
    "\u0773\u0003\u0002\u0002\u0002\u0773\u0117\u0003\u0002\u0002\u0002\u0774",
    "\u0775\u0005\u0220\u0111\u0002\u0775\u0776\u0005\u0120\u0091\u0002\u0776",
    "\u0119\u0003\u0002\u0002\u0002\u0777\u0778\u0005\u018c\u00c7\u0002\u0778",
    "\u011b\u0003\u0002\u0002\u0002\u0779\u077c\u0007\u0011\u0002\u0002\u077a",
    "\u077c\u0005\u011e\u0090\u0002\u077b\u0779\u0003\u0002\u0002\u0002\u077b",
    "\u077a\u0003\u0002\u0002\u0002\u077c\u0782\u0003\u0002\u0002\u0002\u077d",
    "\u077e\u0005\u0238\u011d\u0002\u077e\u077f\u0005\u011e\u0090\u0002\u077f",
    "\u0781\u0003\u0002\u0002\u0002\u0780\u077d\u0003\u0002\u0002\u0002\u0781",
    "\u0784\u0003\u0002\u0002\u0002\u0782\u0780\u0003\u0002\u0002\u0002\u0782",
    "\u0783\u0003\u0002\u0002\u0002\u0783\u011d\u0003\u0002\u0002\u0002\u0784",
    "\u0782\u0003\u0002\u0002\u0002\u0785\u0786\u0005\u023c\u011f\u0002\u0786",
    "\u0787\u0007\u0010\u0002\u0002\u0787\u0788\u0007\u0011\u0002\u0002\u0788",
    "\u0796\u0003\u0002\u0002\u0002\u0789\u078d\u0005\u023c\u011f\u0002\u078a",
    "\u078b\u0005\u0170\u00b9\u0002\u078b\u078c\u0005\u023c\u011f\u0002\u078c",
    "\u078e\u0003\u0002\u0002\u0002\u078d\u078a\u0003\u0002\u0002\u0002\u078d",
    "\u078e\u0003\u0002\u0002\u0002\u078e\u0796\u0003\u0002\u0002\u0002\u078f",
    "\u0793\u0005\u0128\u0095\u0002\u0790\u0791\u0005\u0170\u00b9\u0002\u0791",
    "\u0792\u0005\u023c\u011f\u0002\u0792\u0794\u0003\u0002\u0002\u0002\u0793",
    "\u0790\u0003\u0002\u0002\u0002\u0793\u0794\u0003\u0002\u0002\u0002\u0794",
    "\u0796\u0003\u0002\u0002\u0002\u0795\u0785\u0003\u0002\u0002\u0002\u0795",
    "\u0789\u0003\u0002\u0002\u0002\u0795\u078f\u0003\u0002\u0002\u0002\u0796",
    "\u011f\u0003\u0002\u0002\u0002\u0797\u079d\u0005\u0122\u0092\u0002\u0798",
    "\u0799\u0005\u016c\u00b7\u0002\u0799\u079a\u0005\u0122\u0092\u0002\u079a",
    "\u079c\u0003\u0002\u0002\u0002\u079b\u0798\u0003\u0002\u0002\u0002\u079c",
    "\u079f\u0003\u0002\u0002\u0002\u079d\u079b\u0003\u0002\u0002\u0002\u079d",
    "\u079e\u0003\u0002\u0002\u0002\u079e\u0121\u0003\u0002\u0002\u0002\u079f",
    "\u079d\u0003\u0002\u0002\u0002\u07a0\u07a1\u0005\u023c\u011f\u0002\u07a1",
    "\u07a2\t\u0004\u0002\u0002\u07a2\u07a3\u0005\u012c\u0097\u0002\u07a3",
    "\u07ea\u0003\u0002\u0002\u0002\u07a4\u07a5\u0005\u023c\u011f\u0002\u07a5",
    "\u07a6\u0007\u0010\u0002\u0002\u07a6\u07a7\u0005\u023c\u011f\u0002\u07a7",
    "\u07a8\t\u0004\u0002\u0002\u07a8\u07a9\u0005\u012c\u0097\u0002\u07a9",
    "\u07ea\u0003\u0002\u0002\u0002\u07aa\u07ab\u0005\u0128\u0095\u0002\u07ab",
    "\u07ac\t\u0004\u0002\u0002\u07ac\u07ad\u0005\u012c\u0097\u0002\u07ad",
    "\u07ea\u0003\u0002\u0002\u0002\u07ae\u07af\u0005\u0128\u0095\u0002\u07af",
    "\u07b0\t\u0004\u0002\u0002\u07b0\u07b1\u0005\u0128\u0095\u0002\u07b1",
    "\u07ea\u0003\u0002\u0002\u0002\u07b2\u07b3\u0005\u023c\u011f\u0002\u07b3",
    "\u07b4\u0005\u01a8\u00d5\u0002\u07b4\u07b6\u0007\u0003\u0002\u0002\u07b5",
    "\u07b7\u0005\u012a\u0096\u0002\u07b6\u07b5\u0003\u0002\u0002\u0002\u07b6",
    "\u07b7\u0003\u0002\u0002\u0002\u07b7\u07b8\u0003\u0002\u0002\u0002\u07b8",
    "\u07b9\u0007\u0004\u0002\u0002\u07b9\u07ea\u0003\u0002\u0002\u0002\u07ba",
    "\u07bb\u0007\u0003\u0002\u0002\u07bb\u07c1\u0005\u023c\u011f\u0002\u07bc",
    "\u07bd\u0005\u0238\u011d\u0002\u07bd\u07be\u0005\u023c\u011f\u0002\u07be",
    "\u07c0\u0003\u0002\u0002\u0002\u07bf\u07bc\u0003\u0002\u0002\u0002\u07c0",
    "\u07c3\u0003\u0002\u0002\u0002\u07c1\u07bf\u0003\u0002\u0002\u0002\u07c1",
    "\u07c2\u0003\u0002\u0002\u0002\u07c2\u07c4\u0003\u0002\u0002\u0002\u07c3",
    "\u07c1\u0003\u0002\u0002\u0002\u07c4\u07c5\u0007\u0004\u0002\u0002\u07c5",
    "\u07c6\u0005\u01a8\u00d5\u0002\u07c6\u07c7\u0007\u0003\u0002\u0002\u07c7",
    "\u07cd\u0005\u00f0y\u0002\u07c8\u07c9\u0005\u0238\u011d\u0002\u07c9",
    "\u07ca\u0005\u00f0y\u0002\u07ca\u07cc\u0003\u0002\u0002\u0002\u07cb",
    "\u07c8\u0003\u0002\u0002\u0002\u07cc\u07cf\u0003\u0002\u0002\u0002\u07cd",
    "\u07cb\u0003\u0002\u0002\u0002\u07cd\u07ce\u0003\u0002\u0002\u0002\u07ce",
    "\u07d0\u0003\u0002\u0002\u0002\u07cf\u07cd\u0003\u0002\u0002\u0002\u07d0",
    "\u07d1\u0007\u0004\u0002\u0002\u07d1\u07ea\u0003\u0002\u0002\u0002\u07d2",
    "\u07d3\u0007\u0003\u0002\u0002\u07d3\u07d9\u0005\u023c\u011f\u0002\u07d4",
    "\u07d5\u0005\u0238\u011d\u0002\u07d5\u07d6\u0005\u023c\u011f\u0002\u07d6",
    "\u07d8\u0003\u0002\u0002\u0002\u07d7\u07d4\u0003\u0002\u0002\u0002\u07d8",
    "\u07db\u0003\u0002\u0002\u0002\u07d9\u07d7\u0003\u0002\u0002\u0002\u07d9",
    "\u07da\u0003\u0002\u0002\u0002\u07da\u07dc\u0003\u0002\u0002\u0002\u07db",
    "\u07d9\u0003\u0002\u0002\u0002\u07dc\u07dd\u0007\u0004\u0002\u0002\u07dd",
    "\u07de\t\u0004\u0002\u0002\u07de\u07e4\u0005\u00f0y\u0002\u07df\u07e0",
    "\u0005\u0238\u011d\u0002\u07e0\u07e1\u0005\u00f0y\u0002\u07e1\u07e3",
    "\u0003\u0002\u0002\u0002\u07e2\u07df\u0003\u0002\u0002\u0002\u07e3\u07e6",
    "\u0003\u0002\u0002\u0002\u07e4\u07e2\u0003\u0002\u0002\u0002\u07e4\u07e5",
    "\u0003\u0002\u0002\u0002\u07e5\u07ea\u0003\u0002\u0002\u0002\u07e6\u07e4",
    "\u0003\u0002\u0002\u0002\u07e7\u07ea\u0005\u0126\u0094\u0002\u07e8\u07ea",
    "\u0005\u0124\u0093\u0002\u07e9\u07a0\u0003\u0002\u0002\u0002\u07e9\u07a4",
    "\u0003\u0002\u0002\u0002\u07e9\u07aa\u0003\u0002\u0002\u0002\u07e9\u07ae",
    "\u0003\u0002\u0002\u0002\u07e9\u07b2\u0003\u0002\u0002\u0002\u07e9\u07ba",
    "\u0003\u0002\u0002\u0002\u07e9\u07d2\u0003\u0002\u0002\u0002\u07e9\u07e7",
    "\u0003\u0002\u0002\u0002\u07e9\u07e8\u0003\u0002\u0002\u0002\u07ea\u0123",
    "\u0003\u0002\u0002\u0002\u07eb\u07ec\u0005\u023c\u011f\u0002\u07ec\u07ed",
    "\u0005\u0182\u00c2\u0002\u07ed\u07ee\u0005\u012c\u0097\u0002\u07ee\u0125",
    "\u0003\u0002\u0002\u0002\u07ef\u07f0\u0005\u023c\u011f\u0002\u07f0\u07f1",
    "\u0005\u0182\u00c2\u0002\u07f1\u07f2\u0005\u01b8\u00dd\u0002\u07f2\u07f3",
    "\u0003\u0002\u0002\u0002\u07f3\u07f4\u0005\u012c\u0097\u0002\u07f4\u0127",
    "\u0003\u0002\u0002\u0002\u07f5\u07f6\u0005\u023c\u011f\u0002\u07f6\u07f7",
    "\u0007\u0003\u0002\u0002\u07f7\u07f8\u0007\u0011\u0002\u0002\u07f8\u07f9",
    "\u0007\u0004\u0002\u0002\u07f9\u0802\u0003\u0002\u0002\u0002\u07fa\u07fb",
    "\u0005\u023c\u011f\u0002\u07fb\u07fd\u0007\u0003\u0002\u0002\u07fc\u07fe",
    "\u0005\u012a\u0096\u0002\u07fd\u07fc\u0003\u0002\u0002\u0002\u07fd\u07fe",
    "\u0003\u0002\u0002\u0002\u07fe\u07ff\u0003\u0002\u0002\u0002\u07ff\u0800",
    "\u0007\u0004\u0002\u0002\u0800\u0802\u0003\u0002\u0002\u0002\u0801\u07f5",
    "\u0003\u0002\u0002\u0002\u0801\u07fa\u0003\u0002\u0002\u0002\u0802\u0129",
    "\u0003\u0002\u0002\u0002\u0803\u0807\u0005\u012c\u0097\u0002\u0804\u0807",
    "\u0005\u023c\u011f\u0002\u0805\u0807\u0005\u0128\u0095\u0002\u0806\u0803",
    "\u0003\u0002\u0002\u0002\u0806\u0804\u0003\u0002\u0002\u0002\u0806\u0805",
    "\u0003\u0002\u0002\u0002\u0807\u0810\u0003\u0002\u0002\u0002\u0808\u080c",
    "\u0005\u0238\u011d\u0002\u0809\u080d\u0005\u012c\u0097\u0002\u080a\u080d",
    "\u0005\u023c\u011f\u0002\u080b\u080d\u0005\u0128\u0095\u0002\u080c\u0809",
    "\u0003\u0002\u0002\u0002\u080c\u080a\u0003\u0002\u0002\u0002\u080c\u080b",
    "\u0003\u0002\u0002\u0002\u080d\u080f\u0003\u0002\u0002\u0002\u080e\u0808",
    "\u0003\u0002\u0002\u0002\u080f\u0812\u0003\u0002\u0002\u0002\u0810\u080e",
    "\u0003\u0002\u0002\u0002\u0810\u0811\u0003\u0002\u0002\u0002\u0811\u012b",
    "\u0003\u0002\u0002\u0002\u0812\u0810\u0003\u0002\u0002\u0002\u0813\u081d",
    "\u0007\u00af\u0002\u0002\u0814\u081d\u0005\u0132\u009a\u0002\u0815\u081d",
    "\u0005\u012e\u0098\u0002\u0816\u081d\u0005\u0130\u0099\u0002\u0817\u081d",
    "\u0005\u0136\u009c\u0002\u0818\u081d\u0005\u0134\u009b\u0002\u0819\u081d",
    "\u00052\u001a\u0002\u081a\u081d\u0005\u01d4\u00eb\u0002\u081b\u081d",
    "\u0005\u023c\u011f\u0002\u081c\u0813\u0003\u0002\u0002\u0002\u081c\u0814",
    "\u0003\u0002\u0002\u0002\u081c\u0815\u0003\u0002\u0002\u0002\u081c\u0816",
    "\u0003\u0002\u0002\u0002\u081c\u0817\u0003\u0002\u0002\u0002\u081c\u0818",
    "\u0003\u0002\u0002\u0002\u081c\u0819\u0003\u0002\u0002\u0002\u081c\u081a",
    "\u0003\u0002\u0002\u0002\u081c\u081b\u0003\u0002\u0002\u0002\u081d\u012d",
    "\u0003\u0002\u0002\u0002\u081e\u081f\u0007\u00aa\u0002\u0002\u081f\u012f",
    "\u0003\u0002\u0002\u0002\u0820\u0821\t\u0005\u0002\u0002\u0821\u0131",
    "\u0003\u0002\u0002\u0002\u0822\u0823\u0007\u00a9\u0002\u0002\u0823\u0133",
    "\u0003\u0002\u0002\u0002\u0824\u0825\t\u0006\u0002\u0002\u0825\u0135",
    "\u0003\u0002\u0002\u0002\u0826\u0827\u0007\u00ac\u0002\u0002\u0827\u0137",
    "\u0003\u0002\u0002\u0002\u0828\u082e\u0005\u023c\u011f\u0002\u0829\u082a",
    "\u0007\u0017\u0002\u0002\u082a\u082b\u0005\u023c\u011f\u0002\u082b\u082c",
    "\u0007\u0017\u0002\u0002\u082c\u082e\u0003\u0002\u0002\u0002\u082d\u0828",
    "\u0003\u0002\u0002\u0002\u082d\u0829\u0003\u0002\u0002\u0002\u082e\u0139",
    "\u0003\u0002\u0002\u0002\u082f\u0835\u0005\u023c\u011f\u0002\u0830\u0831",
    "\u0007\u0017\u0002\u0002\u0831\u0832\u0005\u023c\u011f\u0002\u0832\u0833",
    "\u0007\u0017\u0002\u0002\u0833\u0835\u0003\u0002\u0002\u0002\u0834\u082f",
    "\u0003\u0002\u0002\u0002\u0834\u0830\u0003\u0002\u0002\u0002\u0835\u013b",
    "\u0003\u0002\u0002\u0002\u0836\u083c\u0005\u023c\u011f\u0002\u0837\u0838",
    "\u0007\u0017\u0002\u0002\u0838\u0839\u0005\u023c\u011f\u0002\u0839\u083a",
    "\u0007\u0017\u0002\u0002\u083a\u083c\u0003\u0002\u0002\u0002\u083b\u0836",
    "\u0003\u0002\u0002\u0002\u083b\u0837\u0003\u0002\u0002\u0002\u083c\u013d",
    "\u0003\u0002\u0002\u0002\u083d\u083f\u0005\u0140\u00a1\u0002\u083e\u0840",
    "\u0005\u0142\u00a2\u0002\u083f\u083e\u0003\u0002\u0002\u0002\u083f\u0840",
    "\u0003\u0002\u0002\u0002\u0840\u013f\u0003\u0002\u0002\u0002\u0841\u085e",
    "\u0005\u023c\u011f\u0002\u0842\u085e\u0007\u00a9\u0002\u0002\u0843\u085e",
    "\u0007~\u0002\u0002\u0844\u085e\u0007v\u0002\u0002\u0845\u085e\u0007",
    "\u0092\u0002\u0002\u0846\u085e\u0007\u0093\u0002\u0002\u0847\u085e\u0007",
    "\u0094\u0002\u0002\u0848\u085e\u0007\u0095\u0002\u0002\u0849\u085e\u0007",
    "\u0096\u0002\u0002\u084a\u085e\u0007\u0097\u0002\u0002\u084b\u085e\u0007",
    "\u0098\u0002\u0002\u084c\u085e\u0007\u0099\u0002\u0002\u084d\u085e\u0007",
    "\u009a\u0002\u0002\u084e\u085e\u0007\u009b\u0002\u0002\u084f\u085e\u0007",
    "\u009c\u0002\u0002\u0850\u085e\u0007\u009d\u0002\u0002\u0851\u085e\u0007",
    "\u009e\u0002\u0002\u0852\u085e\u0007\u009f\u0002\u0002\u0853\u085e\u0007",
    "\u00a0\u0002\u0002\u0854\u085e\u0007\u00a1\u0002\u0002\u0855\u085e\u0007",
    "\u00a3\u0002\u0002\u0856\u085e\u0007\u00a2\u0002\u0002\u0857\u085e\u0007",
    "\u00a4\u0002\u0002\u0858\u085e\u0007\u00a5\u0002\u0002\u0859\u085e\u0007",
    "\u00a6\u0002\u0002\u085a\u085e\u0007\u00a7\u0002\u0002\u085b\u085e\u0007",
    "~\u0002\u0002\u085c\u085e\u0007\u008c\u0002\u0002\u085d\u0841\u0003",
    "\u0002\u0002\u0002\u085d\u0842\u0003\u0002\u0002\u0002\u085d\u0843\u0003",
    "\u0002\u0002\u0002\u085d\u0844\u0003\u0002\u0002\u0002\u085d\u0845\u0003",
    "\u0002\u0002\u0002\u085d\u0846\u0003\u0002\u0002\u0002\u085d\u0847\u0003",
    "\u0002\u0002\u0002\u085d\u0848\u0003\u0002\u0002\u0002\u085d\u0849\u0003",
    "\u0002\u0002\u0002\u085d\u084a\u0003\u0002\u0002\u0002\u085d\u084b\u0003",
    "\u0002\u0002\u0002\u085d\u084c\u0003\u0002\u0002\u0002\u085d\u084d\u0003",
    "\u0002\u0002\u0002\u085d\u084e\u0003\u0002\u0002\u0002\u085d\u084f\u0003",
    "\u0002\u0002\u0002\u085d\u0850\u0003\u0002\u0002\u0002\u085d\u0851\u0003",
    "\u0002\u0002\u0002\u085d\u0852\u0003\u0002\u0002\u0002\u085d\u0853\u0003",
    "\u0002\u0002\u0002\u085d\u0854\u0003\u0002\u0002\u0002\u085d\u0855\u0003",
    "\u0002\u0002\u0002\u085d\u0856\u0003\u0002\u0002\u0002\u085d\u0857\u0003",
    "\u0002\u0002\u0002\u085d\u0858\u0003\u0002\u0002\u0002\u085d\u0859\u0003",
    "\u0002\u0002\u0002\u085d\u085a\u0003\u0002\u0002\u0002\u085d\u085b\u0003",
    "\u0002\u0002\u0002\u085d\u085c\u0003\u0002\u0002\u0002\u085e\u0141\u0003",
    "\u0002\u0002\u0002\u085f\u0860\u0005\u0230\u0119\u0002\u0860\u0866\u0005",
    "\u013e\u00a0\u0002\u0861\u0862\u0005\u0238\u011d\u0002\u0862\u0863\u0005",
    "\u013e\u00a0\u0002\u0863\u0865\u0003\u0002\u0002\u0002\u0864\u0861\u0003",
    "\u0002\u0002\u0002\u0865\u0868\u0003\u0002\u0002\u0002\u0866\u0864\u0003",
    "\u0002\u0002\u0002\u0866\u0867\u0003\u0002\u0002\u0002\u0867\u0869\u0003",
    "\u0002\u0002\u0002\u0868\u0866\u0003\u0002\u0002\u0002\u0869\u086a\u0005",
    "\u0232\u011a\u0002\u086a\u0143\u0003\u0002\u0002\u0002\u086b\u086e\u0005",
    "\u0172\u00ba\u0002\u086c\u086e\u0005\u0188\u00c5\u0002\u086d\u086b\u0003",
    "\u0002\u0002\u0002\u086d\u086c\u0003\u0002\u0002\u0002\u086e\u0145\u0003",
    "\u0002\u0002\u0002\u086f\u0870\u0005\u023c\u011f\u0002\u0870\u0147\u0003",
    "\u0002\u0002\u0002\u0871\u0872\u0005\u023c\u011f\u0002\u0872\u0149\u0003",
    "\u0002\u0002\u0002\u0873\u0874\u0005\u0132\u009a\u0002\u0874\u014b\u0003",
    "\u0002\u0002\u0002\u0875\u0876\u0005\u023c\u011f\u0002\u0876\u014d\u0003",
    "\u0002\u0002\u0002\u0877\u0878\u0005\u023c\u011f\u0002\u0878\u014f\u0003",
    "\u0002\u0002\u0002\u0879\u087a\u0005\u023c\u011f\u0002\u087a\u0151\u0003",
    "\u0002\u0002\u0002\u087b\u087c\u0005\u023c\u011f\u0002\u087c\u0153\u0003",
    "\u0002\u0002\u0002\u087d\u087e\u0005\u023c\u011f\u0002\u087e\u0155\u0003",
    "\u0002\u0002\u0002\u087f\u0880\u0005\u023c\u011f\u0002\u0880\u0157\u0003",
    "\u0002\u0002\u0002\u0881\u0882\u0005\u0132\u009a\u0002\u0882\u0159\u0003",
    "\u0002\u0002\u0002\u0883\u0884\u0005\u023c\u011f\u0002\u0884\u015b\u0003",
    "\u0002\u0002\u0002\u0885\u0886\u0005\u015e\u00b0\u0002\u0886\u0887\u0005",
    "\u013e\u00a0\u0002\u0887\u015d\u0003\u0002\u0002\u0002\u0888\u0889\u0005",
    "\u023c\u011f\u0002\u0889\u015f\u0003\u0002\u0002\u0002\u088a\u088b\u0007",
    "\u0019\u0002\u0002\u088b\u0161\u0003\u0002\u0002\u0002\u088c\u088d\u0007",
    "\u001a\u0002\u0002\u088d\u0163\u0003\u0002\u0002\u0002\u088e\u088f\u0007",
    "\u001b\u0002\u0002\u088f\u0165\u0003\u0002\u0002\u0002\u0890\u0891\u0007",
    "\u001b\u0002\u0002\u0891\u0892\u0007g\u0002\u0002\u0892\u0167\u0003",
    "\u0002\u0002\u0002\u0893\u0894\u0007\u001c\u0002\u0002\u0894\u0169\u0003",
    "\u0002\u0002\u0002\u0895\u0896\u0007\u001d\u0002\u0002\u0896\u016b\u0003",
    "\u0002\u0002\u0002\u0897\u0898\u0007\u001e\u0002\u0002\u0898\u016d\u0003",
    "\u0002\u0002\u0002\u0899\u089a\u0007 \u0002\u0002\u089a\u016f\u0003",
    "\u0002\u0002\u0002\u089b\u089c\u0007!\u0002\u0002\u089c\u0171\u0003",
    "\u0002\u0002\u0002\u089d\u089e\u0007\"\u0002\u0002\u089e\u0173\u0003",
    "\u0002\u0002\u0002\u089f\u08a0\u0007#\u0002\u0002\u08a0\u0175\u0003",
    "\u0002\u0002\u0002\u08a1\u08a2\u0007$\u0002\u0002\u08a2\u0177\u0003",
    "\u0002\u0002\u0002\u08a3\u08a4\u0007%\u0002\u0002\u08a4\u0179\u0003",
    "\u0002\u0002\u0002\u08a5\u08a6\u0007&\u0002\u0002\u08a6\u017b\u0003",
    "\u0002\u0002\u0002\u08a7\u08a8\u0007\'\u0002\u0002\u08a8\u017d\u0003",
    "\u0002\u0002\u0002\u08a9\u08aa\u0007(\u0002\u0002\u08aa\u017f\u0003",
    "\u0002\u0002\u0002\u08ab\u08ac\u0007*\u0002\u0002\u08ac\u0181\u0003",
    "\u0002\u0002\u0002\u08ad\u08ae\u0007,\u0002\u0002\u08ae\u0183\u0003",
    "\u0002\u0002\u0002\u08af\u08b0\u0007-\u0002\u0002\u08b0\u0185\u0003",
    "\u0002\u0002\u0002\u08b1\u08b2\u0007/\u0002\u0002\u08b2\u0187\u0003",
    "\u0002\u0002\u0002\u08b3\u08b4\u00070\u0002\u0002\u08b4\u0189\u0003",
    "\u0002\u0002\u0002\u08b5\u08b6\u00071\u0002\u0002\u08b6\u018b\u0003",
    "\u0002\u0002\u0002\u08b7\u08b8\u00072\u0002\u0002\u08b8\u018d\u0003",
    "\u0002\u0002\u0002\u08b9\u08ba\u00073\u0002\u0002\u08ba\u018f\u0003",
    "\u0002\u0002\u0002\u08bb\u08bc\u00074\u0002\u0002\u08bc\u0191\u0003",
    "\u0002\u0002\u0002\u08bd\u08be\u00076\u0002\u0002\u08be\u0193\u0003",
    "\u0002\u0002\u0002\u08bf\u08c0\u00077\u0002\u0002\u08c0\u0195\u0003",
    "\u0002\u0002\u0002\u08c1\u08c2\u00078\u0002\u0002\u08c2\u0197\u0003",
    "\u0002\u0002\u0002\u08c3\u08c4\u0007:\u0002\u0002\u08c4\u0199\u0003",
    "\u0002\u0002\u0002\u08c5\u08c6\u0007;\u0002\u0002\u08c6\u019b\u0003",
    "\u0002\u0002\u0002\u08c7\u08c8\u0007<\u0002\u0002\u08c8\u019d\u0003",
    "\u0002\u0002\u0002\u08c9\u08ca\u0007=\u0002\u0002\u08ca\u019f\u0003",
    "\u0002\u0002\u0002\u08cb\u08cc\u0007>\u0002\u0002\u08cc\u01a1\u0003",
    "\u0002\u0002\u0002\u08cd\u08ce\u0007?\u0002\u0002\u08ce\u01a3\u0003",
    "\u0002\u0002\u0002\u08cf\u08d0\u0007@\u0002\u0002\u08d0\u01a5\u0003",
    "\u0002\u0002\u0002\u08d1\u08d2\u0007A\u0002\u0002\u08d2\u01a7\u0003",
    "\u0002\u0002\u0002\u08d3\u08d4\u0007B\u0002\u0002\u08d4\u01a9\u0003",
    "\u0002\u0002\u0002\u08d5\u08d6\u0007C\u0002\u0002\u08d6\u01ab\u0003",
    "\u0002\u0002\u0002\u08d7\u08d8\u0007E\u0002\u0002\u08d8\u01ad\u0003",
    "\u0002\u0002\u0002\u08d9\u08da\u0007F\u0002\u0002\u08da\u01af\u0003",
    "\u0002\u0002\u0002\u08db\u08dc\u0007G\u0002\u0002\u08dc\u01b1\u0003",
    "\u0002\u0002\u0002\u08dd\u08de\u0007H\u0002\u0002\u08de\u01b3\u0003",
    "\u0002\u0002\u0002\u08df\u08e0\u0007I\u0002\u0002\u08e0\u01b5\u0003",
    "\u0002\u0002\u0002\u08e1\u08e2\u0007J\u0002\u0002\u08e2\u01b7\u0003",
    "\u0002\u0002\u0002\u08e3\u08e4\u0007K\u0002\u0002\u08e4\u01b9\u0003",
    "\u0002\u0002\u0002\u08e5\u08e6\u0007L\u0002\u0002\u08e6\u01bb\u0003",
    "\u0002\u0002\u0002\u08e7\u08e8\u0007M\u0002\u0002\u08e8\u01bd\u0003",
    "\u0002\u0002\u0002\u08e9\u08ea\u0007N\u0002\u0002\u08ea\u01bf\u0003",
    "\u0002\u0002\u0002\u08eb\u08ec\u0007O\u0002\u0002\u08ec\u01c1\u0003",
    "\u0002\u0002\u0002\u08ed\u08ee\u0007Q\u0002\u0002\u08ee\u01c3\u0003",
    "\u0002\u0002\u0002\u08ef\u08f0\u0007\u009e\u0002\u0002\u08f0\u01c5\u0003",
    "\u0002\u0002\u0002\u08f1\u08f2\u0007T\u0002\u0002\u08f2\u01c7\u0003",
    "\u0002\u0002\u0002\u08f3\u08f4\u0007U\u0002\u0002\u08f4\u01c9\u0003",
    "\u0002\u0002\u0002\u08f5\u08f6\u0007V\u0002\u0002\u08f6\u01cb\u0003",
    "\u0002\u0002\u0002\u08f7\u08f8\u0007W\u0002\u0002\u08f8\u01cd\u0003",
    "\u0002\u0002\u0002\u08f9\u08fa\u0007Z\u0002\u0002\u08fa\u01cf\u0003",
    "\u0002\u0002\u0002\u08fb\u08fc\u0007Y\u0002\u0002\u08fc\u01d1\u0003",
    "\u0002\u0002\u0002\u08fd\u08fe\u0007[\u0002\u0002\u08fe\u01d3\u0003",
    "\u0002\u0002\u0002\u08ff\u0900\u0007\\\u0002\u0002\u0900\u01d5\u0003",
    "\u0002\u0002\u0002\u0901\u0902\u0007]\u0002\u0002\u0902\u01d7\u0003",
    "\u0002\u0002\u0002\u0903\u0904\u0007^\u0002\u0002\u0904\u01d9\u0003",
    "\u0002\u0002\u0002\u0905\u0906\u0007`\u0002\u0002\u0906\u01db\u0003",
    "\u0002\u0002\u0002\u0907\u0908\u0007a\u0002\u0002\u0908\u01dd\u0003",
    "\u0002\u0002\u0002\u0909\u090a\u0007b\u0002\u0002\u090a\u01df\u0003",
    "\u0002\u0002\u0002\u090b\u090c\u0007d\u0002\u0002\u090c\u01e1\u0003",
    "\u0002\u0002\u0002\u090d\u090e\u0007h\u0002\u0002\u090e\u01e3\u0003",
    "\u0002\u0002\u0002\u090f\u0910\u0007j\u0002\u0002\u0910\u01e5\u0003",
    "\u0002\u0002\u0002\u0911\u0912\u0007k\u0002\u0002\u0912\u01e7\u0003",
    "\u0002\u0002\u0002\u0913\u0914\u0007l\u0002\u0002\u0914\u01e9\u0003",
    "\u0002\u0002\u0002\u0915\u0916\u0007m\u0002\u0002\u0916\u01eb\u0003",
    "\u0002\u0002\u0002\u0917\u0918\u0007o\u0002\u0002\u0918\u01ed\u0003",
    "\u0002\u0002\u0002\u0919\u091a\u0007q\u0002\u0002\u091a\u01ef\u0003",
    "\u0002\u0002\u0002\u091b\u091c\u0007r\u0002\u0002\u091c\u01f1\u0003",
    "\u0002\u0002\u0002\u091d\u091e\u0007s\u0002\u0002\u091e\u01f3\u0003",
    "\u0002\u0002\u0002\u091f\u0920\u0007p\u0002\u0002\u0920\u01f5\u0003",
    "\u0002\u0002\u0002\u0921\u0922\u0007u\u0002\u0002\u0922\u01f7\u0003",
    "\u0002\u0002\u0002\u0923\u0924\u0007v\u0002\u0002\u0924\u01f9\u0003",
    "\u0002\u0002\u0002\u0925\u0926\u0007w\u0002\u0002\u0926\u01fb\u0003",
    "\u0002\u0002\u0002\u0927\u0928\u0007y\u0002\u0002\u0928\u01fd\u0003",
    "\u0002\u0002\u0002\u0929\u092a\u0007z\u0002\u0002\u092a\u01ff\u0003",
    "\u0002\u0002\u0002\u092b\u092c\u0007{\u0002\u0002\u092c\u0201\u0003",
    "\u0002\u0002\u0002\u092d\u092e\u0007|\u0002\u0002\u092e\u0203\u0003",
    "\u0002\u0002\u0002\u092f\u0930\u0007~\u0002\u0002\u0930\u0205\u0003",
    "\u0002\u0002\u0002\u0931\u0932\u0007\u007f\u0002\u0002\u0932\u0207\u0003",
    "\u0002\u0002\u0002\u0933\u0934\u0007\u0081\u0002\u0002\u0934\u0209\u0003",
    "\u0002\u0002\u0002\u0935\u0936\u0007\u0083\u0002\u0002\u0936\u020b\u0003",
    "\u0002\u0002\u0002\u0937\u0938\u0007\u0084\u0002\u0002\u0938\u020d\u0003",
    "\u0002\u0002\u0002\u0939\u093a\u0007\u0086\u0002\u0002\u093a\u020f\u0003",
    "\u0002\u0002\u0002\u093b\u093c\u0007\u0087\u0002\u0002\u093c\u0211\u0003",
    "\u0002\u0002\u0002\u093d\u093e\u0007\u0088\u0002\u0002\u093e\u0213\u0003",
    "\u0002\u0002\u0002\u093f\u0940\u0007\u0089\u0002\u0002\u0940\u0215\u0003",
    "\u0002\u0002\u0002\u0941\u0942\u0007\u008a\u0002\u0002\u0942\u0217\u0003",
    "\u0002\u0002\u0002\u0943\u0944\u0007\u00b5\u0002\u0002\u0944\u0219\u0003",
    "\u0002\u0002\u0002\u0945\u0946\u0007\u008b\u0002\u0002\u0946\u021b\u0003",
    "\u0002\u0002\u0002\u0947\u0948\u0007\u008d\u0002\u0002\u0948\u021d\u0003",
    "\u0002\u0002\u0002\u0949\u094a\u0007\u008e\u0002\u0002\u094a\u021f\u0003",
    "\u0002\u0002\u0002\u094b\u094c\u0007\u008f\u0002\u0002\u094c\u0221\u0003",
    "\u0002\u0002\u0002\u094d\u094e\u0007\u0090\u0002\u0002\u094e\u0223\u0003",
    "\u0002\u0002\u0002\u094f\u0950\u0007n\u0002\u0002\u0950\u0225\u0003",
    "\u0002\u0002\u0002\u0951\u0952\u0007\u0002\u0002\u0003\u0952\u0227\u0003",
    "\u0002\u0002\u0002\u0953\u0954\u0007\u0003\u0002\u0002\u0954\u0229\u0003",
    "\u0002\u0002\u0002\u0955\u0956\u0007\u0004\u0002\u0002\u0956\u022b\u0003",
    "\u0002\u0002\u0002\u0957\u0958\u0007\u0005\u0002\u0002\u0958\u022d\u0003",
    "\u0002\u0002\u0002\u0959\u095a\u0007\u0006\u0002\u0002\u095a\u022f\u0003",
    "\u0002\u0002\u0002\u095b\u095c\u0007\u00b1\u0002\u0002\u095c\u0231\u0003",
    "\u0002\u0002\u0002\u095d\u095e\u0007\u00b2\u0002\u0002\u095e\u0233\u0003",
    "\u0002\u0002\u0002\u095f\u0960\u0007\u0007\u0002\u0002\u0960\u0235\u0003",
    "\u0002\u0002\u0002\u0961\u0962\u0007\b\u0002\u0002\u0962\u0237\u0003",
    "\u0002\u0002\u0002\u0963\u0964\u0007\t\u0002\u0002\u0964\u0239\u0003",
    "\u0002\u0002\u0002\u0965\u0966\u0007\u000b\u0002\u0002\u0966\u023b\u0003",
    "\u0002\u0002\u0002\u0967\u09f6\u0007\u00ae\u0002\u0002\u0968\u0969\u0007",
    "\u0019\u0002\u0002\u0969\u09f6\u0007\u001a\u0002\u0002\u096a\u09f6\u0007",
    "\u001b\u0002\u0002\u096b\u09f6\u0007\u001c\u0002\u0002\u096c\u09f6\u0007",
    "\u001d\u0002\u0002\u096d\u09f6\u0007\u001e\u0002\u0002\u096e\u09f6\u0007",
    "\u001f\u0002\u0002\u096f\u09f6\u0007 \u0002\u0002\u0970\u09f6\u0007",
    "!\u0002\u0002\u0971\u09f6\u0007\"\u0002\u0002\u0972\u09f6\u0007#\u0002",
    "\u0002\u0973\u09f6\u0007$\u0002\u0002\u0974\u09f6\u0007%\u0002\u0002",
    "\u0975\u09f6\u0007&\u0002\u0002\u0976\u09f6\u0007\'\u0002\u0002\u0977",
    "\u09f6\u0007(\u0002\u0002\u0978\u09f6\u0007)\u0002\u0002\u0979\u09f6",
    "\u0007*\u0002\u0002\u097a\u09f6\u0007+\u0002\u0002\u097b\u09f6\u0007",
    ",\u0002\u0002\u097c\u09f6\u0007-\u0002\u0002\u097d\u09f6\u0007.\u0002",
    "\u0002\u097e\u09f6\u0007/\u0002\u0002\u097f\u09f6\u00070\u0002\u0002",
    "\u0980\u09f6\u00071\u0002\u0002\u0981\u09f6\u00072\u0002\u0002\u0982",
    "\u09f6\u00073\u0002\u0002\u0983\u09f6\u00074\u0002\u0002\u0984\u09f6",
    "\u00075\u0002\u0002\u0985\u09f6\u00076\u0002\u0002\u0986\u09f6\u0007",
    "7\u0002\u0002\u0987\u09f6\u00078\u0002\u0002\u0988\u09f6\u00079\u0002",
    "\u0002\u0989\u09f6\u0007:\u0002\u0002\u098a\u09f6\u0007;\u0002\u0002",
    "\u098b\u09f6\u0007<\u0002\u0002\u098c\u09f6\u0007=\u0002\u0002\u098d",
    "\u09f6\u0007>\u0002\u0002\u098e\u09f6\u0007?\u0002\u0002\u098f\u09f6",
    "\u0007@\u0002\u0002\u0990\u09f6\u0007A\u0002\u0002\u0991\u09f6\u0007",
    "B\u0002\u0002\u0992\u09f6\u0007C\u0002\u0002\u0993\u09f6\u0007D\u0002",
    "\u0002\u0994\u09f6\u0007E\u0002\u0002\u0995\u09f6\u0007F\u0002\u0002",
    "\u0996\u09f6\u0007G\u0002\u0002\u0997\u09f6\u0007H\u0002\u0002\u0998",
    "\u09f6\u0007I\u0002\u0002\u0999\u09f6\u0007J\u0002\u0002\u099a\u09f6",
    "\u0007K\u0002\u0002\u099b\u09f6\u0007L\u0002\u0002\u099c\u09f6\u0007",
    "M\u0002\u0002\u099d\u09f6\u0007N\u0002\u0002\u099e\u09f6\u0007O\u0002",
    "\u0002\u099f\u09f6\u0007P\u0002\u0002\u09a0\u09f6\u0007Q\u0002\u0002",
    "\u09a1\u09f6\u0007R\u0002\u0002\u09a2\u09f6\u0007S\u0002\u0002\u09a3",
    "\u09f6\u0007T\u0002\u0002\u09a4\u09f6\u0007U\u0002\u0002\u09a5\u09f6",
    "\u0007V\u0002\u0002\u09a6\u09f6\u0007W\u0002\u0002\u09a7\u09f6\u0007",
    "X\u0002\u0002\u09a8\u09f6\u0007Y\u0002\u0002\u09a9\u09f6\u0007Z\u0002",
    "\u0002\u09aa\u09f6\u0007[\u0002\u0002\u09ab\u09f6\u0007\\\u0002\u0002",
    "\u09ac\u09f6\u0007]\u0002\u0002\u09ad\u09f6\u0007^\u0002\u0002\u09ae",
    "\u09f6\u0007_\u0002\u0002\u09af\u09f6\u0007`\u0002\u0002\u09b0\u09f6",
    "\u0007a\u0002\u0002\u09b1\u09f6\u0007b\u0002\u0002\u09b2\u09f6\u0007",
    "c\u0002\u0002\u09b3\u09f6\u0007d\u0002\u0002\u09b4\u09f6\u0007e\u0002",
    "\u0002\u09b5\u09f6\u0007f\u0002\u0002\u09b6\u09f6\u0007g\u0002\u0002",
    "\u09b7\u09f6\u0007h\u0002\u0002\u09b8\u09f6\u0007i\u0002\u0002\u09b9",
    "\u09f6\u0007j\u0002\u0002\u09ba\u09f6\u0007k\u0002\u0002\u09bb\u09f6",
    "\u0007l\u0002\u0002\u09bc\u09f6\u0007m\u0002\u0002\u09bd\u09f6\u0007",
    "n\u0002\u0002\u09be\u09f6\u0007o\u0002\u0002\u09bf\u09f6\u0007p\u0002",
    "\u0002\u09c0\u09f6\u0007t\u0002\u0002\u09c1\u09f6\u0007u\u0002\u0002",
    "\u09c2\u09f6\u0007v\u0002\u0002\u09c3\u09f6\u0007w\u0002\u0002\u09c4",
    "\u09f6\u0007x\u0002\u0002\u09c5\u09f6\u0007y\u0002\u0002\u09c6\u09f6",
    "\u0007z\u0002\u0002\u09c7\u09f6\u0007{\u0002\u0002\u09c8\u09f6\u0007",
    "|\u0002\u0002\u09c9\u09f6\u0007}\u0002\u0002\u09ca\u09f6\u0007~\u0002",
    "\u0002\u09cb\u09f6\u0007\u007f\u0002\u0002\u09cc\u09f6\u0007\u0080\u0002",
    "\u0002\u09cd\u09f6\u0007\u0081\u0002\u0002\u09ce\u09f6\u0007\u0082\u0002",
    "\u0002\u09cf\u09f6\u0007\u0083\u0002\u0002\u09d0\u09f6\u0007\u0084\u0002",
    "\u0002\u09d1\u09f6\u0007\u0085\u0002\u0002\u09d2\u09f6\u0007\u0086\u0002",
    "\u0002\u09d3\u09f6\u0007\u0087\u0002\u0002\u09d4\u09f6\u0007\u0088\u0002",
    "\u0002\u09d5\u09f6\u0007\u0089\u0002\u0002\u09d6\u09f6\u0007\u008a\u0002",
    "\u0002\u09d7\u09f6\u0007\u008b\u0002\u0002\u09d8\u09f6\u0007\u008c\u0002",
    "\u0002\u09d9\u09f6\u0007\u008d\u0002\u0002\u09da\u09f6\u0007\u008e\u0002",
    "\u0002\u09db\u09f6\u0007\u008f\u0002\u0002\u09dc\u09f6\u0007\u0090\u0002",
    "\u0002\u09dd\u09f6\u0007\u0091\u0002\u0002\u09de\u09f6\u0007\u0092\u0002",
    "\u0002\u09df\u09f6\u0007\u0093\u0002\u0002\u09e0\u09f6\u0007\u0094\u0002",
    "\u0002\u09e1\u09f6\u0007\u0095\u0002\u0002\u09e2\u09f6\u0007\u0096\u0002",
    "\u0002\u09e3\u09f6\u0007\u0097\u0002\u0002\u09e4\u09f6\u0007\u0098\u0002",
    "\u0002\u09e5\u09f6\u0007\u0099\u0002\u0002\u09e6\u09f6\u0007\u009a\u0002",
    "\u0002\u09e7\u09f6\u0007\u009b\u0002\u0002\u09e8\u09f6\u0007\u009c\u0002",
    "\u0002\u09e9\u09f6\u0007\u009d\u0002\u0002\u09ea\u09f6\u0007\u009e\u0002",
    "\u0002\u09eb\u09f6\u0007\u009f\u0002\u0002\u09ec\u09f6\u0007\u00a0\u0002",
    "\u0002\u09ed\u09f6\u0007\u00a1\u0002\u0002\u09ee\u09f6\u0007\u00a2\u0002",
    "\u0002\u09ef\u09f6\u0007\u00a3\u0002\u0002\u09f0\u09f6\u0007\u00a4\u0002",
    "\u0002\u09f1\u09f6\u0007\u00a5\u0002\u0002\u09f2\u09f6\u0007\u00a6\u0002",
    "\u0002\u09f3\u09f6\u0007\u00a7\u0002\u0002\u09f4\u09f6\u0007\u00b5\u0002",
    "\u0002\u09f5\u0967\u0003\u0002\u0002\u0002\u09f5\u0968\u0003\u0002\u0002",
    "\u0002\u09f5\u096a\u0003\u0002\u0002\u0002\u09f5\u096b\u0003\u0002\u0002",
    "\u0002\u09f5\u096c\u0003\u0002\u0002\u0002\u09f5\u096d\u0003\u0002\u0002",
    "\u0002\u09f5\u096e\u0003\u0002\u0002\u0002\u09f5\u096f\u0003\u0002\u0002",
    "\u0002\u09f5\u0970\u0003\u0002\u0002\u0002\u09f5\u0971\u0003\u0002\u0002",
    "\u0002\u09f5\u0972\u0003\u0002\u0002\u0002\u09f5\u0973\u0003\u0002\u0002",
    "\u0002\u09f5\u0974\u0003\u0002\u0002\u0002\u09f5\u0975\u0003\u0002\u0002",
    "\u0002\u09f5\u0976\u0003\u0002\u0002\u0002\u09f5\u0977\u0003\u0002\u0002",
    "\u0002\u09f5\u0978\u0003\u0002\u0002\u0002\u09f5\u0979\u0003\u0002\u0002",
    "\u0002\u09f5\u097a\u0003\u0002\u0002\u0002\u09f5\u097b\u0003\u0002\u0002",
    "\u0002\u09f5\u097c\u0003\u0002\u0002\u0002\u09f5\u097d\u0003\u0002\u0002",
    "\u0002\u09f5\u097e\u0003\u0002\u0002\u0002\u09f5\u097f\u0003\u0002\u0002",
    "\u0002\u09f5\u0980\u0003\u0002\u0002\u0002\u09f5\u0981\u0003\u0002\u0002",
    "\u0002\u09f5\u0982\u0003\u0002\u0002\u0002\u09f5\u0983\u0003\u0002\u0002",
    "\u0002\u09f5\u0984\u0003\u0002\u0002\u0002\u09f5\u0985\u0003\u0002\u0002",
    "\u0002\u09f5\u0986\u0003\u0002\u0002\u0002\u09f5\u0987\u0003\u0002\u0002",
    "\u0002\u09f5\u0988\u0003\u0002\u0002\u0002\u09f5\u0989\u0003\u0002\u0002",
    "\u0002\u09f5\u098a\u0003\u0002\u0002\u0002\u09f5\u098b\u0003\u0002\u0002",
    "\u0002\u09f5\u098c\u0003\u0002\u0002\u0002\u09f5\u098d\u0003\u0002\u0002",
    "\u0002\u09f5\u098e\u0003\u0002\u0002\u0002\u09f5\u098f\u0003\u0002\u0002",
    "\u0002\u09f5\u0990\u0003\u0002\u0002\u0002\u09f5\u0991\u0003\u0002\u0002",
    "\u0002\u09f5\u0992\u0003\u0002\u0002\u0002\u09f5\u0993\u0003\u0002\u0002",
    "\u0002\u09f5\u0994\u0003\u0002\u0002\u0002\u09f5\u0995\u0003\u0002\u0002",
    "\u0002\u09f5\u0996\u0003\u0002\u0002\u0002\u09f5\u0997\u0003\u0002\u0002",
    "\u0002\u09f5\u0998\u0003\u0002\u0002\u0002\u09f5\u0999\u0003\u0002\u0002",
    "\u0002\u09f5\u099a\u0003\u0002\u0002\u0002\u09f5\u099b\u0003\u0002\u0002",
    "\u0002\u09f5\u099c\u0003\u0002\u0002\u0002\u09f5\u099d\u0003\u0002\u0002",
    "\u0002\u09f5\u099e\u0003\u0002\u0002\u0002\u09f5\u099f\u0003\u0002\u0002",
    "\u0002\u09f5\u09a0\u0003\u0002\u0002\u0002\u09f5\u09a1\u0003\u0002\u0002",
    "\u0002\u09f5\u09a2\u0003\u0002\u0002\u0002\u09f5\u09a3\u0003\u0002\u0002",
    "\u0002\u09f5\u09a4\u0003\u0002\u0002\u0002\u09f5\u09a5\u0003\u0002\u0002",
    "\u0002\u09f5\u09a6\u0003\u0002\u0002\u0002\u09f5\u09a7\u0003\u0002\u0002",
    "\u0002\u09f5\u09a8\u0003\u0002\u0002\u0002\u09f5\u09a9\u0003\u0002\u0002",
    "\u0002\u09f5\u09aa\u0003\u0002\u0002\u0002\u09f5\u09ab\u0003\u0002\u0002",
    "\u0002\u09f5\u09ac\u0003\u0002\u0002\u0002\u09f5\u09ad\u0003\u0002\u0002",
    "\u0002\u09f5\u09ae\u0003\u0002\u0002\u0002\u09f5\u09af\u0003\u0002\u0002",
    "\u0002\u09f5\u09b0\u0003\u0002\u0002\u0002\u09f5\u09b1\u0003\u0002\u0002",
    "\u0002\u09f5\u09b2\u0003\u0002\u0002\u0002\u09f5\u09b3\u0003\u0002\u0002",
    "\u0002\u09f5\u09b4\u0003\u0002\u0002\u0002\u09f5\u09b5\u0003\u0002\u0002",
    "\u0002\u09f5\u09b6\u0003\u0002\u0002\u0002\u09f5\u09b7\u0003\u0002\u0002",
    "\u0002\u09f5\u09b8\u0003\u0002\u0002\u0002\u09f5\u09b9\u0003\u0002\u0002",
    "\u0002\u09f5\u09ba\u0003\u0002\u0002\u0002\u09f5\u09bb\u0003\u0002\u0002",
    "\u0002\u09f5\u09bc\u0003\u0002\u0002\u0002\u09f5\u09bd\u0003\u0002\u0002",
    "\u0002\u09f5\u09be\u0003\u0002\u0002\u0002\u09f5\u09bf\u0003\u0002\u0002",
    "\u0002\u09f5\u09c0\u0003\u0002\u0002\u0002\u09f5\u09c1\u0003\u0002\u0002",
    "\u0002\u09f5\u09c2\u0003\u0002\u0002\u0002\u09f5\u09c3\u0003\u0002\u0002",
    "\u0002\u09f5\u09c4\u0003\u0002\u0002\u0002\u09f5\u09c5\u0003\u0002\u0002",
    "\u0002\u09f5\u09c6\u0003\u0002\u0002\u0002\u09f5\u09c7\u0003\u0002\u0002",
    "\u0002\u09f5\u09c8\u0003\u0002\u0002\u0002\u09f5\u09c9\u0003\u0002\u0002",
    "\u0002\u09f5\u09ca\u0003\u0002\u0002\u0002\u09f5\u09cb\u0003\u0002\u0002",
    "\u0002\u09f5\u09cc\u0003\u0002\u0002\u0002\u09f5\u09cd\u0003\u0002\u0002",
    "\u0002\u09f5\u09ce\u0003\u0002\u0002\u0002\u09f5\u09cf\u0003\u0002\u0002",
    "\u0002\u09f5\u09d0\u0003\u0002\u0002\u0002\u09f5\u09d1\u0003\u0002\u0002",
    "\u0002\u09f5\u09d2\u0003\u0002\u0002\u0002\u09f5\u09d3\u0003\u0002\u0002",
    "\u0002\u09f5\u09d4\u0003\u0002\u0002\u0002\u09f5\u09d5\u0003\u0002\u0002",
    "\u0002\u09f5\u09d6\u0003\u0002\u0002\u0002\u09f5\u09d7\u0003\u0002\u0002",
    "\u0002\u09f5\u09d8\u0003\u0002\u0002\u0002\u09f5\u09d9\u0003\u0002\u0002",
    "\u0002\u09f5\u09da\u0003\u0002\u0002\u0002\u09f5\u09db\u0003\u0002\u0002",
    "\u0002\u09f5\u09dc\u0003\u0002\u0002\u0002\u09f5\u09dd\u0003\u0002\u0002",
    "\u0002\u09f5\u09de\u0003\u0002\u0002\u0002\u09f5\u09df\u0003\u0002\u0002",
    "\u0002\u09f5\u09e0\u0003\u0002\u0002\u0002\u09f5\u09e1\u0003\u0002\u0002",
    "\u0002\u09f5\u09e2\u0003\u0002\u0002\u0002\u09f5\u09e3\u0003\u0002\u0002",
    "\u0002\u09f5\u09e4\u0003\u0002\u0002\u0002\u09f5\u09e5\u0003\u0002\u0002",
    "\u0002\u09f5\u09e6\u0003\u0002\u0002\u0002\u09f5\u09e7\u0003\u0002\u0002",
    "\u0002\u09f5\u09e8\u0003\u0002\u0002\u0002\u09f5\u09e9\u0003\u0002\u0002",
    "\u0002\u09f5\u09ea\u0003\u0002\u0002\u0002\u09f5\u09eb\u0003\u0002\u0002",
    "\u0002\u09f5\u09ec\u0003\u0002\u0002\u0002\u09f5\u09ed\u0003\u0002\u0002",
    "\u0002\u09f5\u09ee\u0003\u0002\u0002\u0002\u09f5\u09ef\u0003\u0002\u0002",
    "\u0002\u09f5\u09f0\u0003\u0002\u0002\u0002\u09f5\u09f1\u0003\u0002\u0002",
    "\u0002\u09f5\u09f2\u0003\u0002\u0002\u0002\u09f5\u09f3\u0003\u0002\u0002",
    "\u0002\u09f5\u09f4\u0003\u0002\u0002\u0002\u09f6\u023d\u0003\u0002\u0002",
    "\u0002\u00bb\u023f\u0242\u0248\u024d\u024f\u0254\u0257\u025a\u0285\u0296",
    "\u0299\u02a0\u02a5\u02b0\u02ba\u02c9\u02d4\u02d9\u02e4\u02e8\u02ed\u02f5",
    "\u02fa\u02fe\u0303\u0308\u0317\u031d\u0322\u032c\u0331\u033b\u0340\u0345",
    "\u034c\u0354\u0361\u036d\u0371\u0375\u037a\u037f\u0392\u0399\u03a1\u03a5",
    "\u03aa\u03bd\u03c6\u03d5\u03d7\u03e3\u03f1\u03f8\u03ff\u0407\u0412\u0426",
    "\u0431\u0448\u0456\u045d\u0466\u0479\u0481\u0487\u048c\u0493\u0498\u04a0",
    "\u04a5\u04ac\u04b1\u04b8\u04bd\u04c4\u04cb\u04d2\u04d9\u04de\u04e5\u04ec",
    "\u04f1\u04f8\u04fd\u0504\u0508\u050c\u0511\u0515\u0525\u0531\u0538\u0541",
    "\u054e\u0556\u055c\u0561\u056f\u0577\u057f\u0587\u0590\u059c\u05a0\u05a4",
    "\u05b2\u05ba\u05c3\u05ce\u05d3\u05da\u05dd\u05e3\u05ec\u05f2\u0604\u0608",
    "\u060c\u0611\u0619\u0621\u0625\u0628\u062e\u0632\u0639\u0644\u0651\u065a",
    "\u068d\u0696\u0699\u06a9\u06b5\u06c1\u06cd\u06d5\u06d8\u06e0\u06e3\u06e8",
    "\u06ef\u06f3\u06f7\u06fa\u070c\u0726\u0732\u073b\u0744\u0748\u074b\u0750",
    "\u0753\u0756\u0759\u0769\u0772\u077b\u0782\u078d\u0793\u0795\u079d\u07b6",
    "\u07c1\u07cd\u07d9\u07e4\u07e9\u07fd\u0801\u0806\u080c\u0810\u081c\u082d",
    "\u0834\u083b\u083f\u085d\u0866\u086d\u09f5"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'('", "')'", "'{'", "'}'", "'['", "']'", "','", 
                     "';'", "':'", null, null, null, null, "'.'", "'*'", 
                     "'/'", "'%'", "'+'", "'--'", "'-'", "'\"'", "'''" ];

var symbolicNames = [ null, "LR_BRACKET", "RR_BRACKET", "LC_BRACKET", "RC_BRACKET", 
                      "LS_BRACKET", "RS_BRACKET", "COMMA", "SEMI", "COLON", 
                      "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
                      "DOT", "STAR", "DIVIDE", "MODULE", "PLUS", "MINUSMINUS", 
                      "MINUS", "DQUOTE", "SQUOTE", "K_ADD", "K_AGGREGATE", 
                      "K_ALL", "K_ALLOW", "K_ALTER", "K_AND", "K_ANY", "K_APPLY", 
                      "K_AS", "K_ASC", "K_AUTHORIZE", "K_BATCH", "K_BEGIN", 
                      "K_BY", "K_CALLED", "K_CLUSTERING", "K_COLUMNFAMILY", 
                      "K_COMPACT", "K_CONSISTENCY", "K_CONTAINS", "K_CREATE", 
                      "K_CUSTOM", "K_DELETE", "K_DESC", "K_DESCRIBE", "K_DISTINCT", 
                      "K_DROP", "K_DURABLE_WRITES", "K_EACH_QUORUM", "K_ENTRIES", 
                      "K_EXECUTE", "K_EXISTS", "K_FALSE", "K_FILTERING", 
                      "K_FINALFUNC", "K_FROM", "K_FULL", "K_FUNCTION", "K_FUNCTIONS", 
                      "K_GRANT", "K_IF", "K_IN", "K_INDEX", "K_INFINITY", 
                      "K_INITCOND", "K_INPUT", "K_INSERT", "K_INTO", "K_IS", 
                      "K_JSON", "K_KEY", "K_KEYS", "K_KEYSPACE", "K_KEYSPACES", 
                      "K_LANGUAGE", "K_LEVEL", "K_LIMIT", "K_LOCAL_ONE", 
                      "K_LOCAL_QUORUM", "K_LOGGED", "K_LOGIN", "K_MATERIALIZED", 
                      "K_MODIFY", "K_NAN", "K_NORECURSIVE", "K_NOSUPERUSER", 
                      "K_NOT", "K_NULL", "K_OF", "K_ON", "K_ONE", "K_OPTIONS", 
                      "K_OR", "K_ORDER", "K_PARTITION", "K_PASSWORD", "K_PER", 
                      "K_PERMISSION", "K_PERMISSIONS", "K_PRIMARY", "K_QUORUM", 
                      "K_RENAME", "K_REPLACE", "K_REPLICATION", "K_RETURNS", 
                      "K_REVOKE", "K_ROLE", "K_ROLES", "K_INTERNAL", "K_LDAP", 
                      "K_SCHEME", "K_SCHEMA", "K_SELECT", "K_SET", "K_SFUNC", 
                      "K_STATIC", "K_STORAGE", "K_STYPE", "K_SUPERUSER", 
                      "K_TABLE", "K_THREE", "K_TIMESTAMP", "K_TO", "K_TOKEN", 
                      "K_TRIGGER", "K_TRUE", "K_TRUNCATE", "K_TTL", "K_TWO", 
                      "K_TYPE", "K_UNLOGGED", "K_UPDATE", "K_USE", "K_USER", 
                      "K_USING", "K_UUID", "K_VALUES", "K_VIEW", "K_WHERE", 
                      "K_WITH", "K_WRITETIME", "K_ASCII", "K_BIGINT", "K_BLOB", 
                      "K_BOOLEAN", "K_COUNTER", "K_DATE", "K_DECIMAL", "K_DOUBLE", 
                      "K_FLOAT", "K_FROZEN", "K_INET", "K_INT", "K_LIST", 
                      "K_MAP", "K_SMALLINT", "K_TEXT", "K_TIMEUUID", "K_TIME", 
                      "K_TINYINT", "K_TUPLE", "K_VARCHAR", "K_VARINT", "CODE_BLOCK", 
                      "STRING_LITERAL", "DECIMAL_LITERAL", "FLOAT_LITERAL", 
                      "HEXADECIMAL_LITERAL", "REAL_LITERAL", "OBJECT_NAME", 
                      "UUID", "OPERATOR_EQ", "OPERATOR_LT", "OPERATOR_GT", 
                      "OPERATOR_LTE", "OPERATOR_GTE", "K_USERS" ];

var ruleNames =  [ "root", "cqls", "statementSeparator", "empty", "cql", 
                   "revoke", "listUsers", "listRoles", "listPermissions", 
                   "grant", "priviledge", "resource", "createUser", "createRole", 
                   "createType", "typeMemberColumnList", "createTrigger", 
                   "createMaterializedView", "materializedViewWhere", "columnNotNullList", 
                   "columnNotNull", "materializedViewOptions", "createKeyspace", 
                   "createFunction", "codeBlock", "paramList", "returnMode", 
                   "createAggregate", "initCondDefinition", "initCondHash", 
                   "initCondHashItem", "initCondListNested", "initCondList", 
                   "orReplace", "alterUser", "userPassword", "userSuperUser", 
                   "alterType", "alterTypeOperation", "alterTypeRename", 
                   "alterTypeRenameList", "alterTypeRenameItem", "alterTypeAdd", 
                   "alterTypeAlterType", "alterTable", "alterTableOperation", 
                   "alterTableWith", "alterTableRename", "alterTableDropCompactStorage", 
                   "alterTableDropColumns", "alterTableDropColumnList", 
                   "alterTableAdd", "alterTableColumnDefinition", "alterRole", 
                   "roleWith", "roleWithOptions", "alterMaterializedView", 
                   "dropUser", "dropType", "dropMaterializedView", "dropAggregate", 
                   "dropFunction", "dropTrigger", "dropRole", "dropTable", 
                   "dropKeyspace", "dropIndex", "createTable", "withElement", 
                   "clusteringOrderColumns", "clusteringOrder", "tableOptions", 
                   "tableOptionItem", "tableOptionName", "tableOptionValue", 
                   "optionHash", "optionHashItem", "optionHashKey", "optionHashValue", 
                   "columnDefinitionList", "columnDefinition", "primaryKeyColumn", 
                   "primaryKeyElement", "primaryKeyDefinition", "singlePrimaryKey", 
                   "compoundKey", "compositeKey", "partitionKeyList", "clusteringKeyList", 
                   "partitionKey", "clusteringKey", "applyBatch", "beginBatch", 
                   "batchType", "alterKeyspace", "replicationList", "replicationListItem", 
                   "durableWrites", "use", "truncate", "createIndex", "indexName", 
                   "indexColumnSpec", "indexKeysSpec", "indexEntriesSSpec", 
                   "indexFullSpec", "deleteStatement", "deleteColumnList", 
                   "deleteColumnItem", "update", "ifSpec", "ifConditionList", 
                   "ifCondition", "assignments", "assignmentElement", "assignmentSet", 
                   "assignmentMap", "assignmentMapExpression", "assignmentList", 
                   "assignmentTuple", "insert", "usingTtlTimestamp", "timestamp", 
                   "ttl", "usingTimestampSpec", "ifNotExist", "ifExist", 
                   "insertValuesSpec", "insertColumnSpec", "columnList", 
                   "expressionList", "expression", "select", "allowFilteringSpec", 
                   "limitSpec", "fromSpec", "fromSpecElement", "orderSpec", 
                   "orderSpecElement", "whereSpec", "distinctSpec", "selectElements", 
                   "selectElement", "relationElements", "relationElement", 
                   "relalationContains", "relalationContainsKey", "functionCall", 
                   "functionArgs", "constant", "decimalLiteral", "floatLiteral", 
                   "stringLiteral", "booleanLiteral", "hexadecimalLiteral", 
                   "keyspace", "table", "column", "dataType", "dataTypeName", 
                   "dataTypeDefinition", "orderDirection", "role", "trigger", 
                   "triggerClass", "materializedView", "type", "aggregate", 
                   "functionStatement", "language", "user", "password", 
                   "hashKey", "param", "paramName", "kwAdd", "kwAggregate", 
                   "kwAll", "kwAllPermissions", "kwAllow", "kwAlter", "kwAnd", 
                   "kwApply", "kwAs", "kwAsc", "kwAuthorize", "kwBatch", 
                   "kwBegin", "kwBy", "kwCalled", "kwClustering", "kwCompact", 
                   "kwContains", "kwCreate", "kwDelete", "kwDesc", "kwDescibe", 
                   "kwDistinct", "kwDrop", "kwDurableWrites", "kwEntries", 
                   "kwExecute", "kwExists", "kwFiltering", "kwFinalfunc", 
                   "kwFrom", "kwFull", "kwFunction", "kwFunctions", "kwGrant", 
                   "kwIf", "kwIn", "kwIndex", "kwInitcond", "kwInput", "kwInsert", 
                   "kwInto", "kwIs", "kwJson", "kwKey", "kwKeys", "kwKeyspace", 
                   "kwKeyspaces", "kwLanguage", "kwLimit", "kwList", "kwLogged", 
                   "kwLogin", "kwMaterialized", "kwModify", "kwNosuperuser", 
                   "kwNorecursive", "kwNot", "kwNull", "kwOf", "kwOn", "kwOptions", 
                   "kwOr", "kwOrder", "kwPassword", "kwPrimary", "kwRename", 
                   "kwReplace", "kwReplication", "kwReturns", "kwRole", 
                   "kwInternal", "kwLdap", "kwScheme", "kwRoles", "kwSelect", 
                   "kwSet", "kwSfunc", "kwStorage", "kwStype", "kwSuperuser", 
                   "kwTable", "kwTimestamp", "kwTo", "kwTrigger", "kwTruncate", 
                   "kwTtl", "kwType", "kwUnlogged", "kwUpdate", "kwUse", 
                   "kwUser", "kwUsers", "kwUsing", "kwValues", "kwView", 
                   "kwWhere", "kwWith", "kwRevoke", "eof", "syntaxBracketLr", 
                   "syntaxBracketRr", "syntaxBracketLc", "syntaxBracketRc", 
                   "syntaxBracketLa", "syntaxBracketRa", "syntaxBracketLs", 
                   "syntaxBracketRs", "syntaxComma", "syntaxColon", "id" ];

function CqlParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

CqlParser.prototype = Object.create(antlr4.Parser.prototype);
CqlParser.prototype.constructor = CqlParser;

Object.defineProperty(CqlParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

CqlParser.EOF = antlr4.Token.EOF;
CqlParser.LR_BRACKET = 1;
CqlParser.RR_BRACKET = 2;
CqlParser.LC_BRACKET = 3;
CqlParser.RC_BRACKET = 4;
CqlParser.LS_BRACKET = 5;
CqlParser.RS_BRACKET = 6;
CqlParser.COMMA = 7;
CqlParser.SEMI = 8;
CqlParser.COLON = 9;
CqlParser.SPACE = 10;
CqlParser.SPEC_MYSQL_COMMENT = 11;
CqlParser.COMMENT_INPUT = 12;
CqlParser.LINE_COMMENT = 13;
CqlParser.DOT = 14;
CqlParser.STAR = 15;
CqlParser.DIVIDE = 16;
CqlParser.MODULE = 17;
CqlParser.PLUS = 18;
CqlParser.MINUSMINUS = 19;
CqlParser.MINUS = 20;
CqlParser.DQUOTE = 21;
CqlParser.SQUOTE = 22;
CqlParser.K_ADD = 23;
CqlParser.K_AGGREGATE = 24;
CqlParser.K_ALL = 25;
CqlParser.K_ALLOW = 26;
CqlParser.K_ALTER = 27;
CqlParser.K_AND = 28;
CqlParser.K_ANY = 29;
CqlParser.K_APPLY = 30;
CqlParser.K_AS = 31;
CqlParser.K_ASC = 32;
CqlParser.K_AUTHORIZE = 33;
CqlParser.K_BATCH = 34;
CqlParser.K_BEGIN = 35;
CqlParser.K_BY = 36;
CqlParser.K_CALLED = 37;
CqlParser.K_CLUSTERING = 38;
CqlParser.K_COLUMNFAMILY = 39;
CqlParser.K_COMPACT = 40;
CqlParser.K_CONSISTENCY = 41;
CqlParser.K_CONTAINS = 42;
CqlParser.K_CREATE = 43;
CqlParser.K_CUSTOM = 44;
CqlParser.K_DELETE = 45;
CqlParser.K_DESC = 46;
CqlParser.K_DESCRIBE = 47;
CqlParser.K_DISTINCT = 48;
CqlParser.K_DROP = 49;
CqlParser.K_DURABLE_WRITES = 50;
CqlParser.K_EACH_QUORUM = 51;
CqlParser.K_ENTRIES = 52;
CqlParser.K_EXECUTE = 53;
CqlParser.K_EXISTS = 54;
CqlParser.K_FALSE = 55;
CqlParser.K_FILTERING = 56;
CqlParser.K_FINALFUNC = 57;
CqlParser.K_FROM = 58;
CqlParser.K_FULL = 59;
CqlParser.K_FUNCTION = 60;
CqlParser.K_FUNCTIONS = 61;
CqlParser.K_GRANT = 62;
CqlParser.K_IF = 63;
CqlParser.K_IN = 64;
CqlParser.K_INDEX = 65;
CqlParser.K_INFINITY = 66;
CqlParser.K_INITCOND = 67;
CqlParser.K_INPUT = 68;
CqlParser.K_INSERT = 69;
CqlParser.K_INTO = 70;
CqlParser.K_IS = 71;
CqlParser.K_JSON = 72;
CqlParser.K_KEY = 73;
CqlParser.K_KEYS = 74;
CqlParser.K_KEYSPACE = 75;
CqlParser.K_KEYSPACES = 76;
CqlParser.K_LANGUAGE = 77;
CqlParser.K_LEVEL = 78;
CqlParser.K_LIMIT = 79;
CqlParser.K_LOCAL_ONE = 80;
CqlParser.K_LOCAL_QUORUM = 81;
CqlParser.K_LOGGED = 82;
CqlParser.K_LOGIN = 83;
CqlParser.K_MATERIALIZED = 84;
CqlParser.K_MODIFY = 85;
CqlParser.K_NAN = 86;
CqlParser.K_NORECURSIVE = 87;
CqlParser.K_NOSUPERUSER = 88;
CqlParser.K_NOT = 89;
CqlParser.K_NULL = 90;
CqlParser.K_OF = 91;
CqlParser.K_ON = 92;
CqlParser.K_ONE = 93;
CqlParser.K_OPTIONS = 94;
CqlParser.K_OR = 95;
CqlParser.K_ORDER = 96;
CqlParser.K_PARTITION = 97;
CqlParser.K_PASSWORD = 98;
CqlParser.K_PER = 99;
CqlParser.K_PERMISSION = 100;
CqlParser.K_PERMISSIONS = 101;
CqlParser.K_PRIMARY = 102;
CqlParser.K_QUORUM = 103;
CqlParser.K_RENAME = 104;
CqlParser.K_REPLACE = 105;
CqlParser.K_REPLICATION = 106;
CqlParser.K_RETURNS = 107;
CqlParser.K_REVOKE = 108;
CqlParser.K_ROLE = 109;
CqlParser.K_ROLES = 110;
CqlParser.K_INTERNAL = 111;
CqlParser.K_LDAP = 112;
CqlParser.K_SCHEME = 113;
CqlParser.K_SCHEMA = 114;
CqlParser.K_SELECT = 115;
CqlParser.K_SET = 116;
CqlParser.K_SFUNC = 117;
CqlParser.K_STATIC = 118;
CqlParser.K_STORAGE = 119;
CqlParser.K_STYPE = 120;
CqlParser.K_SUPERUSER = 121;
CqlParser.K_TABLE = 122;
CqlParser.K_THREE = 123;
CqlParser.K_TIMESTAMP = 124;
CqlParser.K_TO = 125;
CqlParser.K_TOKEN = 126;
CqlParser.K_TRIGGER = 127;
CqlParser.K_TRUE = 128;
CqlParser.K_TRUNCATE = 129;
CqlParser.K_TTL = 130;
CqlParser.K_TWO = 131;
CqlParser.K_TYPE = 132;
CqlParser.K_UNLOGGED = 133;
CqlParser.K_UPDATE = 134;
CqlParser.K_USE = 135;
CqlParser.K_USER = 136;
CqlParser.K_USING = 137;
CqlParser.K_UUID = 138;
CqlParser.K_VALUES = 139;
CqlParser.K_VIEW = 140;
CqlParser.K_WHERE = 141;
CqlParser.K_WITH = 142;
CqlParser.K_WRITETIME = 143;
CqlParser.K_ASCII = 144;
CqlParser.K_BIGINT = 145;
CqlParser.K_BLOB = 146;
CqlParser.K_BOOLEAN = 147;
CqlParser.K_COUNTER = 148;
CqlParser.K_DATE = 149;
CqlParser.K_DECIMAL = 150;
CqlParser.K_DOUBLE = 151;
CqlParser.K_FLOAT = 152;
CqlParser.K_FROZEN = 153;
CqlParser.K_INET = 154;
CqlParser.K_INT = 155;
CqlParser.K_LIST = 156;
CqlParser.K_MAP = 157;
CqlParser.K_SMALLINT = 158;
CqlParser.K_TEXT = 159;
CqlParser.K_TIMEUUID = 160;
CqlParser.K_TIME = 161;
CqlParser.K_TINYINT = 162;
CqlParser.K_TUPLE = 163;
CqlParser.K_VARCHAR = 164;
CqlParser.K_VARINT = 165;
CqlParser.CODE_BLOCK = 166;
CqlParser.STRING_LITERAL = 167;
CqlParser.DECIMAL_LITERAL = 168;
CqlParser.FLOAT_LITERAL = 169;
CqlParser.HEXADECIMAL_LITERAL = 170;
CqlParser.REAL_LITERAL = 171;
CqlParser.OBJECT_NAME = 172;
CqlParser.UUID = 173;
CqlParser.OPERATOR_EQ = 174;
CqlParser.OPERATOR_LT = 175;
CqlParser.OPERATOR_GT = 176;
CqlParser.OPERATOR_LTE = 177;
CqlParser.OPERATOR_GTE = 178;
CqlParser.K_USERS = 179;

CqlParser.RULE_root = 0;
CqlParser.RULE_cqls = 1;
CqlParser.RULE_statementSeparator = 2;
CqlParser.RULE_empty = 3;
CqlParser.RULE_cql = 4;
CqlParser.RULE_revoke = 5;
CqlParser.RULE_listUsers = 6;
CqlParser.RULE_listRoles = 7;
CqlParser.RULE_listPermissions = 8;
CqlParser.RULE_grant = 9;
CqlParser.RULE_priviledge = 10;
CqlParser.RULE_resource = 11;
CqlParser.RULE_createUser = 12;
CqlParser.RULE_createRole = 13;
CqlParser.RULE_createType = 14;
CqlParser.RULE_typeMemberColumnList = 15;
CqlParser.RULE_createTrigger = 16;
CqlParser.RULE_createMaterializedView = 17;
CqlParser.RULE_materializedViewWhere = 18;
CqlParser.RULE_columnNotNullList = 19;
CqlParser.RULE_columnNotNull = 20;
CqlParser.RULE_materializedViewOptions = 21;
CqlParser.RULE_createKeyspace = 22;
CqlParser.RULE_createFunction = 23;
CqlParser.RULE_codeBlock = 24;
CqlParser.RULE_paramList = 25;
CqlParser.RULE_returnMode = 26;
CqlParser.RULE_createAggregate = 27;
CqlParser.RULE_initCondDefinition = 28;
CqlParser.RULE_initCondHash = 29;
CqlParser.RULE_initCondHashItem = 30;
CqlParser.RULE_initCondListNested = 31;
CqlParser.RULE_initCondList = 32;
CqlParser.RULE_orReplace = 33;
CqlParser.RULE_alterUser = 34;
CqlParser.RULE_userPassword = 35;
CqlParser.RULE_userSuperUser = 36;
CqlParser.RULE_alterType = 37;
CqlParser.RULE_alterTypeOperation = 38;
CqlParser.RULE_alterTypeRename = 39;
CqlParser.RULE_alterTypeRenameList = 40;
CqlParser.RULE_alterTypeRenameItem = 41;
CqlParser.RULE_alterTypeAdd = 42;
CqlParser.RULE_alterTypeAlterType = 43;
CqlParser.RULE_alterTable = 44;
CqlParser.RULE_alterTableOperation = 45;
CqlParser.RULE_alterTableWith = 46;
CqlParser.RULE_alterTableRename = 47;
CqlParser.RULE_alterTableDropCompactStorage = 48;
CqlParser.RULE_alterTableDropColumns = 49;
CqlParser.RULE_alterTableDropColumnList = 50;
CqlParser.RULE_alterTableAdd = 51;
CqlParser.RULE_alterTableColumnDefinition = 52;
CqlParser.RULE_alterRole = 53;
CqlParser.RULE_roleWith = 54;
CqlParser.RULE_roleWithOptions = 55;
CqlParser.RULE_alterMaterializedView = 56;
CqlParser.RULE_dropUser = 57;
CqlParser.RULE_dropType = 58;
CqlParser.RULE_dropMaterializedView = 59;
CqlParser.RULE_dropAggregate = 60;
CqlParser.RULE_dropFunction = 61;
CqlParser.RULE_dropTrigger = 62;
CqlParser.RULE_dropRole = 63;
CqlParser.RULE_dropTable = 64;
CqlParser.RULE_dropKeyspace = 65;
CqlParser.RULE_dropIndex = 66;
CqlParser.RULE_createTable = 67;
CqlParser.RULE_withElement = 68;
CqlParser.RULE_clusteringOrderColumns = 69;
CqlParser.RULE_clusteringOrder = 70;
CqlParser.RULE_tableOptions = 71;
CqlParser.RULE_tableOptionItem = 72;
CqlParser.RULE_tableOptionName = 73;
CqlParser.RULE_tableOptionValue = 74;
CqlParser.RULE_optionHash = 75;
CqlParser.RULE_optionHashItem = 76;
CqlParser.RULE_optionHashKey = 77;
CqlParser.RULE_optionHashValue = 78;
CqlParser.RULE_columnDefinitionList = 79;
CqlParser.RULE_columnDefinition = 80;
CqlParser.RULE_primaryKeyColumn = 81;
CqlParser.RULE_primaryKeyElement = 82;
CqlParser.RULE_primaryKeyDefinition = 83;
CqlParser.RULE_singlePrimaryKey = 84;
CqlParser.RULE_compoundKey = 85;
CqlParser.RULE_compositeKey = 86;
CqlParser.RULE_partitionKeyList = 87;
CqlParser.RULE_clusteringKeyList = 88;
CqlParser.RULE_partitionKey = 89;
CqlParser.RULE_clusteringKey = 90;
CqlParser.RULE_applyBatch = 91;
CqlParser.RULE_beginBatch = 92;
CqlParser.RULE_batchType = 93;
CqlParser.RULE_alterKeyspace = 94;
CqlParser.RULE_replicationList = 95;
CqlParser.RULE_replicationListItem = 96;
CqlParser.RULE_durableWrites = 97;
CqlParser.RULE_use = 98;
CqlParser.RULE_truncate = 99;
CqlParser.RULE_createIndex = 100;
CqlParser.RULE_indexName = 101;
CqlParser.RULE_indexColumnSpec = 102;
CqlParser.RULE_indexKeysSpec = 103;
CqlParser.RULE_indexEntriesSSpec = 104;
CqlParser.RULE_indexFullSpec = 105;
CqlParser.RULE_deleteStatement = 106;
CqlParser.RULE_deleteColumnList = 107;
CqlParser.RULE_deleteColumnItem = 108;
CqlParser.RULE_update = 109;
CqlParser.RULE_ifSpec = 110;
CqlParser.RULE_ifConditionList = 111;
CqlParser.RULE_ifCondition = 112;
CqlParser.RULE_assignments = 113;
CqlParser.RULE_assignmentElement = 114;
CqlParser.RULE_assignmentSet = 115;
CqlParser.RULE_assignmentMap = 116;
CqlParser.RULE_assignmentMapExpression = 117;
CqlParser.RULE_assignmentList = 118;
CqlParser.RULE_assignmentTuple = 119;
CqlParser.RULE_insert = 120;
CqlParser.RULE_usingTtlTimestamp = 121;
CqlParser.RULE_timestamp = 122;
CqlParser.RULE_ttl = 123;
CqlParser.RULE_usingTimestampSpec = 124;
CqlParser.RULE_ifNotExist = 125;
CqlParser.RULE_ifExist = 126;
CqlParser.RULE_insertValuesSpec = 127;
CqlParser.RULE_insertColumnSpec = 128;
CqlParser.RULE_columnList = 129;
CqlParser.RULE_expressionList = 130;
CqlParser.RULE_expression = 131;
CqlParser.RULE_select = 132;
CqlParser.RULE_allowFilteringSpec = 133;
CqlParser.RULE_limitSpec = 134;
CqlParser.RULE_fromSpec = 135;
CqlParser.RULE_fromSpecElement = 136;
CqlParser.RULE_orderSpec = 137;
CqlParser.RULE_orderSpecElement = 138;
CqlParser.RULE_whereSpec = 139;
CqlParser.RULE_distinctSpec = 140;
CqlParser.RULE_selectElements = 141;
CqlParser.RULE_selectElement = 142;
CqlParser.RULE_relationElements = 143;
CqlParser.RULE_relationElement = 144;
CqlParser.RULE_relalationContains = 145;
CqlParser.RULE_relalationContainsKey = 146;
CqlParser.RULE_functionCall = 147;
CqlParser.RULE_functionArgs = 148;
CqlParser.RULE_constant = 149;
CqlParser.RULE_decimalLiteral = 150;
CqlParser.RULE_floatLiteral = 151;
CqlParser.RULE_stringLiteral = 152;
CqlParser.RULE_booleanLiteral = 153;
CqlParser.RULE_hexadecimalLiteral = 154;
CqlParser.RULE_keyspace = 155;
CqlParser.RULE_table = 156;
CqlParser.RULE_column = 157;
CqlParser.RULE_dataType = 158;
CqlParser.RULE_dataTypeName = 159;
CqlParser.RULE_dataTypeDefinition = 160;
CqlParser.RULE_orderDirection = 161;
CqlParser.RULE_role = 162;
CqlParser.RULE_trigger = 163;
CqlParser.RULE_triggerClass = 164;
CqlParser.RULE_materializedView = 165;
CqlParser.RULE_type = 166;
CqlParser.RULE_aggregate = 167;
CqlParser.RULE_functionStatement = 168;
CqlParser.RULE_language = 169;
CqlParser.RULE_user = 170;
CqlParser.RULE_password = 171;
CqlParser.RULE_hashKey = 172;
CqlParser.RULE_param = 173;
CqlParser.RULE_paramName = 174;
CqlParser.RULE_kwAdd = 175;
CqlParser.RULE_kwAggregate = 176;
CqlParser.RULE_kwAll = 177;
CqlParser.RULE_kwAllPermissions = 178;
CqlParser.RULE_kwAllow = 179;
CqlParser.RULE_kwAlter = 180;
CqlParser.RULE_kwAnd = 181;
CqlParser.RULE_kwApply = 182;
CqlParser.RULE_kwAs = 183;
CqlParser.RULE_kwAsc = 184;
CqlParser.RULE_kwAuthorize = 185;
CqlParser.RULE_kwBatch = 186;
CqlParser.RULE_kwBegin = 187;
CqlParser.RULE_kwBy = 188;
CqlParser.RULE_kwCalled = 189;
CqlParser.RULE_kwClustering = 190;
CqlParser.RULE_kwCompact = 191;
CqlParser.RULE_kwContains = 192;
CqlParser.RULE_kwCreate = 193;
CqlParser.RULE_kwDelete = 194;
CqlParser.RULE_kwDesc = 195;
CqlParser.RULE_kwDescibe = 196;
CqlParser.RULE_kwDistinct = 197;
CqlParser.RULE_kwDrop = 198;
CqlParser.RULE_kwDurableWrites = 199;
CqlParser.RULE_kwEntries = 200;
CqlParser.RULE_kwExecute = 201;
CqlParser.RULE_kwExists = 202;
CqlParser.RULE_kwFiltering = 203;
CqlParser.RULE_kwFinalfunc = 204;
CqlParser.RULE_kwFrom = 205;
CqlParser.RULE_kwFull = 206;
CqlParser.RULE_kwFunction = 207;
CqlParser.RULE_kwFunctions = 208;
CqlParser.RULE_kwGrant = 209;
CqlParser.RULE_kwIf = 210;
CqlParser.RULE_kwIn = 211;
CqlParser.RULE_kwIndex = 212;
CqlParser.RULE_kwInitcond = 213;
CqlParser.RULE_kwInput = 214;
CqlParser.RULE_kwInsert = 215;
CqlParser.RULE_kwInto = 216;
CqlParser.RULE_kwIs = 217;
CqlParser.RULE_kwJson = 218;
CqlParser.RULE_kwKey = 219;
CqlParser.RULE_kwKeys = 220;
CqlParser.RULE_kwKeyspace = 221;
CqlParser.RULE_kwKeyspaces = 222;
CqlParser.RULE_kwLanguage = 223;
CqlParser.RULE_kwLimit = 224;
CqlParser.RULE_kwList = 225;
CqlParser.RULE_kwLogged = 226;
CqlParser.RULE_kwLogin = 227;
CqlParser.RULE_kwMaterialized = 228;
CqlParser.RULE_kwModify = 229;
CqlParser.RULE_kwNosuperuser = 230;
CqlParser.RULE_kwNorecursive = 231;
CqlParser.RULE_kwNot = 232;
CqlParser.RULE_kwNull = 233;
CqlParser.RULE_kwOf = 234;
CqlParser.RULE_kwOn = 235;
CqlParser.RULE_kwOptions = 236;
CqlParser.RULE_kwOr = 237;
CqlParser.RULE_kwOrder = 238;
CqlParser.RULE_kwPassword = 239;
CqlParser.RULE_kwPrimary = 240;
CqlParser.RULE_kwRename = 241;
CqlParser.RULE_kwReplace = 242;
CqlParser.RULE_kwReplication = 243;
CqlParser.RULE_kwReturns = 244;
CqlParser.RULE_kwRole = 245;
CqlParser.RULE_kwInternal = 246;
CqlParser.RULE_kwLdap = 247;
CqlParser.RULE_kwScheme = 248;
CqlParser.RULE_kwRoles = 249;
CqlParser.RULE_kwSelect = 250;
CqlParser.RULE_kwSet = 251;
CqlParser.RULE_kwSfunc = 252;
CqlParser.RULE_kwStorage = 253;
CqlParser.RULE_kwStype = 254;
CqlParser.RULE_kwSuperuser = 255;
CqlParser.RULE_kwTable = 256;
CqlParser.RULE_kwTimestamp = 257;
CqlParser.RULE_kwTo = 258;
CqlParser.RULE_kwTrigger = 259;
CqlParser.RULE_kwTruncate = 260;
CqlParser.RULE_kwTtl = 261;
CqlParser.RULE_kwType = 262;
CqlParser.RULE_kwUnlogged = 263;
CqlParser.RULE_kwUpdate = 264;
CqlParser.RULE_kwUse = 265;
CqlParser.RULE_kwUser = 266;
CqlParser.RULE_kwUsers = 267;
CqlParser.RULE_kwUsing = 268;
CqlParser.RULE_kwValues = 269;
CqlParser.RULE_kwView = 270;
CqlParser.RULE_kwWhere = 271;
CqlParser.RULE_kwWith = 272;
CqlParser.RULE_kwRevoke = 273;
CqlParser.RULE_eof = 274;
CqlParser.RULE_syntaxBracketLr = 275;
CqlParser.RULE_syntaxBracketRr = 276;
CqlParser.RULE_syntaxBracketLc = 277;
CqlParser.RULE_syntaxBracketRc = 278;
CqlParser.RULE_syntaxBracketLa = 279;
CqlParser.RULE_syntaxBracketRa = 280;
CqlParser.RULE_syntaxBracketLs = 281;
CqlParser.RULE_syntaxBracketRs = 282;
CqlParser.RULE_syntaxComma = 283;
CqlParser.RULE_syntaxColon = 284;
CqlParser.RULE_id = 285;


function RootContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_root;
    return this;
}

RootContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RootContext.prototype.constructor = RootContext;

RootContext.prototype.eof = function() {
    return this.getTypedRuleContext(EofContext,0);
};

RootContext.prototype.cqls = function() {
    return this.getTypedRuleContext(CqlsContext,0);
};

RootContext.prototype.MINUSMINUS = function() {
    return this.getToken(CqlParser.MINUSMINUS, 0);
};

RootContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterRoot(this);
	}
};

RootContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitRoot(this);
	}
};

RootContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitRoot(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.RootContext = RootContext;

CqlParser.prototype.root = function() {

    var localctx = new RootContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CqlParser.RULE_root);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 573;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 8)) & ~0x1f) == 0 && ((1 << (_la - 8)) & ((1 << (CqlParser.SEMI - 8)) | (1 << (CqlParser.K_ALTER - 8)) | (1 << (CqlParser.K_APPLY - 8)) | (1 << (CqlParser.K_BEGIN - 8)))) !== 0) || ((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (CqlParser.K_CREATE - 43)) | (1 << (CqlParser.K_DELETE - 43)) | (1 << (CqlParser.K_DROP - 43)) | (1 << (CqlParser.K_GRANT - 43)) | (1 << (CqlParser.K_INSERT - 43)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (CqlParser.K_REVOKE - 108)) | (1 << (CqlParser.K_SELECT - 108)) | (1 << (CqlParser.K_TRUNCATE - 108)) | (1 << (CqlParser.K_UPDATE - 108)) | (1 << (CqlParser.K_USE - 108)))) !== 0) || _la===CqlParser.K_LIST) {
            this.state = 572;
            this.cqls();
        }

        this.state = 576;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.MINUSMINUS) {
            this.state = 575;
            this.match(CqlParser.MINUSMINUS);
        }

        this.state = 578;
        this.eof();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CqlsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_cqls;
    return this;
}

CqlsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CqlsContext.prototype.constructor = CqlsContext;

CqlsContext.prototype.cql = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CqlContext);
    } else {
        return this.getTypedRuleContext(CqlContext,i);
    }
};

CqlsContext.prototype.empty = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EmptyContext);
    } else {
        return this.getTypedRuleContext(EmptyContext,i);
    }
};

CqlsContext.prototype.statementSeparator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementSeparatorContext);
    } else {
        return this.getTypedRuleContext(StatementSeparatorContext,i);
    }
};

CqlsContext.prototype.MINUSMINUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.MINUSMINUS);
    } else {
        return this.getToken(CqlParser.MINUSMINUS, i);
    }
};


CqlsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCqls(this);
	}
};

CqlsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCqls(this);
	}
};

CqlsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCqls(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CqlsContext = CqlsContext;

CqlParser.prototype.cqls = function() {

    var localctx = new CqlsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, CqlParser.RULE_cqls);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 589;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 587;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case CqlParser.K_ALTER:
                case CqlParser.K_APPLY:
                case CqlParser.K_BEGIN:
                case CqlParser.K_CREATE:
                case CqlParser.K_DELETE:
                case CqlParser.K_DROP:
                case CqlParser.K_GRANT:
                case CqlParser.K_INSERT:
                case CqlParser.K_REVOKE:
                case CqlParser.K_SELECT:
                case CqlParser.K_TRUNCATE:
                case CqlParser.K_UPDATE:
                case CqlParser.K_USE:
                case CqlParser.K_LIST:
                    this.state = 580;
                    this.cql();
                    this.state = 582;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CqlParser.MINUSMINUS) {
                        this.state = 581;
                        this.match(CqlParser.MINUSMINUS);
                    }

                    this.state = 584;
                    this.statementSeparator();
                    break;
                case CqlParser.SEMI:
                    this.state = 586;
                    this.empty();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 591;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
        }

        this.state = 600;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CqlParser.K_ALTER:
        case CqlParser.K_APPLY:
        case CqlParser.K_BEGIN:
        case CqlParser.K_CREATE:
        case CqlParser.K_DELETE:
        case CqlParser.K_DROP:
        case CqlParser.K_GRANT:
        case CqlParser.K_INSERT:
        case CqlParser.K_REVOKE:
        case CqlParser.K_SELECT:
        case CqlParser.K_TRUNCATE:
        case CqlParser.K_UPDATE:
        case CqlParser.K_USE:
        case CqlParser.K_LIST:
            this.state = 592;
            this.cql();
            this.state = 597;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
            if(la_===1) {
                this.state = 594;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CqlParser.MINUSMINUS) {
                    this.state = 593;
                    this.match(CqlParser.MINUSMINUS);
                }

                this.state = 596;
                this.statementSeparator();

            }
            break;
        case CqlParser.SEMI:
            this.state = 599;
            this.empty();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementSeparatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_statementSeparator;
    return this;
}

StatementSeparatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementSeparatorContext.prototype.constructor = StatementSeparatorContext;

StatementSeparatorContext.prototype.SEMI = function() {
    return this.getToken(CqlParser.SEMI, 0);
};

StatementSeparatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterStatementSeparator(this);
	}
};

StatementSeparatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitStatementSeparator(this);
	}
};

StatementSeparatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitStatementSeparator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.StatementSeparatorContext = StatementSeparatorContext;

CqlParser.prototype.statementSeparator = function() {

    var localctx = new StatementSeparatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, CqlParser.RULE_statementSeparator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 602;
        this.match(CqlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EmptyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_empty;
    return this;
}

EmptyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyContext.prototype.constructor = EmptyContext;

EmptyContext.prototype.statementSeparator = function() {
    return this.getTypedRuleContext(StatementSeparatorContext,0);
};

EmptyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterEmpty(this);
	}
};

EmptyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitEmpty(this);
	}
};

EmptyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitEmpty(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.EmptyContext = EmptyContext;

CqlParser.prototype.empty = function() {

    var localctx = new EmptyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CqlParser.RULE_empty);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 604;
        this.statementSeparator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CqlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_cql;
    return this;
}

CqlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CqlContext.prototype.constructor = CqlContext;

CqlContext.prototype.alterKeyspace = function() {
    return this.getTypedRuleContext(AlterKeyspaceContext,0);
};

CqlContext.prototype.alterMaterializedView = function() {
    return this.getTypedRuleContext(AlterMaterializedViewContext,0);
};

CqlContext.prototype.alterRole = function() {
    return this.getTypedRuleContext(AlterRoleContext,0);
};

CqlContext.prototype.alterTable = function() {
    return this.getTypedRuleContext(AlterTableContext,0);
};

CqlContext.prototype.alterType = function() {
    return this.getTypedRuleContext(AlterTypeContext,0);
};

CqlContext.prototype.alterUser = function() {
    return this.getTypedRuleContext(AlterUserContext,0);
};

CqlContext.prototype.applyBatch = function() {
    return this.getTypedRuleContext(ApplyBatchContext,0);
};

CqlContext.prototype.createAggregate = function() {
    return this.getTypedRuleContext(CreateAggregateContext,0);
};

CqlContext.prototype.createFunction = function() {
    return this.getTypedRuleContext(CreateFunctionContext,0);
};

CqlContext.prototype.createIndex = function() {
    return this.getTypedRuleContext(CreateIndexContext,0);
};

CqlContext.prototype.createKeyspace = function() {
    return this.getTypedRuleContext(CreateKeyspaceContext,0);
};

CqlContext.prototype.createMaterializedView = function() {
    return this.getTypedRuleContext(CreateMaterializedViewContext,0);
};

CqlContext.prototype.createRole = function() {
    return this.getTypedRuleContext(CreateRoleContext,0);
};

CqlContext.prototype.createTable = function() {
    return this.getTypedRuleContext(CreateTableContext,0);
};

CqlContext.prototype.createTrigger = function() {
    return this.getTypedRuleContext(CreateTriggerContext,0);
};

CqlContext.prototype.createType = function() {
    return this.getTypedRuleContext(CreateTypeContext,0);
};

CqlContext.prototype.createUser = function() {
    return this.getTypedRuleContext(CreateUserContext,0);
};

CqlContext.prototype.deleteStatement = function() {
    return this.getTypedRuleContext(DeleteStatementContext,0);
};

CqlContext.prototype.dropAggregate = function() {
    return this.getTypedRuleContext(DropAggregateContext,0);
};

CqlContext.prototype.dropFunction = function() {
    return this.getTypedRuleContext(DropFunctionContext,0);
};

CqlContext.prototype.dropIndex = function() {
    return this.getTypedRuleContext(DropIndexContext,0);
};

CqlContext.prototype.dropKeyspace = function() {
    return this.getTypedRuleContext(DropKeyspaceContext,0);
};

CqlContext.prototype.dropMaterializedView = function() {
    return this.getTypedRuleContext(DropMaterializedViewContext,0);
};

CqlContext.prototype.dropRole = function() {
    return this.getTypedRuleContext(DropRoleContext,0);
};

CqlContext.prototype.dropTable = function() {
    return this.getTypedRuleContext(DropTableContext,0);
};

CqlContext.prototype.dropTrigger = function() {
    return this.getTypedRuleContext(DropTriggerContext,0);
};

CqlContext.prototype.dropType = function() {
    return this.getTypedRuleContext(DropTypeContext,0);
};

CqlContext.prototype.dropUser = function() {
    return this.getTypedRuleContext(DropUserContext,0);
};

CqlContext.prototype.grant = function() {
    return this.getTypedRuleContext(GrantContext,0);
};

CqlContext.prototype.insert = function() {
    return this.getTypedRuleContext(InsertContext,0);
};

CqlContext.prototype.listPermissions = function() {
    return this.getTypedRuleContext(ListPermissionsContext,0);
};

CqlContext.prototype.listRoles = function() {
    return this.getTypedRuleContext(ListRolesContext,0);
};

CqlContext.prototype.revoke = function() {
    return this.getTypedRuleContext(RevokeContext,0);
};

CqlContext.prototype.select = function() {
    return this.getTypedRuleContext(SelectContext,0);
};

CqlContext.prototype.truncate = function() {
    return this.getTypedRuleContext(TruncateContext,0);
};

CqlContext.prototype.update = function() {
    return this.getTypedRuleContext(UpdateContext,0);
};

CqlContext.prototype.use = function() {
    return this.getTypedRuleContext(UseContext,0);
};

CqlContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCql(this);
	}
};

CqlContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCql(this);
	}
};

CqlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCql(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CqlContext = CqlContext;

CqlParser.prototype.cql = function() {

    var localctx = new CqlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, CqlParser.RULE_cql);
    try {
        this.state = 643;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 606;
            this.alterKeyspace();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 607;
            this.alterMaterializedView();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 608;
            this.alterRole();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 609;
            this.alterTable();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 610;
            this.alterType();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 611;
            this.alterUser();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 612;
            this.applyBatch();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 613;
            this.createAggregate();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 614;
            this.createFunction();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 615;
            this.createIndex();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 616;
            this.createKeyspace();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 617;
            this.createMaterializedView();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 618;
            this.createRole();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 619;
            this.createTable();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 620;
            this.createTrigger();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 621;
            this.createType();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 622;
            this.createUser();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 623;
            this.deleteStatement();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 624;
            this.dropAggregate();
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 625;
            this.dropFunction();
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 626;
            this.dropIndex();
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 627;
            this.dropKeyspace();
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 628;
            this.dropMaterializedView();
            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 629;
            this.dropRole();
            break;

        case 25:
            this.enterOuterAlt(localctx, 25);
            this.state = 630;
            this.dropTable();
            break;

        case 26:
            this.enterOuterAlt(localctx, 26);
            this.state = 631;
            this.dropTrigger();
            break;

        case 27:
            this.enterOuterAlt(localctx, 27);
            this.state = 632;
            this.dropType();
            break;

        case 28:
            this.enterOuterAlt(localctx, 28);
            this.state = 633;
            this.dropUser();
            break;

        case 29:
            this.enterOuterAlt(localctx, 29);
            this.state = 634;
            this.grant();
            break;

        case 30:
            this.enterOuterAlt(localctx, 30);
            this.state = 635;
            this.insert();
            break;

        case 31:
            this.enterOuterAlt(localctx, 31);
            this.state = 636;
            this.listPermissions();
            break;

        case 32:
            this.enterOuterAlt(localctx, 32);
            this.state = 637;
            this.listRoles();
            break;

        case 33:
            this.enterOuterAlt(localctx, 33);
            this.state = 638;
            this.revoke();
            break;

        case 34:
            this.enterOuterAlt(localctx, 34);
            this.state = 639;
            this.select();
            break;

        case 35:
            this.enterOuterAlt(localctx, 35);
            this.state = 640;
            this.truncate();
            break;

        case 36:
            this.enterOuterAlt(localctx, 36);
            this.state = 641;
            this.update();
            break;

        case 37:
            this.enterOuterAlt(localctx, 37);
            this.state = 642;
            this.use();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RevokeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_revoke;
    return this;
}

RevokeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RevokeContext.prototype.constructor = RevokeContext;

RevokeContext.prototype.kwRevoke = function() {
    return this.getTypedRuleContext(KwRevokeContext,0);
};

RevokeContext.prototype.priviledge = function() {
    return this.getTypedRuleContext(PriviledgeContext,0);
};

RevokeContext.prototype.kwOn = function() {
    return this.getTypedRuleContext(KwOnContext,0);
};

RevokeContext.prototype.resource = function() {
    return this.getTypedRuleContext(ResourceContext,0);
};

RevokeContext.prototype.kwFrom = function() {
    return this.getTypedRuleContext(KwFromContext,0);
};

RevokeContext.prototype.role = function() {
    return this.getTypedRuleContext(RoleContext,0);
};

RevokeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterRevoke(this);
	}
};

RevokeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitRevoke(this);
	}
};

RevokeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitRevoke(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.RevokeContext = RevokeContext;

CqlParser.prototype.revoke = function() {

    var localctx = new RevokeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, CqlParser.RULE_revoke);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 645;
        this.kwRevoke();
        this.state = 646;
        this.priviledge();
        this.state = 647;
        this.kwOn();
        this.state = 648;
        this.resource();
        this.state = 649;
        this.kwFrom();
        this.state = 650;
        this.role();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ListUsersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_listUsers;
    return this;
}

ListUsersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListUsersContext.prototype.constructor = ListUsersContext;

ListUsersContext.prototype.kwList = function() {
    return this.getTypedRuleContext(KwListContext,0);
};

ListUsersContext.prototype.kwUsers = function() {
    return this.getTypedRuleContext(KwUsersContext,0);
};

ListUsersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterListUsers(this);
	}
};

ListUsersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitListUsers(this);
	}
};

ListUsersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitListUsers(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ListUsersContext = ListUsersContext;

CqlParser.prototype.listUsers = function() {

    var localctx = new ListUsersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, CqlParser.RULE_listUsers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 652;
        this.kwList();
        this.state = 653;
        this.kwUsers();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ListRolesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_listRoles;
    return this;
}

ListRolesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListRolesContext.prototype.constructor = ListRolesContext;

ListRolesContext.prototype.kwList = function() {
    return this.getTypedRuleContext(KwListContext,0);
};

ListRolesContext.prototype.kwRoles = function() {
    return this.getTypedRuleContext(KwRolesContext,0);
};

ListRolesContext.prototype.kwOf = function() {
    return this.getTypedRuleContext(KwOfContext,0);
};

ListRolesContext.prototype.role = function() {
    return this.getTypedRuleContext(RoleContext,0);
};

ListRolesContext.prototype.kwNorecursive = function() {
    return this.getTypedRuleContext(KwNorecursiveContext,0);
};

ListRolesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterListRoles(this);
	}
};

ListRolesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitListRoles(this);
	}
};

ListRolesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitListRoles(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ListRolesContext = ListRolesContext;

CqlParser.prototype.listRoles = function() {

    var localctx = new ListRolesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, CqlParser.RULE_listRoles);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 655;
        this.kwList();
        this.state = 656;
        this.kwRoles();
        this.state = 660;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_OF) {
            this.state = 657;
            this.kwOf();
            this.state = 658;
            this.role();
        }

        this.state = 663;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_NORECURSIVE) {
            this.state = 662;
            this.kwNorecursive();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ListPermissionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_listPermissions;
    return this;
}

ListPermissionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListPermissionsContext.prototype.constructor = ListPermissionsContext;

ListPermissionsContext.prototype.kwList = function() {
    return this.getTypedRuleContext(KwListContext,0);
};

ListPermissionsContext.prototype.priviledge = function() {
    return this.getTypedRuleContext(PriviledgeContext,0);
};

ListPermissionsContext.prototype.kwOn = function() {
    return this.getTypedRuleContext(KwOnContext,0);
};

ListPermissionsContext.prototype.resource = function() {
    return this.getTypedRuleContext(ResourceContext,0);
};

ListPermissionsContext.prototype.kwOf = function() {
    return this.getTypedRuleContext(KwOfContext,0);
};

ListPermissionsContext.prototype.role = function() {
    return this.getTypedRuleContext(RoleContext,0);
};

ListPermissionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterListPermissions(this);
	}
};

ListPermissionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitListPermissions(this);
	}
};

ListPermissionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitListPermissions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ListPermissionsContext = ListPermissionsContext;

CqlParser.prototype.listPermissions = function() {

    var localctx = new ListPermissionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, CqlParser.RULE_listPermissions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 665;
        this.kwList();
        this.state = 666;
        this.priviledge();
        this.state = 670;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_ON) {
            this.state = 667;
            this.kwOn();
            this.state = 668;
            this.resource();
        }

        this.state = 675;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_OF) {
            this.state = 672;
            this.kwOf();
            this.state = 673;
            this.role();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GrantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_grant;
    return this;
}

GrantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GrantContext.prototype.constructor = GrantContext;

GrantContext.prototype.kwGrant = function() {
    return this.getTypedRuleContext(KwGrantContext,0);
};

GrantContext.prototype.priviledge = function() {
    return this.getTypedRuleContext(PriviledgeContext,0);
};

GrantContext.prototype.kwOn = function() {
    return this.getTypedRuleContext(KwOnContext,0);
};

GrantContext.prototype.resource = function() {
    return this.getTypedRuleContext(ResourceContext,0);
};

GrantContext.prototype.kwTo = function() {
    return this.getTypedRuleContext(KwToContext,0);
};

GrantContext.prototype.role = function() {
    return this.getTypedRuleContext(RoleContext,0);
};

GrantContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterGrant(this);
	}
};

GrantContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitGrant(this);
	}
};

GrantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitGrant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.GrantContext = GrantContext;

CqlParser.prototype.grant = function() {

    var localctx = new GrantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, CqlParser.RULE_grant);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 677;
        this.kwGrant();
        this.state = 678;
        this.priviledge();
        this.state = 679;
        this.kwOn();
        this.state = 680;
        this.resource();
        this.state = 681;
        this.kwTo();
        this.state = 682;
        this.role();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PriviledgeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_priviledge;
    return this;
}

PriviledgeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PriviledgeContext.prototype.constructor = PriviledgeContext;

PriviledgeContext.prototype.kwAll = function() {
    return this.getTypedRuleContext(KwAllContext,0);
};

PriviledgeContext.prototype.kwAllPermissions = function() {
    return this.getTypedRuleContext(KwAllPermissionsContext,0);
};

PriviledgeContext.prototype.kwAlter = function() {
    return this.getTypedRuleContext(KwAlterContext,0);
};

PriviledgeContext.prototype.kwAuthorize = function() {
    return this.getTypedRuleContext(KwAuthorizeContext,0);
};

PriviledgeContext.prototype.kwDescibe = function() {
    return this.getTypedRuleContext(KwDescibeContext,0);
};

PriviledgeContext.prototype.kwExecute = function() {
    return this.getTypedRuleContext(KwExecuteContext,0);
};

PriviledgeContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

PriviledgeContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

PriviledgeContext.prototype.kwModify = function() {
    return this.getTypedRuleContext(KwModifyContext,0);
};

PriviledgeContext.prototype.kwSelect = function() {
    return this.getTypedRuleContext(KwSelectContext,0);
};

PriviledgeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterPriviledge(this);
	}
};

PriviledgeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitPriviledge(this);
	}
};

PriviledgeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitPriviledge(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.PriviledgeContext = PriviledgeContext;

CqlParser.prototype.priviledge = function() {

    var localctx = new PriviledgeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, CqlParser.RULE_priviledge);
    try {
        this.state = 696;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CqlParser.K_ALL:
            this.enterOuterAlt(localctx, 1);
            this.state = 686;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
            switch(la_) {
            case 1:
                this.state = 684;
                this.kwAll();
                break;

            case 2:
                this.state = 685;
                this.kwAllPermissions();
                break;

            }
            break;
        case CqlParser.K_ALTER:
            this.enterOuterAlt(localctx, 2);
            this.state = 688;
            this.kwAlter();
            break;
        case CqlParser.K_AUTHORIZE:
            this.enterOuterAlt(localctx, 3);
            this.state = 689;
            this.kwAuthorize();
            break;
        case CqlParser.K_DESCRIBE:
            this.enterOuterAlt(localctx, 4);
            this.state = 690;
            this.kwDescibe();
            break;
        case CqlParser.K_EXECUTE:
            this.enterOuterAlt(localctx, 5);
            this.state = 691;
            this.kwExecute();
            break;
        case CqlParser.K_CREATE:
            this.enterOuterAlt(localctx, 6);
            this.state = 692;
            this.kwCreate();
            break;
        case CqlParser.K_DROP:
            this.enterOuterAlt(localctx, 7);
            this.state = 693;
            this.kwDrop();
            break;
        case CqlParser.K_MODIFY:
            this.enterOuterAlt(localctx, 8);
            this.state = 694;
            this.kwModify();
            break;
        case CqlParser.K_SELECT:
            this.enterOuterAlt(localctx, 9);
            this.state = 695;
            this.kwSelect();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ResourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_resource;
    return this;
}

ResourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceContext.prototype.constructor = ResourceContext;

ResourceContext.prototype.kwAll = function() {
    return this.getTypedRuleContext(KwAllContext,0);
};

ResourceContext.prototype.kwFunctions = function() {
    return this.getTypedRuleContext(KwFunctionsContext,0);
};

ResourceContext.prototype.kwIn = function() {
    return this.getTypedRuleContext(KwInContext,0);
};

ResourceContext.prototype.kwKeyspace = function() {
    return this.getTypedRuleContext(KwKeyspaceContext,0);
};

ResourceContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

ResourceContext.prototype.kwFunction = function() {
    return this.getTypedRuleContext(KwFunctionContext,0);
};

ResourceContext.prototype.functionStatement = function() {
    return this.getTypedRuleContext(FunctionStatementContext,0);
};

ResourceContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

ResourceContext.prototype.kwKeyspaces = function() {
    return this.getTypedRuleContext(KwKeyspacesContext,0);
};

ResourceContext.prototype.table = function() {
    return this.getTypedRuleContext(TableContext,0);
};

ResourceContext.prototype.kwTable = function() {
    return this.getTypedRuleContext(KwTableContext,0);
};

ResourceContext.prototype.kwRoles = function() {
    return this.getTypedRuleContext(KwRolesContext,0);
};

ResourceContext.prototype.kwRole = function() {
    return this.getTypedRuleContext(KwRoleContext,0);
};

ResourceContext.prototype.role = function() {
    return this.getTypedRuleContext(RoleContext,0);
};

ResourceContext.prototype.kwScheme = function() {
    return this.getTypedRuleContext(KwSchemeContext,0);
};

ResourceContext.prototype.kwInternal = function() {
    return this.getTypedRuleContext(KwInternalContext,0);
};

ResourceContext.prototype.kwLdap = function() {
    return this.getTypedRuleContext(KwLdapContext,0);
};

ResourceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterResource(this);
	}
};

ResourceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitResource(this);
	}
};

ResourceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitResource(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ResourceContext = ResourceContext;

CqlParser.prototype.resource = function() {

    var localctx = new ResourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, CqlParser.RULE_resource);
    try {
        this.state = 742;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 698;
            this.kwAll();
            this.state = 699;
            this.kwFunctions();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 701;
            this.kwAll();
            this.state = 702;
            this.kwFunctions();
            this.state = 703;
            this.kwIn();
            this.state = 704;
            this.kwKeyspace();
            this.state = 705;
            this.keyspace();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 707;
            this.kwFunction();
            this.state = 711;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
            if(la_===1) {
                this.state = 708;
                this.keyspace();
                this.state = 709;
                this.match(CqlParser.DOT);

            }
            this.state = 713;
            this.functionStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 715;
            this.kwAll();
            this.state = 716;
            this.kwKeyspaces();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 718;
            this.kwKeyspace();
            this.state = 719;
            this.keyspace();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 722;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
            if(la_===1) {
                this.state = 721;
                this.kwTable();

            }
            this.state = 727;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
            if(la_===1) {
                this.state = 724;
                this.keyspace();
                this.state = 725;
                this.match(CqlParser.DOT);

            }
            this.state = 729;
            this.table();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 730;
            this.kwAll();
            this.state = 731;
            this.kwRoles();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 733;
            this.kwRole();
            this.state = 734;
            this.role();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 738;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CqlParser.K_INTERNAL:
                this.state = 736;
                this.kwInternal();
                break;
            case CqlParser.K_LDAP:
                this.state = 737;
                this.kwLdap();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 740;
            this.kwScheme();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateUserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createUser;
    return this;
}

CreateUserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateUserContext.prototype.constructor = CreateUserContext;

CreateUserContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

CreateUserContext.prototype.kwUser = function() {
    return this.getTypedRuleContext(KwUserContext,0);
};

CreateUserContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

CreateUserContext.prototype.kwWith = function() {
    return this.getTypedRuleContext(KwWithContext,0);
};

CreateUserContext.prototype.kwPassword = function() {
    return this.getTypedRuleContext(KwPasswordContext,0);
};

CreateUserContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

CreateUserContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

CreateUserContext.prototype.kwSuperuser = function() {
    return this.getTypedRuleContext(KwSuperuserContext,0);
};

CreateUserContext.prototype.kwNosuperuser = function() {
    return this.getTypedRuleContext(KwNosuperuserContext,0);
};

CreateUserContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateUser(this);
	}
};

CreateUserContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateUser(this);
	}
};

CreateUserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateUser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateUserContext = CreateUserContext;

CqlParser.prototype.createUser = function() {

    var localctx = new CreateUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, CqlParser.RULE_createUser);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 744;
        this.kwCreate();
        this.state = 745;
        this.kwUser();
        this.state = 747;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
        if(la_===1) {
            this.state = 746;
            this.ifNotExist();

        }
        this.state = 749;
        this.user();
        this.state = 750;
        this.kwWith();
        this.state = 751;
        this.kwPassword();
        this.state = 752;
        this.stringLiteral();
        this.state = 755;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case CqlParser.K_SUPERUSER:
        	this.state = 753;
        	this.kwSuperuser();
        	break;
        case CqlParser.K_NOSUPERUSER:
        	this.state = 754;
        	this.kwNosuperuser();
        	break;
        case CqlParser.EOF:
        case CqlParser.SEMI:
        case CqlParser.MINUSMINUS:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateRoleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createRole;
    return this;
}

CreateRoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateRoleContext.prototype.constructor = CreateRoleContext;

CreateRoleContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

CreateRoleContext.prototype.kwRole = function() {
    return this.getTypedRuleContext(KwRoleContext,0);
};

CreateRoleContext.prototype.role = function() {
    return this.getTypedRuleContext(RoleContext,0);
};

CreateRoleContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

CreateRoleContext.prototype.roleWith = function() {
    return this.getTypedRuleContext(RoleWithContext,0);
};

CreateRoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateRole(this);
	}
};

CreateRoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateRole(this);
	}
};

CreateRoleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateRole(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateRoleContext = CreateRoleContext;

CqlParser.prototype.createRole = function() {

    var localctx = new CreateRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, CqlParser.RULE_createRole);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 757;
        this.kwCreate();
        this.state = 758;
        this.kwRole();
        this.state = 760;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
        if(la_===1) {
            this.state = 759;
            this.ifNotExist();

        }
        this.state = 762;
        this.role();
        this.state = 764;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_WITH) {
            this.state = 763;
            this.roleWith();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createType;
    return this;
}

CreateTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTypeContext.prototype.constructor = CreateTypeContext;

CreateTypeContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

CreateTypeContext.prototype.kwType = function() {
    return this.getTypedRuleContext(KwTypeContext,0);
};

CreateTypeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

CreateTypeContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

CreateTypeContext.prototype.typeMemberColumnList = function() {
    return this.getTypedRuleContext(TypeMemberColumnListContext,0);
};

CreateTypeContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

CreateTypeContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

CreateTypeContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

CreateTypeContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

CreateTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateType(this);
	}
};

CreateTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateType(this);
	}
};

CreateTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateTypeContext = CreateTypeContext;

CqlParser.prototype.createType = function() {

    var localctx = new CreateTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, CqlParser.RULE_createType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 766;
        this.kwCreate();
        this.state = 767;
        this.kwType();
        this.state = 769;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        if(la_===1) {
            this.state = 768;
            this.ifNotExist();

        }
        this.state = 774;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        if(la_===1) {
            this.state = 771;
            this.keyspace();
            this.state = 772;
            this.match(CqlParser.DOT);

        }
        this.state = 776;
        this.type();
        this.state = 777;
        this.syntaxBracketLr();
        this.state = 778;
        this.typeMemberColumnList();
        this.state = 779;
        this.syntaxBracketRr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeMemberColumnListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_typeMemberColumnList;
    return this;
}

TypeMemberColumnListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeMemberColumnListContext.prototype.constructor = TypeMemberColumnListContext;

TypeMemberColumnListContext.prototype.column = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnContext);
    } else {
        return this.getTypedRuleContext(ColumnContext,i);
    }
};

TypeMemberColumnListContext.prototype.dataType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DataTypeContext);
    } else {
        return this.getTypedRuleContext(DataTypeContext,i);
    }
};

TypeMemberColumnListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

TypeMemberColumnListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTypeMemberColumnList(this);
	}
};

TypeMemberColumnListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTypeMemberColumnList(this);
	}
};

TypeMemberColumnListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTypeMemberColumnList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TypeMemberColumnListContext = TypeMemberColumnListContext;

CqlParser.prototype.typeMemberColumnList = function() {

    var localctx = new TypeMemberColumnListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, CqlParser.RULE_typeMemberColumnList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 781;
        this.column();
        this.state = 782;
        this.dataType();
        this.state = 789;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 783;
            this.syntaxComma();
            this.state = 784;
            this.column();
            this.state = 785;
            this.dataType();
            this.state = 791;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateTriggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createTrigger;
    return this;
}

CreateTriggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTriggerContext.prototype.constructor = CreateTriggerContext;

CreateTriggerContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

CreateTriggerContext.prototype.kwTrigger = function() {
    return this.getTypedRuleContext(KwTriggerContext,0);
};

CreateTriggerContext.prototype.trigger = function() {
    return this.getTypedRuleContext(TriggerContext,0);
};

CreateTriggerContext.prototype.kwUsing = function() {
    return this.getTypedRuleContext(KwUsingContext,0);
};

CreateTriggerContext.prototype.triggerClass = function() {
    return this.getTypedRuleContext(TriggerClassContext,0);
};

CreateTriggerContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

CreateTriggerContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

CreateTriggerContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

CreateTriggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateTrigger(this);
	}
};

CreateTriggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateTrigger(this);
	}
};

CreateTriggerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateTrigger(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateTriggerContext = CreateTriggerContext;

CqlParser.prototype.createTrigger = function() {

    var localctx = new CreateTriggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, CqlParser.RULE_createTrigger);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 792;
        this.kwCreate();
        this.state = 793;
        this.kwTrigger();
        this.state = 795;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
        if(la_===1) {
            this.state = 794;
            this.ifNotExist();

        }
        this.state = 800;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        if(la_===1) {
            this.state = 797;
            this.keyspace();
            this.state = 798;
            this.match(CqlParser.DOT);

        }
        this.state = 802;
        this.trigger();
        this.state = 803;
        this.kwUsing();
        this.state = 804;
        this.triggerClass();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateMaterializedViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createMaterializedView;
    return this;
}

CreateMaterializedViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateMaterializedViewContext.prototype.constructor = CreateMaterializedViewContext;

CreateMaterializedViewContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

CreateMaterializedViewContext.prototype.kwMaterialized = function() {
    return this.getTypedRuleContext(KwMaterializedContext,0);
};

CreateMaterializedViewContext.prototype.kwView = function() {
    return this.getTypedRuleContext(KwViewContext,0);
};

CreateMaterializedViewContext.prototype.materializedView = function() {
    return this.getTypedRuleContext(MaterializedViewContext,0);
};

CreateMaterializedViewContext.prototype.kwAs = function() {
    return this.getTypedRuleContext(KwAsContext,0);
};

CreateMaterializedViewContext.prototype.kwSelect = function() {
    return this.getTypedRuleContext(KwSelectContext,0);
};

CreateMaterializedViewContext.prototype.columnList = function() {
    return this.getTypedRuleContext(ColumnListContext,0);
};

CreateMaterializedViewContext.prototype.kwFrom = function() {
    return this.getTypedRuleContext(KwFromContext,0);
};

CreateMaterializedViewContext.prototype.table = function() {
    return this.getTypedRuleContext(TableContext,0);
};

CreateMaterializedViewContext.prototype.materializedViewWhere = function() {
    return this.getTypedRuleContext(MaterializedViewWhereContext,0);
};

CreateMaterializedViewContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

CreateMaterializedViewContext.prototype.keyspace = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KeyspaceContext);
    } else {
        return this.getTypedRuleContext(KeyspaceContext,i);
    }
};

CreateMaterializedViewContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.DOT);
    } else {
        return this.getToken(CqlParser.DOT, i);
    }
};


CreateMaterializedViewContext.prototype.primaryKeyElement = function() {
    return this.getTypedRuleContext(PrimaryKeyElementContext,0);
};

CreateMaterializedViewContext.prototype.kwWith = function() {
    return this.getTypedRuleContext(KwWithContext,0);
};

CreateMaterializedViewContext.prototype.materializedViewOptions = function() {
    return this.getTypedRuleContext(MaterializedViewOptionsContext,0);
};

CreateMaterializedViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateMaterializedView(this);
	}
};

CreateMaterializedViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateMaterializedView(this);
	}
};

CreateMaterializedViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateMaterializedView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateMaterializedViewContext = CreateMaterializedViewContext;

CqlParser.prototype.createMaterializedView = function() {

    var localctx = new CreateMaterializedViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, CqlParser.RULE_createMaterializedView);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 806;
        this.kwCreate();
        this.state = 807;
        this.kwMaterialized();
        this.state = 808;
        this.kwView();
        this.state = 810;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
        if(la_===1) {
            this.state = 809;
            this.ifNotExist();

        }
        this.state = 815;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        if(la_===1) {
            this.state = 812;
            this.keyspace();
            this.state = 813;
            this.match(CqlParser.DOT);

        }
        this.state = 817;
        this.materializedView();
        this.state = 818;
        this.kwAs();
        this.state = 819;
        this.kwSelect();
        this.state = 820;
        this.columnList();
        this.state = 821;
        this.kwFrom();
        this.state = 825;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        if(la_===1) {
            this.state = 822;
            this.keyspace();
            this.state = 823;
            this.match(CqlParser.DOT);

        }
        this.state = 827;
        this.table();
        this.state = 828;
        this.materializedViewWhere();
        this.state = 830;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_PRIMARY) {
            this.state = 829;
            this.primaryKeyElement();
        }

        this.state = 835;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_WITH) {
            this.state = 832;
            this.kwWith();
            this.state = 833;
            this.materializedViewOptions();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MaterializedViewWhereContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_materializedViewWhere;
    return this;
}

MaterializedViewWhereContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MaterializedViewWhereContext.prototype.constructor = MaterializedViewWhereContext;

MaterializedViewWhereContext.prototype.kwWhere = function() {
    return this.getTypedRuleContext(KwWhereContext,0);
};

MaterializedViewWhereContext.prototype.columnNotNullList = function() {
    return this.getTypedRuleContext(ColumnNotNullListContext,0);
};

MaterializedViewWhereContext.prototype.kwAnd = function() {
    return this.getTypedRuleContext(KwAndContext,0);
};

MaterializedViewWhereContext.prototype.relationElements = function() {
    return this.getTypedRuleContext(RelationElementsContext,0);
};

MaterializedViewWhereContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterMaterializedViewWhere(this);
	}
};

MaterializedViewWhereContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitMaterializedViewWhere(this);
	}
};

MaterializedViewWhereContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitMaterializedViewWhere(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.MaterializedViewWhereContext = MaterializedViewWhereContext;

CqlParser.prototype.materializedViewWhere = function() {

    var localctx = new MaterializedViewWhereContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, CqlParser.RULE_materializedViewWhere);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 837;
        this.kwWhere();
        this.state = 838;
        this.columnNotNullList();
        this.state = 842;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_AND) {
            this.state = 839;
            this.kwAnd();
            this.state = 840;
            this.relationElements();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnNotNullListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_columnNotNullList;
    return this;
}

ColumnNotNullListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNotNullListContext.prototype.constructor = ColumnNotNullListContext;

ColumnNotNullListContext.prototype.columnNotNull = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnNotNullContext);
    } else {
        return this.getTypedRuleContext(ColumnNotNullContext,i);
    }
};

ColumnNotNullListContext.prototype.kwAnd = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KwAndContext);
    } else {
        return this.getTypedRuleContext(KwAndContext,i);
    }
};

ColumnNotNullListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterColumnNotNullList(this);
	}
};

ColumnNotNullListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitColumnNotNullList(this);
	}
};

ColumnNotNullListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitColumnNotNullList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ColumnNotNullListContext = ColumnNotNullListContext;

CqlParser.prototype.columnNotNullList = function() {

    var localctx = new ColumnNotNullListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, CqlParser.RULE_columnNotNullList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 844;
        this.columnNotNull();
        this.state = 850;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 845;
                this.kwAnd();
                this.state = 846;
                this.columnNotNull(); 
            }
            this.state = 852;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnNotNullContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_columnNotNull;
    return this;
}

ColumnNotNullContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNotNullContext.prototype.constructor = ColumnNotNullContext;

ColumnNotNullContext.prototype.column = function() {
    return this.getTypedRuleContext(ColumnContext,0);
};

ColumnNotNullContext.prototype.kwIs = function() {
    return this.getTypedRuleContext(KwIsContext,0);
};

ColumnNotNullContext.prototype.kwNot = function() {
    return this.getTypedRuleContext(KwNotContext,0);
};

ColumnNotNullContext.prototype.kwNull = function() {
    return this.getTypedRuleContext(KwNullContext,0);
};

ColumnNotNullContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterColumnNotNull(this);
	}
};

ColumnNotNullContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitColumnNotNull(this);
	}
};

ColumnNotNullContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitColumnNotNull(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ColumnNotNullContext = ColumnNotNullContext;

CqlParser.prototype.columnNotNull = function() {

    var localctx = new ColumnNotNullContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CqlParser.RULE_columnNotNull);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 853;
        this.column();
        this.state = 854;
        this.kwIs();
        this.state = 855;
        this.kwNot();
        this.state = 856;
        this.kwNull();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MaterializedViewOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_materializedViewOptions;
    return this;
}

MaterializedViewOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MaterializedViewOptionsContext.prototype.constructor = MaterializedViewOptionsContext;

MaterializedViewOptionsContext.prototype.tableOptions = function() {
    return this.getTypedRuleContext(TableOptionsContext,0);
};

MaterializedViewOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterMaterializedViewOptions(this);
	}
};

MaterializedViewOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitMaterializedViewOptions(this);
	}
};

MaterializedViewOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitMaterializedViewOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.MaterializedViewOptionsContext = MaterializedViewOptionsContext;

CqlParser.prototype.materializedViewOptions = function() {

    var localctx = new MaterializedViewOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, CqlParser.RULE_materializedViewOptions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 858;
        this.tableOptions();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateKeyspaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createKeyspace;
    return this;
}

CreateKeyspaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateKeyspaceContext.prototype.constructor = CreateKeyspaceContext;

CreateKeyspaceContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

CreateKeyspaceContext.prototype.kwKeyspace = function() {
    return this.getTypedRuleContext(KwKeyspaceContext,0);
};

CreateKeyspaceContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

CreateKeyspaceContext.prototype.kwWith = function() {
    return this.getTypedRuleContext(KwWithContext,0);
};

CreateKeyspaceContext.prototype.kwReplication = function() {
    return this.getTypedRuleContext(KwReplicationContext,0);
};

CreateKeyspaceContext.prototype.OPERATOR_EQ = function() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
};

CreateKeyspaceContext.prototype.syntaxBracketLc = function() {
    return this.getTypedRuleContext(SyntaxBracketLcContext,0);
};

CreateKeyspaceContext.prototype.replicationList = function() {
    return this.getTypedRuleContext(ReplicationListContext,0);
};

CreateKeyspaceContext.prototype.syntaxBracketRc = function() {
    return this.getTypedRuleContext(SyntaxBracketRcContext,0);
};

CreateKeyspaceContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

CreateKeyspaceContext.prototype.kwAnd = function() {
    return this.getTypedRuleContext(KwAndContext,0);
};

CreateKeyspaceContext.prototype.durableWrites = function() {
    return this.getTypedRuleContext(DurableWritesContext,0);
};

CreateKeyspaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateKeyspace(this);
	}
};

CreateKeyspaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateKeyspace(this);
	}
};

CreateKeyspaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateKeyspace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateKeyspaceContext = CreateKeyspaceContext;

CqlParser.prototype.createKeyspace = function() {

    var localctx = new CreateKeyspaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, CqlParser.RULE_createKeyspace);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 860;
        this.kwCreate();
        this.state = 861;
        this.kwKeyspace();
        this.state = 863;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        if(la_===1) {
            this.state = 862;
            this.ifNotExist();

        }
        this.state = 865;
        this.keyspace();
        this.state = 866;
        this.kwWith();
        this.state = 867;
        this.kwReplication();
        this.state = 868;
        this.match(CqlParser.OPERATOR_EQ);
        this.state = 869;
        this.syntaxBracketLc();
        this.state = 870;
        this.replicationList();
        this.state = 871;
        this.syntaxBracketRc();
        this.state = 875;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_AND) {
            this.state = 872;
            this.kwAnd();
            this.state = 873;
            this.durableWrites();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createFunction;
    return this;
}

CreateFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateFunctionContext.prototype.constructor = CreateFunctionContext;

CreateFunctionContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

CreateFunctionContext.prototype.kwFunction = function() {
    return this.getTypedRuleContext(KwFunctionContext,0);
};

CreateFunctionContext.prototype.functionStatement = function() {
    return this.getTypedRuleContext(FunctionStatementContext,0);
};

CreateFunctionContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

CreateFunctionContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

CreateFunctionContext.prototype.returnMode = function() {
    return this.getTypedRuleContext(ReturnModeContext,0);
};

CreateFunctionContext.prototype.kwReturns = function() {
    return this.getTypedRuleContext(KwReturnsContext,0);
};

CreateFunctionContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

CreateFunctionContext.prototype.kwLanguage = function() {
    return this.getTypedRuleContext(KwLanguageContext,0);
};

CreateFunctionContext.prototype.language = function() {
    return this.getTypedRuleContext(LanguageContext,0);
};

CreateFunctionContext.prototype.kwAs = function() {
    return this.getTypedRuleContext(KwAsContext,0);
};

CreateFunctionContext.prototype.codeBlock = function() {
    return this.getTypedRuleContext(CodeBlockContext,0);
};

CreateFunctionContext.prototype.orReplace = function() {
    return this.getTypedRuleContext(OrReplaceContext,0);
};

CreateFunctionContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

CreateFunctionContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

CreateFunctionContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

CreateFunctionContext.prototype.paramList = function() {
    return this.getTypedRuleContext(ParamListContext,0);
};

CreateFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateFunction(this);
	}
};

CreateFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateFunction(this);
	}
};

CreateFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateFunctionContext = CreateFunctionContext;

CqlParser.prototype.createFunction = function() {

    var localctx = new CreateFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CqlParser.RULE_createFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 877;
        this.kwCreate();
        this.state = 879;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_OR) {
            this.state = 878;
            this.orReplace();
        }

        this.state = 881;
        this.kwFunction();
        this.state = 883;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
        if(la_===1) {
            this.state = 882;
            this.ifNotExist();

        }
        this.state = 888;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        if(la_===1) {
            this.state = 885;
            this.keyspace();
            this.state = 886;
            this.match(CqlParser.DOT);

        }
        this.state = 890;
        this.functionStatement();
        this.state = 891;
        this.syntaxBracketLr();
        this.state = 893;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 23)) & ~0x1f) == 0 && ((1 << (_la - 23)) & ((1 << (CqlParser.K_ADD - 23)) | (1 << (CqlParser.K_ALL - 23)) | (1 << (CqlParser.K_ALLOW - 23)) | (1 << (CqlParser.K_ALTER - 23)) | (1 << (CqlParser.K_AND - 23)) | (1 << (CqlParser.K_ANY - 23)) | (1 << (CqlParser.K_APPLY - 23)) | (1 << (CqlParser.K_AS - 23)) | (1 << (CqlParser.K_ASC - 23)) | (1 << (CqlParser.K_AUTHORIZE - 23)) | (1 << (CqlParser.K_BATCH - 23)) | (1 << (CqlParser.K_BEGIN - 23)) | (1 << (CqlParser.K_BY - 23)) | (1 << (CqlParser.K_CALLED - 23)) | (1 << (CqlParser.K_CLUSTERING - 23)) | (1 << (CqlParser.K_COLUMNFAMILY - 23)) | (1 << (CqlParser.K_COMPACT - 23)) | (1 << (CqlParser.K_CONSISTENCY - 23)) | (1 << (CqlParser.K_CONTAINS - 23)) | (1 << (CqlParser.K_CREATE - 23)) | (1 << (CqlParser.K_CUSTOM - 23)) | (1 << (CqlParser.K_DELETE - 23)) | (1 << (CqlParser.K_DESC - 23)) | (1 << (CqlParser.K_DESCRIBE - 23)) | (1 << (CqlParser.K_DISTINCT - 23)) | (1 << (CqlParser.K_DROP - 23)) | (1 << (CqlParser.K_DURABLE_WRITES - 23)) | (1 << (CqlParser.K_EACH_QUORUM - 23)) | (1 << (CqlParser.K_ENTRIES - 23)) | (1 << (CqlParser.K_EXECUTE - 23)) | (1 << (CqlParser.K_EXISTS - 23)))) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (CqlParser.K_FALSE - 55)) | (1 << (CqlParser.K_FILTERING - 55)) | (1 << (CqlParser.K_FINALFUNC - 55)) | (1 << (CqlParser.K_FROM - 55)) | (1 << (CqlParser.K_FULL - 55)) | (1 << (CqlParser.K_FUNCTION - 55)) | (1 << (CqlParser.K_FUNCTIONS - 55)) | (1 << (CqlParser.K_GRANT - 55)) | (1 << (CqlParser.K_IF - 55)) | (1 << (CqlParser.K_IN - 55)) | (1 << (CqlParser.K_INDEX - 55)) | (1 << (CqlParser.K_INFINITY - 55)) | (1 << (CqlParser.K_INITCOND - 55)) | (1 << (CqlParser.K_INPUT - 55)) | (1 << (CqlParser.K_INSERT - 55)) | (1 << (CqlParser.K_INTO - 55)) | (1 << (CqlParser.K_IS - 55)) | (1 << (CqlParser.K_JSON - 55)) | (1 << (CqlParser.K_KEY - 55)) | (1 << (CqlParser.K_KEYS - 55)) | (1 << (CqlParser.K_KEYSPACE - 55)) | (1 << (CqlParser.K_KEYSPACES - 55)) | (1 << (CqlParser.K_LANGUAGE - 55)) | (1 << (CqlParser.K_LEVEL - 55)) | (1 << (CqlParser.K_LIMIT - 55)) | (1 << (CqlParser.K_LOCAL_ONE - 55)) | (1 << (CqlParser.K_LOCAL_QUORUM - 55)) | (1 << (CqlParser.K_LOGGED - 55)) | (1 << (CqlParser.K_LOGIN - 55)) | (1 << (CqlParser.K_MATERIALIZED - 55)) | (1 << (CqlParser.K_MODIFY - 55)) | (1 << (CqlParser.K_NAN - 55)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (CqlParser.K_NORECURSIVE - 87)) | (1 << (CqlParser.K_NOSUPERUSER - 87)) | (1 << (CqlParser.K_NOT - 87)) | (1 << (CqlParser.K_NULL - 87)) | (1 << (CqlParser.K_OF - 87)) | (1 << (CqlParser.K_ON - 87)) | (1 << (CqlParser.K_ONE - 87)) | (1 << (CqlParser.K_OPTIONS - 87)) | (1 << (CqlParser.K_OR - 87)) | (1 << (CqlParser.K_ORDER - 87)) | (1 << (CqlParser.K_PARTITION - 87)) | (1 << (CqlParser.K_PASSWORD - 87)) | (1 << (CqlParser.K_PER - 87)) | (1 << (CqlParser.K_PERMISSION - 87)) | (1 << (CqlParser.K_PERMISSIONS - 87)) | (1 << (CqlParser.K_PRIMARY - 87)) | (1 << (CqlParser.K_QUORUM - 87)) | (1 << (CqlParser.K_RENAME - 87)) | (1 << (CqlParser.K_REPLACE - 87)) | (1 << (CqlParser.K_REPLICATION - 87)) | (1 << (CqlParser.K_RETURNS - 87)) | (1 << (CqlParser.K_REVOKE - 87)) | (1 << (CqlParser.K_ROLE - 87)) | (1 << (CqlParser.K_ROLES - 87)) | (1 << (CqlParser.K_SCHEMA - 87)) | (1 << (CqlParser.K_SELECT - 87)) | (1 << (CqlParser.K_SET - 87)) | (1 << (CqlParser.K_SFUNC - 87)) | (1 << (CqlParser.K_STATIC - 87)))) !== 0) || ((((_la - 119)) & ~0x1f) == 0 && ((1 << (_la - 119)) & ((1 << (CqlParser.K_STORAGE - 119)) | (1 << (CqlParser.K_STYPE - 119)) | (1 << (CqlParser.K_SUPERUSER - 119)) | (1 << (CqlParser.K_TABLE - 119)) | (1 << (CqlParser.K_THREE - 119)) | (1 << (CqlParser.K_TIMESTAMP - 119)) | (1 << (CqlParser.K_TO - 119)) | (1 << (CqlParser.K_TOKEN - 119)) | (1 << (CqlParser.K_TRIGGER - 119)) | (1 << (CqlParser.K_TRUE - 119)) | (1 << (CqlParser.K_TRUNCATE - 119)) | (1 << (CqlParser.K_TTL - 119)) | (1 << (CqlParser.K_TWO - 119)) | (1 << (CqlParser.K_TYPE - 119)) | (1 << (CqlParser.K_UNLOGGED - 119)) | (1 << (CqlParser.K_UPDATE - 119)) | (1 << (CqlParser.K_USE - 119)) | (1 << (CqlParser.K_USER - 119)) | (1 << (CqlParser.K_USING - 119)) | (1 << (CqlParser.K_UUID - 119)) | (1 << (CqlParser.K_VALUES - 119)) | (1 << (CqlParser.K_VIEW - 119)) | (1 << (CqlParser.K_WHERE - 119)) | (1 << (CqlParser.K_WITH - 119)) | (1 << (CqlParser.K_WRITETIME - 119)) | (1 << (CqlParser.K_ASCII - 119)) | (1 << (CqlParser.K_BIGINT - 119)) | (1 << (CqlParser.K_BLOB - 119)) | (1 << (CqlParser.K_BOOLEAN - 119)) | (1 << (CqlParser.K_COUNTER - 119)) | (1 << (CqlParser.K_DATE - 119)) | (1 << (CqlParser.K_DECIMAL - 119)))) !== 0) || ((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (CqlParser.K_DOUBLE - 151)) | (1 << (CqlParser.K_FLOAT - 151)) | (1 << (CqlParser.K_FROZEN - 151)) | (1 << (CqlParser.K_INET - 151)) | (1 << (CqlParser.K_INT - 151)) | (1 << (CqlParser.K_LIST - 151)) | (1 << (CqlParser.K_MAP - 151)) | (1 << (CqlParser.K_SMALLINT - 151)) | (1 << (CqlParser.K_TEXT - 151)) | (1 << (CqlParser.K_TIMEUUID - 151)) | (1 << (CqlParser.K_TIME - 151)) | (1 << (CqlParser.K_TINYINT - 151)) | (1 << (CqlParser.K_TUPLE - 151)) | (1 << (CqlParser.K_VARCHAR - 151)) | (1 << (CqlParser.K_VARINT - 151)) | (1 << (CqlParser.OBJECT_NAME - 151)) | (1 << (CqlParser.K_USERS - 151)))) !== 0)) {
            this.state = 892;
            this.paramList();
        }

        this.state = 895;
        this.syntaxBracketRr();
        this.state = 896;
        this.returnMode();
        this.state = 897;
        this.kwReturns();
        this.state = 898;
        this.dataType();
        this.state = 899;
        this.kwLanguage();
        this.state = 900;
        this.language();
        this.state = 901;
        this.kwAs();
        this.state = 902;
        this.codeBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CodeBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_codeBlock;
    return this;
}

CodeBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CodeBlockContext.prototype.constructor = CodeBlockContext;

CodeBlockContext.prototype.CODE_BLOCK = function() {
    return this.getToken(CqlParser.CODE_BLOCK, 0);
};

CodeBlockContext.prototype.STRING_LITERAL = function() {
    return this.getToken(CqlParser.STRING_LITERAL, 0);
};

CodeBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCodeBlock(this);
	}
};

CodeBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCodeBlock(this);
	}
};

CodeBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCodeBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CodeBlockContext = CodeBlockContext;

CqlParser.prototype.codeBlock = function() {

    var localctx = new CodeBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CqlParser.RULE_codeBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 904;
        _la = this._input.LA(1);
        if(!(_la===CqlParser.CODE_BLOCK || _la===CqlParser.STRING_LITERAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParamListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_paramList;
    return this;
}

ParamListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamListContext.prototype.constructor = ParamListContext;

ParamListContext.prototype.param = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParamContext);
    } else {
        return this.getTypedRuleContext(ParamContext,i);
    }
};

ParamListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

ParamListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterParamList(this);
	}
};

ParamListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitParamList(this);
	}
};

ParamListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitParamList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ParamListContext = ParamListContext;

CqlParser.prototype.paramList = function() {

    var localctx = new ParamListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, CqlParser.RULE_paramList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 906;
        this.param();
        this.state = 912;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 907;
            this.syntaxComma();
            this.state = 908;
            this.param();
            this.state = 914;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReturnModeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_returnMode;
    return this;
}

ReturnModeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnModeContext.prototype.constructor = ReturnModeContext;

ReturnModeContext.prototype.kwOn = function() {
    return this.getTypedRuleContext(KwOnContext,0);
};

ReturnModeContext.prototype.kwNull = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KwNullContext);
    } else {
        return this.getTypedRuleContext(KwNullContext,i);
    }
};

ReturnModeContext.prototype.kwInput = function() {
    return this.getTypedRuleContext(KwInputContext,0);
};

ReturnModeContext.prototype.kwCalled = function() {
    return this.getTypedRuleContext(KwCalledContext,0);
};

ReturnModeContext.prototype.kwReturns = function() {
    return this.getTypedRuleContext(KwReturnsContext,0);
};

ReturnModeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterReturnMode(this);
	}
};

ReturnModeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitReturnMode(this);
	}
};

ReturnModeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitReturnMode(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ReturnModeContext = ReturnModeContext;

CqlParser.prototype.returnMode = function() {

    var localctx = new ReturnModeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, CqlParser.RULE_returnMode);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 919;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CqlParser.K_CALLED:
            this.state = 915;
            this.kwCalled();
            break;
        case CqlParser.K_RETURNS:
            this.state = 916;
            this.kwReturns();
            this.state = 917;
            this.kwNull();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 921;
        this.kwOn();
        this.state = 922;
        this.kwNull();
        this.state = 923;
        this.kwInput();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateAggregateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createAggregate;
    return this;
}

CreateAggregateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateAggregateContext.prototype.constructor = CreateAggregateContext;

CreateAggregateContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

CreateAggregateContext.prototype.kwAggregate = function() {
    return this.getTypedRuleContext(KwAggregateContext,0);
};

CreateAggregateContext.prototype.aggregate = function() {
    return this.getTypedRuleContext(AggregateContext,0);
};

CreateAggregateContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

CreateAggregateContext.prototype.dataType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DataTypeContext);
    } else {
        return this.getTypedRuleContext(DataTypeContext,i);
    }
};

CreateAggregateContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

CreateAggregateContext.prototype.kwSfunc = function() {
    return this.getTypedRuleContext(KwSfuncContext,0);
};

CreateAggregateContext.prototype.functionStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionStatementContext);
    } else {
        return this.getTypedRuleContext(FunctionStatementContext,i);
    }
};

CreateAggregateContext.prototype.kwStype = function() {
    return this.getTypedRuleContext(KwStypeContext,0);
};

CreateAggregateContext.prototype.kwFinalfunc = function() {
    return this.getTypedRuleContext(KwFinalfuncContext,0);
};

CreateAggregateContext.prototype.kwInitcond = function() {
    return this.getTypedRuleContext(KwInitcondContext,0);
};

CreateAggregateContext.prototype.initCondDefinition = function() {
    return this.getTypedRuleContext(InitCondDefinitionContext,0);
};

CreateAggregateContext.prototype.orReplace = function() {
    return this.getTypedRuleContext(OrReplaceContext,0);
};

CreateAggregateContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

CreateAggregateContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

CreateAggregateContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

CreateAggregateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateAggregate(this);
	}
};

CreateAggregateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateAggregate(this);
	}
};

CreateAggregateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateAggregate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateAggregateContext = CreateAggregateContext;

CqlParser.prototype.createAggregate = function() {

    var localctx = new CreateAggregateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CqlParser.RULE_createAggregate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 925;
        this.kwCreate();
        this.state = 927;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_OR) {
            this.state = 926;
            this.orReplace();
        }

        this.state = 929;
        this.kwAggregate();
        this.state = 931;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        if(la_===1) {
            this.state = 930;
            this.ifNotExist();

        }
        this.state = 936;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        if(la_===1) {
            this.state = 933;
            this.keyspace();
            this.state = 934;
            this.match(CqlParser.DOT);

        }
        this.state = 938;
        this.aggregate();
        this.state = 939;
        this.syntaxBracketLr();
        this.state = 940;
        this.dataType();
        this.state = 941;
        this.syntaxBracketRr();
        this.state = 942;
        this.kwSfunc();
        this.state = 943;
        this.functionStatement();
        this.state = 944;
        this.kwStype();
        this.state = 945;
        this.dataType();
        this.state = 946;
        this.kwFinalfunc();
        this.state = 947;
        this.functionStatement();
        this.state = 948;
        this.kwInitcond();
        this.state = 949;
        this.initCondDefinition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InitCondDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_initCondDefinition;
    return this;
}

InitCondDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitCondDefinitionContext.prototype.constructor = InitCondDefinitionContext;

InitCondDefinitionContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

InitCondDefinitionContext.prototype.initCondList = function() {
    return this.getTypedRuleContext(InitCondListContext,0);
};

InitCondDefinitionContext.prototype.initCondListNested = function() {
    return this.getTypedRuleContext(InitCondListNestedContext,0);
};

InitCondDefinitionContext.prototype.initCondHash = function() {
    return this.getTypedRuleContext(InitCondHashContext,0);
};

InitCondDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterInitCondDefinition(this);
	}
};

InitCondDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitInitCondDefinition(this);
	}
};

InitCondDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitInitCondDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.InitCondDefinitionContext = InitCondDefinitionContext;

CqlParser.prototype.initCondDefinition = function() {

    var localctx = new InitCondDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, CqlParser.RULE_initCondDefinition);
    try {
        this.state = 955;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 951;
            this.constant();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 952;
            this.initCondList();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 953;
            this.initCondListNested();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 954;
            this.initCondHash();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InitCondHashContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_initCondHash;
    return this;
}

InitCondHashContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitCondHashContext.prototype.constructor = InitCondHashContext;

InitCondHashContext.prototype.syntaxBracketLc = function() {
    return this.getTypedRuleContext(SyntaxBracketLcContext,0);
};

InitCondHashContext.prototype.initCondHashItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitCondHashItemContext);
    } else {
        return this.getTypedRuleContext(InitCondHashItemContext,i);
    }
};

InitCondHashContext.prototype.syntaxBracketRc = function() {
    return this.getTypedRuleContext(SyntaxBracketRcContext,0);
};

InitCondHashContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

InitCondHashContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterInitCondHash(this);
	}
};

InitCondHashContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitInitCondHash(this);
	}
};

InitCondHashContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitInitCondHash(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.InitCondHashContext = InitCondHashContext;

CqlParser.prototype.initCondHash = function() {

    var localctx = new InitCondHashContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, CqlParser.RULE_initCondHash);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 957;
        this.syntaxBracketLc();
        this.state = 958;
        this.initCondHashItem();
        this.state = 964;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 959;
            this.syntaxComma();
            this.state = 960;
            this.initCondHashItem();
            this.state = 966;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 967;
        this.syntaxBracketRc();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InitCondHashItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_initCondHashItem;
    return this;
}

InitCondHashItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitCondHashItemContext.prototype.constructor = InitCondHashItemContext;

InitCondHashItemContext.prototype.hashKey = function() {
    return this.getTypedRuleContext(HashKeyContext,0);
};

InitCondHashItemContext.prototype.COLON = function() {
    return this.getToken(CqlParser.COLON, 0);
};

InitCondHashItemContext.prototype.initCondDefinition = function() {
    return this.getTypedRuleContext(InitCondDefinitionContext,0);
};

InitCondHashItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterInitCondHashItem(this);
	}
};

InitCondHashItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitInitCondHashItem(this);
	}
};

InitCondHashItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitInitCondHashItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.InitCondHashItemContext = InitCondHashItemContext;

CqlParser.prototype.initCondHashItem = function() {

    var localctx = new InitCondHashItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, CqlParser.RULE_initCondHashItem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 969;
        this.hashKey();
        this.state = 970;
        this.match(CqlParser.COLON);
        this.state = 971;
        this.initCondDefinition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InitCondListNestedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_initCondListNested;
    return this;
}

InitCondListNestedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitCondListNestedContext.prototype.constructor = InitCondListNestedContext;

InitCondListNestedContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

InitCondListNestedContext.prototype.initCondList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitCondListContext);
    } else {
        return this.getTypedRuleContext(InitCondListContext,i);
    }
};

InitCondListNestedContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

InitCondListNestedContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

InitCondListNestedContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

InitCondListNestedContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterInitCondListNested(this);
	}
};

InitCondListNestedContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitInitCondListNested(this);
	}
};

InitCondListNestedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitInitCondListNested(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.InitCondListNestedContext = InitCondListNestedContext;

CqlParser.prototype.initCondListNested = function() {

    var localctx = new InitCondListNestedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, CqlParser.RULE_initCondListNested);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 973;
        this.syntaxBracketLr();
        this.state = 974;
        this.initCondList();
        this.state = 981;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.LR_BRACKET || _la===CqlParser.COMMA) {
            this.state = 979;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CqlParser.COMMA:
                this.state = 975;
                this.syntaxComma();
                this.state = 976;
                this.constant();
                break;
            case CqlParser.LR_BRACKET:
                this.state = 978;
                this.initCondList();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 983;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 984;
        this.syntaxBracketRr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InitCondListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_initCondList;
    return this;
}

InitCondListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitCondListContext.prototype.constructor = InitCondListContext;

InitCondListContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

InitCondListContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

InitCondListContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

InitCondListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

InitCondListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterInitCondList(this);
	}
};

InitCondListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitInitCondList(this);
	}
};

InitCondListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitInitCondList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.InitCondListContext = InitCondListContext;

CqlParser.prototype.initCondList = function() {

    var localctx = new InitCondListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, CqlParser.RULE_initCondList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 986;
        this.syntaxBracketLr();
        this.state = 987;
        this.constant();
        this.state = 993;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 988;
            this.syntaxComma();
            this.state = 989;
            this.constant();
            this.state = 995;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 996;
        this.syntaxBracketRr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrReplaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_orReplace;
    return this;
}

OrReplaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrReplaceContext.prototype.constructor = OrReplaceContext;

OrReplaceContext.prototype.kwOr = function() {
    return this.getTypedRuleContext(KwOrContext,0);
};

OrReplaceContext.prototype.kwReplace = function() {
    return this.getTypedRuleContext(KwReplaceContext,0);
};

OrReplaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterOrReplace(this);
	}
};

OrReplaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitOrReplace(this);
	}
};

OrReplaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitOrReplace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.OrReplaceContext = OrReplaceContext;

CqlParser.prototype.orReplace = function() {

    var localctx = new OrReplaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, CqlParser.RULE_orReplace);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 998;
        this.kwOr();
        this.state = 999;
        this.kwReplace();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterUserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterUser;
    return this;
}

AlterUserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterUserContext.prototype.constructor = AlterUserContext;

AlterUserContext.prototype.kwAlter = function() {
    return this.getTypedRuleContext(KwAlterContext,0);
};

AlterUserContext.prototype.kwUser = function() {
    return this.getTypedRuleContext(KwUserContext,0);
};

AlterUserContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

AlterUserContext.prototype.kwWith = function() {
    return this.getTypedRuleContext(KwWithContext,0);
};

AlterUserContext.prototype.userPassword = function() {
    return this.getTypedRuleContext(UserPasswordContext,0);
};

AlterUserContext.prototype.userSuperUser = function() {
    return this.getTypedRuleContext(UserSuperUserContext,0);
};

AlterUserContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterUser(this);
	}
};

AlterUserContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterUser(this);
	}
};

AlterUserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterUser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterUserContext = AlterUserContext;

CqlParser.prototype.alterUser = function() {

    var localctx = new AlterUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, CqlParser.RULE_alterUser);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1001;
        this.kwAlter();
        this.state = 1002;
        this.kwUser();
        this.state = 1003;
        this.user();
        this.state = 1004;
        this.kwWith();
        this.state = 1005;
        this.userPassword();
        this.state = 1007;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_NOSUPERUSER || _la===CqlParser.K_SUPERUSER) {
            this.state = 1006;
            this.userSuperUser();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserPasswordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_userPassword;
    return this;
}

UserPasswordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserPasswordContext.prototype.constructor = UserPasswordContext;

UserPasswordContext.prototype.kwPassword = function() {
    return this.getTypedRuleContext(KwPasswordContext,0);
};

UserPasswordContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

UserPasswordContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterUserPassword(this);
	}
};

UserPasswordContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitUserPassword(this);
	}
};

UserPasswordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitUserPassword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.UserPasswordContext = UserPasswordContext;

CqlParser.prototype.userPassword = function() {

    var localctx = new UserPasswordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, CqlParser.RULE_userPassword);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1009;
        this.kwPassword();
        this.state = 1010;
        this.stringLiteral();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserSuperUserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_userSuperUser;
    return this;
}

UserSuperUserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserSuperUserContext.prototype.constructor = UserSuperUserContext;

UserSuperUserContext.prototype.kwSuperuser = function() {
    return this.getTypedRuleContext(KwSuperuserContext,0);
};

UserSuperUserContext.prototype.kwNosuperuser = function() {
    return this.getTypedRuleContext(KwNosuperuserContext,0);
};

UserSuperUserContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterUserSuperUser(this);
	}
};

UserSuperUserContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitUserSuperUser(this);
	}
};

UserSuperUserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitUserSuperUser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.UserSuperUserContext = UserSuperUserContext;

CqlParser.prototype.userSuperUser = function() {

    var localctx = new UserSuperUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, CqlParser.RULE_userSuperUser);
    try {
        this.state = 1014;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CqlParser.K_SUPERUSER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1012;
            this.kwSuperuser();
            break;
        case CqlParser.K_NOSUPERUSER:
            this.enterOuterAlt(localctx, 2);
            this.state = 1013;
            this.kwNosuperuser();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterType;
    return this;
}

AlterTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTypeContext.prototype.constructor = AlterTypeContext;

AlterTypeContext.prototype.kwAlter = function() {
    return this.getTypedRuleContext(KwAlterContext,0);
};

AlterTypeContext.prototype.kwType = function() {
    return this.getTypedRuleContext(KwTypeContext,0);
};

AlterTypeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

AlterTypeContext.prototype.alterTypeOperation = function() {
    return this.getTypedRuleContext(AlterTypeOperationContext,0);
};

AlterTypeContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

AlterTypeContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

AlterTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterType(this);
	}
};

AlterTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterType(this);
	}
};

AlterTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTypeContext = AlterTypeContext;

CqlParser.prototype.alterType = function() {

    var localctx = new AlterTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, CqlParser.RULE_alterType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1016;
        this.kwAlter();
        this.state = 1017;
        this.kwType();
        this.state = 1021;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        if(la_===1) {
            this.state = 1018;
            this.keyspace();
            this.state = 1019;
            this.match(CqlParser.DOT);

        }
        this.state = 1023;
        this.type();
        this.state = 1024;
        this.alterTypeOperation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTypeOperationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTypeOperation;
    return this;
}

AlterTypeOperationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTypeOperationContext.prototype.constructor = AlterTypeOperationContext;

AlterTypeOperationContext.prototype.alterTypeAlterType = function() {
    return this.getTypedRuleContext(AlterTypeAlterTypeContext,0);
};

AlterTypeOperationContext.prototype.alterTypeAdd = function() {
    return this.getTypedRuleContext(AlterTypeAddContext,0);
};

AlterTypeOperationContext.prototype.alterTypeRename = function() {
    return this.getTypedRuleContext(AlterTypeRenameContext,0);
};

AlterTypeOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTypeOperation(this);
	}
};

AlterTypeOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTypeOperation(this);
	}
};

AlterTypeOperationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTypeOperation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTypeOperationContext = AlterTypeOperationContext;

CqlParser.prototype.alterTypeOperation = function() {

    var localctx = new AlterTypeOperationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, CqlParser.RULE_alterTypeOperation);
    try {
        this.state = 1029;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CqlParser.K_ALTER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1026;
            this.alterTypeAlterType();
            break;
        case CqlParser.K_ADD:
            this.enterOuterAlt(localctx, 2);
            this.state = 1027;
            this.alterTypeAdd();
            break;
        case CqlParser.K_RENAME:
            this.enterOuterAlt(localctx, 3);
            this.state = 1028;
            this.alterTypeRename();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTypeRenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTypeRename;
    return this;
}

AlterTypeRenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTypeRenameContext.prototype.constructor = AlterTypeRenameContext;

AlterTypeRenameContext.prototype.kwRename = function() {
    return this.getTypedRuleContext(KwRenameContext,0);
};

AlterTypeRenameContext.prototype.alterTypeRenameList = function() {
    return this.getTypedRuleContext(AlterTypeRenameListContext,0);
};

AlterTypeRenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTypeRename(this);
	}
};

AlterTypeRenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTypeRename(this);
	}
};

AlterTypeRenameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTypeRename(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTypeRenameContext = AlterTypeRenameContext;

CqlParser.prototype.alterTypeRename = function() {

    var localctx = new AlterTypeRenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, CqlParser.RULE_alterTypeRename);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1031;
        this.kwRename();
        this.state = 1032;
        this.alterTypeRenameList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTypeRenameListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTypeRenameList;
    return this;
}

AlterTypeRenameListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTypeRenameListContext.prototype.constructor = AlterTypeRenameListContext;

AlterTypeRenameListContext.prototype.alterTypeRenameItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AlterTypeRenameItemContext);
    } else {
        return this.getTypedRuleContext(AlterTypeRenameItemContext,i);
    }
};

AlterTypeRenameListContext.prototype.kwAnd = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KwAndContext);
    } else {
        return this.getTypedRuleContext(KwAndContext,i);
    }
};

AlterTypeRenameListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTypeRenameList(this);
	}
};

AlterTypeRenameListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTypeRenameList(this);
	}
};

AlterTypeRenameListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTypeRenameList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTypeRenameListContext = AlterTypeRenameListContext;

CqlParser.prototype.alterTypeRenameList = function() {

    var localctx = new AlterTypeRenameListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, CqlParser.RULE_alterTypeRenameList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1034;
        this.alterTypeRenameItem();
        this.state = 1040;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.K_AND) {
            this.state = 1035;
            this.kwAnd();
            this.state = 1036;
            this.alterTypeRenameItem();
            this.state = 1042;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTypeRenameItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTypeRenameItem;
    return this;
}

AlterTypeRenameItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTypeRenameItemContext.prototype.constructor = AlterTypeRenameItemContext;

AlterTypeRenameItemContext.prototype.column = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnContext);
    } else {
        return this.getTypedRuleContext(ColumnContext,i);
    }
};

AlterTypeRenameItemContext.prototype.kwTo = function() {
    return this.getTypedRuleContext(KwToContext,0);
};

AlterTypeRenameItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTypeRenameItem(this);
	}
};

AlterTypeRenameItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTypeRenameItem(this);
	}
};

AlterTypeRenameItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTypeRenameItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTypeRenameItemContext = AlterTypeRenameItemContext;

CqlParser.prototype.alterTypeRenameItem = function() {

    var localctx = new AlterTypeRenameItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, CqlParser.RULE_alterTypeRenameItem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1043;
        this.column();
        this.state = 1044;
        this.kwTo();
        this.state = 1045;
        this.column();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTypeAddContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTypeAdd;
    return this;
}

AlterTypeAddContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTypeAddContext.prototype.constructor = AlterTypeAddContext;

AlterTypeAddContext.prototype.kwAdd = function() {
    return this.getTypedRuleContext(KwAddContext,0);
};

AlterTypeAddContext.prototype.typeMemberColumnList = function() {
    return this.getTypedRuleContext(TypeMemberColumnListContext,0);
};

AlterTypeAddContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTypeAdd(this);
	}
};

AlterTypeAddContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTypeAdd(this);
	}
};

AlterTypeAddContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTypeAdd(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTypeAddContext = AlterTypeAddContext;

CqlParser.prototype.alterTypeAdd = function() {

    var localctx = new AlterTypeAddContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, CqlParser.RULE_alterTypeAdd);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1047;
        this.kwAdd();
        this.state = 1048;
        this.typeMemberColumnList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTypeAlterTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTypeAlterType;
    return this;
}

AlterTypeAlterTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTypeAlterTypeContext.prototype.constructor = AlterTypeAlterTypeContext;

AlterTypeAlterTypeContext.prototype.kwAlter = function() {
    return this.getTypedRuleContext(KwAlterContext,0);
};

AlterTypeAlterTypeContext.prototype.column = function() {
    return this.getTypedRuleContext(ColumnContext,0);
};

AlterTypeAlterTypeContext.prototype.kwType = function() {
    return this.getTypedRuleContext(KwTypeContext,0);
};

AlterTypeAlterTypeContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

AlterTypeAlterTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTypeAlterType(this);
	}
};

AlterTypeAlterTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTypeAlterType(this);
	}
};

AlterTypeAlterTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTypeAlterType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTypeAlterTypeContext = AlterTypeAlterTypeContext;

CqlParser.prototype.alterTypeAlterType = function() {

    var localctx = new AlterTypeAlterTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, CqlParser.RULE_alterTypeAlterType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1050;
        this.kwAlter();
        this.state = 1051;
        this.column();
        this.state = 1052;
        this.kwType();
        this.state = 1053;
        this.dataType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTable;
    return this;
}

AlterTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableContext.prototype.constructor = AlterTableContext;

AlterTableContext.prototype.kwAlter = function() {
    return this.getTypedRuleContext(KwAlterContext,0);
};

AlterTableContext.prototype.kwTable = function() {
    return this.getTypedRuleContext(KwTableContext,0);
};

AlterTableContext.prototype.table = function() {
    return this.getTypedRuleContext(TableContext,0);
};

AlterTableContext.prototype.alterTableOperation = function() {
    return this.getTypedRuleContext(AlterTableOperationContext,0);
};

AlterTableContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

AlterTableContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

AlterTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTable(this);
	}
};

AlterTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTable(this);
	}
};

AlterTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTableContext = AlterTableContext;

CqlParser.prototype.alterTable = function() {

    var localctx = new AlterTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, CqlParser.RULE_alterTable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1055;
        this.kwAlter();
        this.state = 1056;
        this.kwTable();
        this.state = 1060;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        if(la_===1) {
            this.state = 1057;
            this.keyspace();
            this.state = 1058;
            this.match(CqlParser.DOT);

        }
        this.state = 1062;
        this.table();
        this.state = 1063;
        this.alterTableOperation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTableOperationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableOperation;
    return this;
}

AlterTableOperationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableOperationContext.prototype.constructor = AlterTableOperationContext;

AlterTableOperationContext.prototype.alterTableAdd = function() {
    return this.getTypedRuleContext(AlterTableAddContext,0);
};

AlterTableOperationContext.prototype.alterTableDropColumns = function() {
    return this.getTypedRuleContext(AlterTableDropColumnsContext,0);
};

AlterTableOperationContext.prototype.alterTableDropCompactStorage = function() {
    return this.getTypedRuleContext(AlterTableDropCompactStorageContext,0);
};

AlterTableOperationContext.prototype.alterTableRename = function() {
    return this.getTypedRuleContext(AlterTableRenameContext,0);
};

AlterTableOperationContext.prototype.alterTableWith = function() {
    return this.getTypedRuleContext(AlterTableWithContext,0);
};

AlterTableOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTableOperation(this);
	}
};

AlterTableOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTableOperation(this);
	}
};

AlterTableOperationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTableOperation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTableOperationContext = AlterTableOperationContext;

CqlParser.prototype.alterTableOperation = function() {

    var localctx = new AlterTableOperationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, CqlParser.RULE_alterTableOperation);
    try {
        this.state = 1071;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1065;
            this.alterTableAdd();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1066;
            this.alterTableDropColumns();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1067;
            this.alterTableDropColumns();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1068;
            this.alterTableDropCompactStorage();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1069;
            this.alterTableRename();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1070;
            this.alterTableWith();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTableWithContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableWith;
    return this;
}

AlterTableWithContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableWithContext.prototype.constructor = AlterTableWithContext;

AlterTableWithContext.prototype.kwWith = function() {
    return this.getTypedRuleContext(KwWithContext,0);
};

AlterTableWithContext.prototype.tableOptions = function() {
    return this.getTypedRuleContext(TableOptionsContext,0);
};

AlterTableWithContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTableWith(this);
	}
};

AlterTableWithContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTableWith(this);
	}
};

AlterTableWithContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTableWith(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTableWithContext = AlterTableWithContext;

CqlParser.prototype.alterTableWith = function() {

    var localctx = new AlterTableWithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, CqlParser.RULE_alterTableWith);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1073;
        this.kwWith();
        this.state = 1074;
        this.tableOptions();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTableRenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableRename;
    return this;
}

AlterTableRenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableRenameContext.prototype.constructor = AlterTableRenameContext;

AlterTableRenameContext.prototype.kwRename = function() {
    return this.getTypedRuleContext(KwRenameContext,0);
};

AlterTableRenameContext.prototype.column = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnContext);
    } else {
        return this.getTypedRuleContext(ColumnContext,i);
    }
};

AlterTableRenameContext.prototype.kwTo = function() {
    return this.getTypedRuleContext(KwToContext,0);
};

AlterTableRenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTableRename(this);
	}
};

AlterTableRenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTableRename(this);
	}
};

AlterTableRenameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTableRename(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTableRenameContext = AlterTableRenameContext;

CqlParser.prototype.alterTableRename = function() {

    var localctx = new AlterTableRenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, CqlParser.RULE_alterTableRename);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1076;
        this.kwRename();
        this.state = 1077;
        this.column();
        this.state = 1078;
        this.kwTo();
        this.state = 1079;
        this.column();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTableDropCompactStorageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableDropCompactStorage;
    return this;
}

AlterTableDropCompactStorageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableDropCompactStorageContext.prototype.constructor = AlterTableDropCompactStorageContext;

AlterTableDropCompactStorageContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

AlterTableDropCompactStorageContext.prototype.kwCompact = function() {
    return this.getTypedRuleContext(KwCompactContext,0);
};

AlterTableDropCompactStorageContext.prototype.kwStorage = function() {
    return this.getTypedRuleContext(KwStorageContext,0);
};

AlterTableDropCompactStorageContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTableDropCompactStorage(this);
	}
};

AlterTableDropCompactStorageContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTableDropCompactStorage(this);
	}
};

AlterTableDropCompactStorageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTableDropCompactStorage(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTableDropCompactStorageContext = AlterTableDropCompactStorageContext;

CqlParser.prototype.alterTableDropCompactStorage = function() {

    var localctx = new AlterTableDropCompactStorageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, CqlParser.RULE_alterTableDropCompactStorage);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1081;
        this.kwDrop();
        this.state = 1082;
        this.kwCompact();
        this.state = 1083;
        this.kwStorage();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTableDropColumnsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableDropColumns;
    return this;
}

AlterTableDropColumnsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableDropColumnsContext.prototype.constructor = AlterTableDropColumnsContext;

AlterTableDropColumnsContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

AlterTableDropColumnsContext.prototype.alterTableDropColumnList = function() {
    return this.getTypedRuleContext(AlterTableDropColumnListContext,0);
};

AlterTableDropColumnsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTableDropColumns(this);
	}
};

AlterTableDropColumnsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTableDropColumns(this);
	}
};

AlterTableDropColumnsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTableDropColumns(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTableDropColumnsContext = AlterTableDropColumnsContext;

CqlParser.prototype.alterTableDropColumns = function() {

    var localctx = new AlterTableDropColumnsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, CqlParser.RULE_alterTableDropColumns);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1085;
        this.kwDrop();
        this.state = 1086;
        this.alterTableDropColumnList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTableDropColumnListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableDropColumnList;
    return this;
}

AlterTableDropColumnListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableDropColumnListContext.prototype.constructor = AlterTableDropColumnListContext;

AlterTableDropColumnListContext.prototype.column = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnContext);
    } else {
        return this.getTypedRuleContext(ColumnContext,i);
    }
};

AlterTableDropColumnListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

AlterTableDropColumnListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTableDropColumnList(this);
	}
};

AlterTableDropColumnListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTableDropColumnList(this);
	}
};

AlterTableDropColumnListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTableDropColumnList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTableDropColumnListContext = AlterTableDropColumnListContext;

CqlParser.prototype.alterTableDropColumnList = function() {

    var localctx = new AlterTableDropColumnListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, CqlParser.RULE_alterTableDropColumnList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1088;
        this.column();
        this.state = 1094;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1089;
            this.syntaxComma();
            this.state = 1090;
            this.column();
            this.state = 1096;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTableAddContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableAdd;
    return this;
}

AlterTableAddContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableAddContext.prototype.constructor = AlterTableAddContext;

AlterTableAddContext.prototype.kwAdd = function() {
    return this.getTypedRuleContext(KwAddContext,0);
};

AlterTableAddContext.prototype.alterTableColumnDefinition = function() {
    return this.getTypedRuleContext(AlterTableColumnDefinitionContext,0);
};

AlterTableAddContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTableAdd(this);
	}
};

AlterTableAddContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTableAdd(this);
	}
};

AlterTableAddContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTableAdd(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTableAddContext = AlterTableAddContext;

CqlParser.prototype.alterTableAdd = function() {

    var localctx = new AlterTableAddContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, CqlParser.RULE_alterTableAdd);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1097;
        this.kwAdd();
        this.state = 1098;
        this.alterTableColumnDefinition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTableColumnDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableColumnDefinition;
    return this;
}

AlterTableColumnDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableColumnDefinitionContext.prototype.constructor = AlterTableColumnDefinitionContext;

AlterTableColumnDefinitionContext.prototype.column = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnContext);
    } else {
        return this.getTypedRuleContext(ColumnContext,i);
    }
};

AlterTableColumnDefinitionContext.prototype.dataType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DataTypeContext);
    } else {
        return this.getTypedRuleContext(DataTypeContext,i);
    }
};

AlterTableColumnDefinitionContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

AlterTableColumnDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTableColumnDefinition(this);
	}
};

AlterTableColumnDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTableColumnDefinition(this);
	}
};

AlterTableColumnDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTableColumnDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTableColumnDefinitionContext = AlterTableColumnDefinitionContext;

CqlParser.prototype.alterTableColumnDefinition = function() {

    var localctx = new AlterTableColumnDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, CqlParser.RULE_alterTableColumnDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1100;
        this.column();
        this.state = 1101;
        this.dataType();
        this.state = 1108;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1102;
            this.syntaxComma();
            this.state = 1103;
            this.column();
            this.state = 1104;
            this.dataType();
            this.state = 1110;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterRoleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterRole;
    return this;
}

AlterRoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterRoleContext.prototype.constructor = AlterRoleContext;

AlterRoleContext.prototype.kwAlter = function() {
    return this.getTypedRuleContext(KwAlterContext,0);
};

AlterRoleContext.prototype.kwRole = function() {
    return this.getTypedRuleContext(KwRoleContext,0);
};

AlterRoleContext.prototype.role = function() {
    return this.getTypedRuleContext(RoleContext,0);
};

AlterRoleContext.prototype.roleWith = function() {
    return this.getTypedRuleContext(RoleWithContext,0);
};

AlterRoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterRole(this);
	}
};

AlterRoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterRole(this);
	}
};

AlterRoleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterRole(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterRoleContext = AlterRoleContext;

CqlParser.prototype.alterRole = function() {

    var localctx = new AlterRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, CqlParser.RULE_alterRole);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1111;
        this.kwAlter();
        this.state = 1112;
        this.kwRole();
        this.state = 1113;
        this.role();
        this.state = 1115;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_WITH) {
            this.state = 1114;
            this.roleWith();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RoleWithContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_roleWith;
    return this;
}

RoleWithContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoleWithContext.prototype.constructor = RoleWithContext;

RoleWithContext.prototype.kwWith = function() {
    return this.getTypedRuleContext(KwWithContext,0);
};

RoleWithContext.prototype.roleWithOptions = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RoleWithOptionsContext);
    } else {
        return this.getTypedRuleContext(RoleWithOptionsContext,i);
    }
};

RoleWithContext.prototype.kwAnd = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KwAndContext);
    } else {
        return this.getTypedRuleContext(KwAndContext,i);
    }
};

RoleWithContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterRoleWith(this);
	}
};

RoleWithContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitRoleWith(this);
	}
};

RoleWithContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitRoleWith(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.RoleWithContext = RoleWithContext;

CqlParser.prototype.roleWith = function() {

    var localctx = new RoleWithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, CqlParser.RULE_roleWith);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1117;
        this.kwWith();

        this.state = 1118;
        this.roleWithOptions();
        this.state = 1124;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.K_AND) {
            this.state = 1119;
            this.kwAnd();
            this.state = 1120;
            this.roleWithOptions();
            this.state = 1126;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RoleWithOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_roleWithOptions;
    return this;
}

RoleWithOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoleWithOptionsContext.prototype.constructor = RoleWithOptionsContext;

RoleWithOptionsContext.prototype.kwPassword = function() {
    return this.getTypedRuleContext(KwPasswordContext,0);
};

RoleWithOptionsContext.prototype.OPERATOR_EQ = function() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
};

RoleWithOptionsContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

RoleWithOptionsContext.prototype.kwLogin = function() {
    return this.getTypedRuleContext(KwLoginContext,0);
};

RoleWithOptionsContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

RoleWithOptionsContext.prototype.kwSuperuser = function() {
    return this.getTypedRuleContext(KwSuperuserContext,0);
};

RoleWithOptionsContext.prototype.kwOptions = function() {
    return this.getTypedRuleContext(KwOptionsContext,0);
};

RoleWithOptionsContext.prototype.optionHash = function() {
    return this.getTypedRuleContext(OptionHashContext,0);
};

RoleWithOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterRoleWithOptions(this);
	}
};

RoleWithOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitRoleWithOptions(this);
	}
};

RoleWithOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitRoleWithOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.RoleWithOptionsContext = RoleWithOptionsContext;

CqlParser.prototype.roleWithOptions = function() {

    var localctx = new RoleWithOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, CqlParser.RULE_roleWithOptions);
    try {
        this.state = 1143;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CqlParser.K_PASSWORD:
            this.enterOuterAlt(localctx, 1);
            this.state = 1127;
            this.kwPassword();
            this.state = 1128;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1129;
            this.stringLiteral();
            break;
        case CqlParser.K_LOGIN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1131;
            this.kwLogin();
            this.state = 1132;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1133;
            this.booleanLiteral();
            break;
        case CqlParser.K_SUPERUSER:
            this.enterOuterAlt(localctx, 3);
            this.state = 1135;
            this.kwSuperuser();
            this.state = 1136;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1137;
            this.booleanLiteral();
            break;
        case CqlParser.K_OPTIONS:
            this.enterOuterAlt(localctx, 4);
            this.state = 1139;
            this.kwOptions();
            this.state = 1140;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1141;
            this.optionHash();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterMaterializedViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterMaterializedView;
    return this;
}

AlterMaterializedViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterMaterializedViewContext.prototype.constructor = AlterMaterializedViewContext;

AlterMaterializedViewContext.prototype.kwAlter = function() {
    return this.getTypedRuleContext(KwAlterContext,0);
};

AlterMaterializedViewContext.prototype.kwMaterialized = function() {
    return this.getTypedRuleContext(KwMaterializedContext,0);
};

AlterMaterializedViewContext.prototype.kwView = function() {
    return this.getTypedRuleContext(KwViewContext,0);
};

AlterMaterializedViewContext.prototype.materializedView = function() {
    return this.getTypedRuleContext(MaterializedViewContext,0);
};

AlterMaterializedViewContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

AlterMaterializedViewContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

AlterMaterializedViewContext.prototype.kwWith = function() {
    return this.getTypedRuleContext(KwWithContext,0);
};

AlterMaterializedViewContext.prototype.tableOptions = function() {
    return this.getTypedRuleContext(TableOptionsContext,0);
};

AlterMaterializedViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterMaterializedView(this);
	}
};

AlterMaterializedViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterMaterializedView(this);
	}
};

AlterMaterializedViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterMaterializedView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterMaterializedViewContext = AlterMaterializedViewContext;

CqlParser.prototype.alterMaterializedView = function() {

    var localctx = new AlterMaterializedViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, CqlParser.RULE_alterMaterializedView);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1145;
        this.kwAlter();
        this.state = 1146;
        this.kwMaterialized();
        this.state = 1147;
        this.kwView();
        this.state = 1151;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        if(la_===1) {
            this.state = 1148;
            this.keyspace();
            this.state = 1149;
            this.match(CqlParser.DOT);

        }
        this.state = 1153;
        this.materializedView();
        this.state = 1157;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_WITH) {
            this.state = 1154;
            this.kwWith();
            this.state = 1155;
            this.tableOptions();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropUserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropUser;
    return this;
}

DropUserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropUserContext.prototype.constructor = DropUserContext;

DropUserContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

DropUserContext.prototype.kwUser = function() {
    return this.getTypedRuleContext(KwUserContext,0);
};

DropUserContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

DropUserContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DropUserContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDropUser(this);
	}
};

DropUserContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDropUser(this);
	}
};

DropUserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDropUser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DropUserContext = DropUserContext;

CqlParser.prototype.dropUser = function() {

    var localctx = new DropUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, CqlParser.RULE_dropUser);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1159;
        this.kwDrop();
        this.state = 1160;
        this.kwUser();
        this.state = 1162;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        if(la_===1) {
            this.state = 1161;
            this.ifExist();

        }
        this.state = 1164;
        this.user();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropType;
    return this;
}

DropTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropTypeContext.prototype.constructor = DropTypeContext;

DropTypeContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

DropTypeContext.prototype.kwType = function() {
    return this.getTypedRuleContext(KwTypeContext,0);
};

DropTypeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

DropTypeContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DropTypeContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

DropTypeContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

DropTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDropType(this);
	}
};

DropTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDropType(this);
	}
};

DropTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDropType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DropTypeContext = DropTypeContext;

CqlParser.prototype.dropType = function() {

    var localctx = new DropTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, CqlParser.RULE_dropType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1166;
        this.kwDrop();
        this.state = 1167;
        this.kwType();
        this.state = 1169;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        if(la_===1) {
            this.state = 1168;
            this.ifExist();

        }
        this.state = 1174;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        if(la_===1) {
            this.state = 1171;
            this.keyspace();
            this.state = 1172;
            this.match(CqlParser.DOT);

        }
        this.state = 1176;
        this.type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropMaterializedViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropMaterializedView;
    return this;
}

DropMaterializedViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropMaterializedViewContext.prototype.constructor = DropMaterializedViewContext;

DropMaterializedViewContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

DropMaterializedViewContext.prototype.kwMaterialized = function() {
    return this.getTypedRuleContext(KwMaterializedContext,0);
};

DropMaterializedViewContext.prototype.kwView = function() {
    return this.getTypedRuleContext(KwViewContext,0);
};

DropMaterializedViewContext.prototype.materializedView = function() {
    return this.getTypedRuleContext(MaterializedViewContext,0);
};

DropMaterializedViewContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DropMaterializedViewContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

DropMaterializedViewContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

DropMaterializedViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDropMaterializedView(this);
	}
};

DropMaterializedViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDropMaterializedView(this);
	}
};

DropMaterializedViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDropMaterializedView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DropMaterializedViewContext = DropMaterializedViewContext;

CqlParser.prototype.dropMaterializedView = function() {

    var localctx = new DropMaterializedViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, CqlParser.RULE_dropMaterializedView);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1178;
        this.kwDrop();
        this.state = 1179;
        this.kwMaterialized();
        this.state = 1180;
        this.kwView();
        this.state = 1182;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        if(la_===1) {
            this.state = 1181;
            this.ifExist();

        }
        this.state = 1187;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        if(la_===1) {
            this.state = 1184;
            this.keyspace();
            this.state = 1185;
            this.match(CqlParser.DOT);

        }
        this.state = 1189;
        this.materializedView();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropAggregateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropAggregate;
    return this;
}

DropAggregateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropAggregateContext.prototype.constructor = DropAggregateContext;

DropAggregateContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

DropAggregateContext.prototype.kwAggregate = function() {
    return this.getTypedRuleContext(KwAggregateContext,0);
};

DropAggregateContext.prototype.aggregate = function() {
    return this.getTypedRuleContext(AggregateContext,0);
};

DropAggregateContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DropAggregateContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

DropAggregateContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

DropAggregateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDropAggregate(this);
	}
};

DropAggregateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDropAggregate(this);
	}
};

DropAggregateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDropAggregate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DropAggregateContext = DropAggregateContext;

CqlParser.prototype.dropAggregate = function() {

    var localctx = new DropAggregateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, CqlParser.RULE_dropAggregate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1191;
        this.kwDrop();
        this.state = 1192;
        this.kwAggregate();
        this.state = 1194;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        if(la_===1) {
            this.state = 1193;
            this.ifExist();

        }
        this.state = 1199;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        if(la_===1) {
            this.state = 1196;
            this.keyspace();
            this.state = 1197;
            this.match(CqlParser.DOT);

        }
        this.state = 1201;
        this.aggregate();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropFunction;
    return this;
}

DropFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropFunctionContext.prototype.constructor = DropFunctionContext;

DropFunctionContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

DropFunctionContext.prototype.kwFunction = function() {
    return this.getTypedRuleContext(KwFunctionContext,0);
};

DropFunctionContext.prototype.functionStatement = function() {
    return this.getTypedRuleContext(FunctionStatementContext,0);
};

DropFunctionContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DropFunctionContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

DropFunctionContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

DropFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDropFunction(this);
	}
};

DropFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDropFunction(this);
	}
};

DropFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDropFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DropFunctionContext = DropFunctionContext;

CqlParser.prototype.dropFunction = function() {

    var localctx = new DropFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, CqlParser.RULE_dropFunction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1203;
        this.kwDrop();
        this.state = 1204;
        this.kwFunction();
        this.state = 1206;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        if(la_===1) {
            this.state = 1205;
            this.ifExist();

        }
        this.state = 1211;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        if(la_===1) {
            this.state = 1208;
            this.keyspace();
            this.state = 1209;
            this.match(CqlParser.DOT);

        }
        this.state = 1213;
        this.functionStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropTriggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropTrigger;
    return this;
}

DropTriggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropTriggerContext.prototype.constructor = DropTriggerContext;

DropTriggerContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

DropTriggerContext.prototype.kwTrigger = function() {
    return this.getTypedRuleContext(KwTriggerContext,0);
};

DropTriggerContext.prototype.trigger = function() {
    return this.getTypedRuleContext(TriggerContext,0);
};

DropTriggerContext.prototype.kwOn = function() {
    return this.getTypedRuleContext(KwOnContext,0);
};

DropTriggerContext.prototype.table = function() {
    return this.getTypedRuleContext(TableContext,0);
};

DropTriggerContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DropTriggerContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

DropTriggerContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

DropTriggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDropTrigger(this);
	}
};

DropTriggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDropTrigger(this);
	}
};

DropTriggerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDropTrigger(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DropTriggerContext = DropTriggerContext;

CqlParser.prototype.dropTrigger = function() {

    var localctx = new DropTriggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, CqlParser.RULE_dropTrigger);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1215;
        this.kwDrop();
        this.state = 1216;
        this.kwTrigger();
        this.state = 1218;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        if(la_===1) {
            this.state = 1217;
            this.ifExist();

        }
        this.state = 1220;
        this.trigger();
        this.state = 1221;
        this.kwOn();
        this.state = 1225;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
        if(la_===1) {
            this.state = 1222;
            this.keyspace();
            this.state = 1223;
            this.match(CqlParser.DOT);

        }
        this.state = 1227;
        this.table();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropRoleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropRole;
    return this;
}

DropRoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropRoleContext.prototype.constructor = DropRoleContext;

DropRoleContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

DropRoleContext.prototype.kwRole = function() {
    return this.getTypedRuleContext(KwRoleContext,0);
};

DropRoleContext.prototype.role = function() {
    return this.getTypedRuleContext(RoleContext,0);
};

DropRoleContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DropRoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDropRole(this);
	}
};

DropRoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDropRole(this);
	}
};

DropRoleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDropRole(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DropRoleContext = DropRoleContext;

CqlParser.prototype.dropRole = function() {

    var localctx = new DropRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, CqlParser.RULE_dropRole);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1229;
        this.kwDrop();
        this.state = 1230;
        this.kwRole();
        this.state = 1232;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
        if(la_===1) {
            this.state = 1231;
            this.ifExist();

        }
        this.state = 1234;
        this.role();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropTable;
    return this;
}

DropTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropTableContext.prototype.constructor = DropTableContext;

DropTableContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

DropTableContext.prototype.kwTable = function() {
    return this.getTypedRuleContext(KwTableContext,0);
};

DropTableContext.prototype.table = function() {
    return this.getTypedRuleContext(TableContext,0);
};

DropTableContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DropTableContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

DropTableContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

DropTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDropTable(this);
	}
};

DropTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDropTable(this);
	}
};

DropTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDropTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DropTableContext = DropTableContext;

CqlParser.prototype.dropTable = function() {

    var localctx = new DropTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, CqlParser.RULE_dropTable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1236;
        this.kwDrop();
        this.state = 1237;
        this.kwTable();
        this.state = 1239;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
        if(la_===1) {
            this.state = 1238;
            this.ifExist();

        }
        this.state = 1244;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
        if(la_===1) {
            this.state = 1241;
            this.keyspace();
            this.state = 1242;
            this.match(CqlParser.DOT);

        }
        this.state = 1246;
        this.table();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropKeyspaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropKeyspace;
    return this;
}

DropKeyspaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropKeyspaceContext.prototype.constructor = DropKeyspaceContext;

DropKeyspaceContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

DropKeyspaceContext.prototype.kwKeyspace = function() {
    return this.getTypedRuleContext(KwKeyspaceContext,0);
};

DropKeyspaceContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

DropKeyspaceContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DropKeyspaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDropKeyspace(this);
	}
};

DropKeyspaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDropKeyspace(this);
	}
};

DropKeyspaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDropKeyspace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DropKeyspaceContext = DropKeyspaceContext;

CqlParser.prototype.dropKeyspace = function() {

    var localctx = new DropKeyspaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, CqlParser.RULE_dropKeyspace);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1248;
        this.kwDrop();
        this.state = 1249;
        this.kwKeyspace();
        this.state = 1251;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
        if(la_===1) {
            this.state = 1250;
            this.ifExist();

        }
        this.state = 1253;
        this.keyspace();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropIndexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropIndex;
    return this;
}

DropIndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropIndexContext.prototype.constructor = DropIndexContext;

DropIndexContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

DropIndexContext.prototype.kwIndex = function() {
    return this.getTypedRuleContext(KwIndexContext,0);
};

DropIndexContext.prototype.indexName = function() {
    return this.getTypedRuleContext(IndexNameContext,0);
};

DropIndexContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DropIndexContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

DropIndexContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

DropIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDropIndex(this);
	}
};

DropIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDropIndex(this);
	}
};

DropIndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDropIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DropIndexContext = DropIndexContext;

CqlParser.prototype.dropIndex = function() {

    var localctx = new DropIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, CqlParser.RULE_dropIndex);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1255;
        this.kwDrop();
        this.state = 1256;
        this.kwIndex();
        this.state = 1258;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
        if(la_===1) {
            this.state = 1257;
            this.ifExist();

        }
        this.state = 1263;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
        if(la_===1) {
            this.state = 1260;
            this.keyspace();
            this.state = 1261;
            this.match(CqlParser.DOT);

        }
        this.state = 1265;
        this.indexName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createTable;
    return this;
}

CreateTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTableContext.prototype.constructor = CreateTableContext;

CreateTableContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

CreateTableContext.prototype.kwTable = function() {
    return this.getTypedRuleContext(KwTableContext,0);
};

CreateTableContext.prototype.table = function() {
    return this.getTypedRuleContext(TableContext,0);
};

CreateTableContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

CreateTableContext.prototype.columnDefinitionList = function() {
    return this.getTypedRuleContext(ColumnDefinitionListContext,0);
};

CreateTableContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

CreateTableContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

CreateTableContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

CreateTableContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

CreateTableContext.prototype.withElement = function() {
    return this.getTypedRuleContext(WithElementContext,0);
};

CreateTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateTable(this);
	}
};

CreateTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateTable(this);
	}
};

CreateTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateTableContext = CreateTableContext;

CqlParser.prototype.createTable = function() {

    var localctx = new CreateTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, CqlParser.RULE_createTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1267;
        this.kwCreate();
        this.state = 1268;
        this.kwTable();
        this.state = 1270;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
        if(la_===1) {
            this.state = 1269;
            this.ifNotExist();

        }
        this.state = 1275;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        if(la_===1) {
            this.state = 1272;
            this.keyspace();
            this.state = 1273;
            this.match(CqlParser.DOT);

        }
        this.state = 1277;
        this.table();
        this.state = 1278;
        this.syntaxBracketLr();
        this.state = 1279;
        this.columnDefinitionList();
        this.state = 1280;
        this.syntaxBracketRr();
        this.state = 1282;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_WITH) {
            this.state = 1281;
            this.withElement();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WithElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_withElement;
    return this;
}

WithElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithElementContext.prototype.constructor = WithElementContext;

WithElementContext.prototype.kwWith = function() {
    return this.getTypedRuleContext(KwWithContext,0);
};

WithElementContext.prototype.tableOptions = function() {
    return this.getTypedRuleContext(TableOptionsContext,0);
};

WithElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterWithElement(this);
	}
};

WithElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitWithElement(this);
	}
};

WithElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitWithElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.WithElementContext = WithElementContext;

CqlParser.prototype.withElement = function() {

    var localctx = new WithElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, CqlParser.RULE_withElement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1284;
        this.kwWith();
        this.state = 1286;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 23)) & ~0x1f) == 0 && ((1 << (_la - 23)) & ((1 << (CqlParser.K_ADD - 23)) | (1 << (CqlParser.K_ALL - 23)) | (1 << (CqlParser.K_ALLOW - 23)) | (1 << (CqlParser.K_ALTER - 23)) | (1 << (CqlParser.K_AND - 23)) | (1 << (CqlParser.K_ANY - 23)) | (1 << (CqlParser.K_APPLY - 23)) | (1 << (CqlParser.K_AS - 23)) | (1 << (CqlParser.K_ASC - 23)) | (1 << (CqlParser.K_AUTHORIZE - 23)) | (1 << (CqlParser.K_BATCH - 23)) | (1 << (CqlParser.K_BEGIN - 23)) | (1 << (CqlParser.K_BY - 23)) | (1 << (CqlParser.K_CALLED - 23)) | (1 << (CqlParser.K_CLUSTERING - 23)) | (1 << (CqlParser.K_COLUMNFAMILY - 23)) | (1 << (CqlParser.K_COMPACT - 23)) | (1 << (CqlParser.K_CONSISTENCY - 23)) | (1 << (CqlParser.K_CONTAINS - 23)) | (1 << (CqlParser.K_CREATE - 23)) | (1 << (CqlParser.K_CUSTOM - 23)) | (1 << (CqlParser.K_DELETE - 23)) | (1 << (CqlParser.K_DESC - 23)) | (1 << (CqlParser.K_DESCRIBE - 23)) | (1 << (CqlParser.K_DISTINCT - 23)) | (1 << (CqlParser.K_DROP - 23)) | (1 << (CqlParser.K_DURABLE_WRITES - 23)) | (1 << (CqlParser.K_EACH_QUORUM - 23)) | (1 << (CqlParser.K_ENTRIES - 23)) | (1 << (CqlParser.K_EXECUTE - 23)) | (1 << (CqlParser.K_EXISTS - 23)))) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (CqlParser.K_FALSE - 55)) | (1 << (CqlParser.K_FILTERING - 55)) | (1 << (CqlParser.K_FINALFUNC - 55)) | (1 << (CqlParser.K_FROM - 55)) | (1 << (CqlParser.K_FULL - 55)) | (1 << (CqlParser.K_FUNCTION - 55)) | (1 << (CqlParser.K_FUNCTIONS - 55)) | (1 << (CqlParser.K_GRANT - 55)) | (1 << (CqlParser.K_IF - 55)) | (1 << (CqlParser.K_IN - 55)) | (1 << (CqlParser.K_INDEX - 55)) | (1 << (CqlParser.K_INFINITY - 55)) | (1 << (CqlParser.K_INITCOND - 55)) | (1 << (CqlParser.K_INPUT - 55)) | (1 << (CqlParser.K_INSERT - 55)) | (1 << (CqlParser.K_INTO - 55)) | (1 << (CqlParser.K_IS - 55)) | (1 << (CqlParser.K_JSON - 55)) | (1 << (CqlParser.K_KEY - 55)) | (1 << (CqlParser.K_KEYS - 55)) | (1 << (CqlParser.K_KEYSPACE - 55)) | (1 << (CqlParser.K_KEYSPACES - 55)) | (1 << (CqlParser.K_LANGUAGE - 55)) | (1 << (CqlParser.K_LEVEL - 55)) | (1 << (CqlParser.K_LIMIT - 55)) | (1 << (CqlParser.K_LOCAL_ONE - 55)) | (1 << (CqlParser.K_LOCAL_QUORUM - 55)) | (1 << (CqlParser.K_LOGGED - 55)) | (1 << (CqlParser.K_LOGIN - 55)) | (1 << (CqlParser.K_MATERIALIZED - 55)) | (1 << (CqlParser.K_MODIFY - 55)) | (1 << (CqlParser.K_NAN - 55)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (CqlParser.K_NORECURSIVE - 87)) | (1 << (CqlParser.K_NOSUPERUSER - 87)) | (1 << (CqlParser.K_NOT - 87)) | (1 << (CqlParser.K_NULL - 87)) | (1 << (CqlParser.K_OF - 87)) | (1 << (CqlParser.K_ON - 87)) | (1 << (CqlParser.K_ONE - 87)) | (1 << (CqlParser.K_OPTIONS - 87)) | (1 << (CqlParser.K_OR - 87)) | (1 << (CqlParser.K_ORDER - 87)) | (1 << (CqlParser.K_PARTITION - 87)) | (1 << (CqlParser.K_PASSWORD - 87)) | (1 << (CqlParser.K_PER - 87)) | (1 << (CqlParser.K_PERMISSION - 87)) | (1 << (CqlParser.K_PERMISSIONS - 87)) | (1 << (CqlParser.K_PRIMARY - 87)) | (1 << (CqlParser.K_QUORUM - 87)) | (1 << (CqlParser.K_RENAME - 87)) | (1 << (CqlParser.K_REPLACE - 87)) | (1 << (CqlParser.K_REPLICATION - 87)) | (1 << (CqlParser.K_RETURNS - 87)) | (1 << (CqlParser.K_REVOKE - 87)) | (1 << (CqlParser.K_ROLE - 87)) | (1 << (CqlParser.K_ROLES - 87)) | (1 << (CqlParser.K_SCHEMA - 87)) | (1 << (CqlParser.K_SELECT - 87)) | (1 << (CqlParser.K_SET - 87)) | (1 << (CqlParser.K_SFUNC - 87)) | (1 << (CqlParser.K_STATIC - 87)))) !== 0) || ((((_la - 119)) & ~0x1f) == 0 && ((1 << (_la - 119)) & ((1 << (CqlParser.K_STORAGE - 119)) | (1 << (CqlParser.K_STYPE - 119)) | (1 << (CqlParser.K_SUPERUSER - 119)) | (1 << (CqlParser.K_TABLE - 119)) | (1 << (CqlParser.K_THREE - 119)) | (1 << (CqlParser.K_TIMESTAMP - 119)) | (1 << (CqlParser.K_TO - 119)) | (1 << (CqlParser.K_TOKEN - 119)) | (1 << (CqlParser.K_TRIGGER - 119)) | (1 << (CqlParser.K_TRUE - 119)) | (1 << (CqlParser.K_TRUNCATE - 119)) | (1 << (CqlParser.K_TTL - 119)) | (1 << (CqlParser.K_TWO - 119)) | (1 << (CqlParser.K_TYPE - 119)) | (1 << (CqlParser.K_UNLOGGED - 119)) | (1 << (CqlParser.K_UPDATE - 119)) | (1 << (CqlParser.K_USE - 119)) | (1 << (CqlParser.K_USER - 119)) | (1 << (CqlParser.K_USING - 119)) | (1 << (CqlParser.K_UUID - 119)) | (1 << (CqlParser.K_VALUES - 119)) | (1 << (CqlParser.K_VIEW - 119)) | (1 << (CqlParser.K_WHERE - 119)) | (1 << (CqlParser.K_WITH - 119)) | (1 << (CqlParser.K_WRITETIME - 119)) | (1 << (CqlParser.K_ASCII - 119)) | (1 << (CqlParser.K_BIGINT - 119)) | (1 << (CqlParser.K_BLOB - 119)) | (1 << (CqlParser.K_BOOLEAN - 119)) | (1 << (CqlParser.K_COUNTER - 119)) | (1 << (CqlParser.K_DATE - 119)) | (1 << (CqlParser.K_DECIMAL - 119)))) !== 0) || ((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (CqlParser.K_DOUBLE - 151)) | (1 << (CqlParser.K_FLOAT - 151)) | (1 << (CqlParser.K_FROZEN - 151)) | (1 << (CqlParser.K_INET - 151)) | (1 << (CqlParser.K_INT - 151)) | (1 << (CqlParser.K_LIST - 151)) | (1 << (CqlParser.K_MAP - 151)) | (1 << (CqlParser.K_SMALLINT - 151)) | (1 << (CqlParser.K_TEXT - 151)) | (1 << (CqlParser.K_TIMEUUID - 151)) | (1 << (CqlParser.K_TIME - 151)) | (1 << (CqlParser.K_TINYINT - 151)) | (1 << (CqlParser.K_TUPLE - 151)) | (1 << (CqlParser.K_VARCHAR - 151)) | (1 << (CqlParser.K_VARINT - 151)) | (1 << (CqlParser.OBJECT_NAME - 151)) | (1 << (CqlParser.K_USERS - 151)))) !== 0)) {
            this.state = 1285;
            this.tableOptions();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClusteringOrderColumnsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_clusteringOrderColumns;
    return this;
}

ClusteringOrderColumnsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClusteringOrderColumnsContext.prototype.constructor = ClusteringOrderColumnsContext;

ClusteringOrderColumnsContext.prototype.column = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnContext);
    } else {
        return this.getTypedRuleContext(ColumnContext,i);
    }
};

ClusteringOrderColumnsContext.prototype.orderDirection = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OrderDirectionContext);
    } else {
        return this.getTypedRuleContext(OrderDirectionContext,i);
    }
};

ClusteringOrderColumnsContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

ClusteringOrderColumnsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterClusteringOrderColumns(this);
	}
};

ClusteringOrderColumnsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitClusteringOrderColumns(this);
	}
};

ClusteringOrderColumnsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitClusteringOrderColumns(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ClusteringOrderColumnsContext = ClusteringOrderColumnsContext;

CqlParser.prototype.clusteringOrderColumns = function() {

    var localctx = new ClusteringOrderColumnsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, CqlParser.RULE_clusteringOrderColumns);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1288;
        this.column();
        this.state = 1290;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_ASC || _la===CqlParser.K_DESC) {
            this.state = 1289;
            this.orderDirection();
        }

        this.state = 1299;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1292;
            this.syntaxComma();
            this.state = 1293;
            this.column();
            this.state = 1295;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CqlParser.K_ASC || _la===CqlParser.K_DESC) {
                this.state = 1294;
                this.orderDirection();
            }

            this.state = 1301;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClusteringOrderContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_clusteringOrder;
    return this;
}

ClusteringOrderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClusteringOrderContext.prototype.constructor = ClusteringOrderContext;

ClusteringOrderContext.prototype.kwClustering = function() {
    return this.getTypedRuleContext(KwClusteringContext,0);
};

ClusteringOrderContext.prototype.kwOrder = function() {
    return this.getTypedRuleContext(KwOrderContext,0);
};

ClusteringOrderContext.prototype.kwBy = function() {
    return this.getTypedRuleContext(KwByContext,0);
};

ClusteringOrderContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

ClusteringOrderContext.prototype.clusteringOrderColumns = function() {
    return this.getTypedRuleContext(ClusteringOrderColumnsContext,0);
};

ClusteringOrderContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

ClusteringOrderContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterClusteringOrder(this);
	}
};

ClusteringOrderContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitClusteringOrder(this);
	}
};

ClusteringOrderContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitClusteringOrder(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ClusteringOrderContext = ClusteringOrderContext;

CqlParser.prototype.clusteringOrder = function() {

    var localctx = new ClusteringOrderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, CqlParser.RULE_clusteringOrder);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1302;
        this.kwClustering();
        this.state = 1303;
        this.kwOrder();
        this.state = 1304;
        this.kwBy();
        this.state = 1305;
        this.syntaxBracketLr();
        this.state = 1306;
        this.clusteringOrderColumns();
        this.state = 1307;
        this.syntaxBracketRr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_tableOptions;
    return this;
}

TableOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableOptionsContext.prototype.constructor = TableOptionsContext;

TableOptionsContext.prototype.tableOptionItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableOptionItemContext);
    } else {
        return this.getTypedRuleContext(TableOptionItemContext,i);
    }
};

TableOptionsContext.prototype.kwAnd = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KwAndContext);
    } else {
        return this.getTypedRuleContext(KwAndContext,i);
    }
};

TableOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTableOptions(this);
	}
};

TableOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTableOptions(this);
	}
};

TableOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTableOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TableOptionsContext = TableOptionsContext;

CqlParser.prototype.tableOptions = function() {

    var localctx = new TableOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, CqlParser.RULE_tableOptions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1309;
        this.tableOptionItem();
        this.state = 1315;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.K_AND) {
            this.state = 1310;
            this.kwAnd();
            this.state = 1311;
            this.tableOptionItem();
            this.state = 1317;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableOptionItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_tableOptionItem;
    return this;
}

TableOptionItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableOptionItemContext.prototype.constructor = TableOptionItemContext;

TableOptionItemContext.prototype.tableOptionName = function() {
    return this.getTypedRuleContext(TableOptionNameContext,0);
};

TableOptionItemContext.prototype.OPERATOR_EQ = function() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
};

TableOptionItemContext.prototype.tableOptionValue = function() {
    return this.getTypedRuleContext(TableOptionValueContext,0);
};

TableOptionItemContext.prototype.optionHash = function() {
    return this.getTypedRuleContext(OptionHashContext,0);
};

TableOptionItemContext.prototype.clusteringOrder = function() {
    return this.getTypedRuleContext(ClusteringOrderContext,0);
};

TableOptionItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTableOptionItem(this);
	}
};

TableOptionItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTableOptionItem(this);
	}
};

TableOptionItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTableOptionItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TableOptionItemContext = TableOptionItemContext;

CqlParser.prototype.tableOptionItem = function() {

    var localctx = new TableOptionItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, CqlParser.RULE_tableOptionItem);
    try {
        this.state = 1327;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1318;
            this.tableOptionName();
            this.state = 1319;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1320;
            this.tableOptionValue();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1322;
            this.tableOptionName();
            this.state = 1323;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1324;
            this.optionHash();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1326;
            this.clusteringOrder();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableOptionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_tableOptionName;
    return this;
}

TableOptionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableOptionNameContext.prototype.constructor = TableOptionNameContext;

TableOptionNameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

TableOptionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTableOptionName(this);
	}
};

TableOptionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTableOptionName(this);
	}
};

TableOptionNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTableOptionName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TableOptionNameContext = TableOptionNameContext;

CqlParser.prototype.tableOptionName = function() {

    var localctx = new TableOptionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, CqlParser.RULE_tableOptionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1329;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableOptionValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_tableOptionValue;
    return this;
}

TableOptionValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableOptionValueContext.prototype.constructor = TableOptionValueContext;

TableOptionValueContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

TableOptionValueContext.prototype.floatLiteral = function() {
    return this.getTypedRuleContext(FloatLiteralContext,0);
};

TableOptionValueContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

TableOptionValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTableOptionValue(this);
	}
};

TableOptionValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTableOptionValue(this);
	}
};

TableOptionValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTableOptionValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TableOptionValueContext = TableOptionValueContext;

CqlParser.prototype.tableOptionValue = function() {

    var localctx = new TableOptionValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, CqlParser.RULE_tableOptionValue);
    try {
        this.state = 1334;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CqlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1331;
            this.stringLiteral();
            break;
        case CqlParser.DECIMAL_LITERAL:
        case CqlParser.FLOAT_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1332;
            this.floatLiteral();
            break;
        case CqlParser.K_ADD:
        case CqlParser.K_ALL:
        case CqlParser.K_ALLOW:
        case CqlParser.K_ALTER:
        case CqlParser.K_AND:
        case CqlParser.K_ANY:
        case CqlParser.K_APPLY:
        case CqlParser.K_AS:
        case CqlParser.K_ASC:
        case CqlParser.K_AUTHORIZE:
        case CqlParser.K_BATCH:
        case CqlParser.K_BEGIN:
        case CqlParser.K_BY:
        case CqlParser.K_CALLED:
        case CqlParser.K_CLUSTERING:
        case CqlParser.K_COLUMNFAMILY:
        case CqlParser.K_COMPACT:
        case CqlParser.K_CONSISTENCY:
        case CqlParser.K_CONTAINS:
        case CqlParser.K_CREATE:
        case CqlParser.K_CUSTOM:
        case CqlParser.K_DELETE:
        case CqlParser.K_DESC:
        case CqlParser.K_DESCRIBE:
        case CqlParser.K_DISTINCT:
        case CqlParser.K_DROP:
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_EACH_QUORUM:
        case CqlParser.K_ENTRIES:
        case CqlParser.K_EXECUTE:
        case CqlParser.K_EXISTS:
        case CqlParser.K_FALSE:
        case CqlParser.K_FILTERING:
        case CqlParser.K_FINALFUNC:
        case CqlParser.K_FROM:
        case CqlParser.K_FULL:
        case CqlParser.K_FUNCTION:
        case CqlParser.K_FUNCTIONS:
        case CqlParser.K_GRANT:
        case CqlParser.K_IF:
        case CqlParser.K_IN:
        case CqlParser.K_INDEX:
        case CqlParser.K_INFINITY:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_INSERT:
        case CqlParser.K_INTO:
        case CqlParser.K_IS:
        case CqlParser.K_JSON:
        case CqlParser.K_KEY:
        case CqlParser.K_KEYS:
        case CqlParser.K_KEYSPACE:
        case CqlParser.K_KEYSPACES:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_LIMIT:
        case CqlParser.K_LOCAL_ONE:
        case CqlParser.K_LOCAL_QUORUM:
        case CqlParser.K_LOGGED:
        case CqlParser.K_LOGIN:
        case CqlParser.K_MATERIALIZED:
        case CqlParser.K_MODIFY:
        case CqlParser.K_NAN:
        case CqlParser.K_NORECURSIVE:
        case CqlParser.K_NOSUPERUSER:
        case CqlParser.K_NOT:
        case CqlParser.K_NULL:
        case CqlParser.K_OF:
        case CqlParser.K_ON:
        case CqlParser.K_ONE:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_OR:
        case CqlParser.K_ORDER:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PASSWORD:
        case CqlParser.K_PER:
        case CqlParser.K_PERMISSION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_PRIMARY:
        case CqlParser.K_QUORUM:
        case CqlParser.K_RENAME:
        case CqlParser.K_REPLACE:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_RETURNS:
        case CqlParser.K_REVOKE:
        case CqlParser.K_ROLE:
        case CqlParser.K_ROLES:
        case CqlParser.K_SCHEMA:
        case CqlParser.K_SELECT:
        case CqlParser.K_SET:
        case CqlParser.K_SFUNC:
        case CqlParser.K_STATIC:
        case CqlParser.K_STORAGE:
        case CqlParser.K_STYPE:
        case CqlParser.K_SUPERUSER:
        case CqlParser.K_TABLE:
        case CqlParser.K_THREE:
        case CqlParser.K_TIMESTAMP:
        case CqlParser.K_TO:
        case CqlParser.K_TOKEN:
        case CqlParser.K_TRIGGER:
        case CqlParser.K_TRUE:
        case CqlParser.K_TRUNCATE:
        case CqlParser.K_TTL:
        case CqlParser.K_TWO:
        case CqlParser.K_TYPE:
        case CqlParser.K_UNLOGGED:
        case CqlParser.K_UPDATE:
        case CqlParser.K_USE:
        case CqlParser.K_USER:
        case CqlParser.K_USING:
        case CqlParser.K_UUID:
        case CqlParser.K_VALUES:
        case CqlParser.K_VIEW:
        case CqlParser.K_WHERE:
        case CqlParser.K_WITH:
        case CqlParser.K_WRITETIME:
        case CqlParser.K_ASCII:
        case CqlParser.K_BIGINT:
        case CqlParser.K_BLOB:
        case CqlParser.K_BOOLEAN:
        case CqlParser.K_COUNTER:
        case CqlParser.K_DATE:
        case CqlParser.K_DECIMAL:
        case CqlParser.K_DOUBLE:
        case CqlParser.K_FLOAT:
        case CqlParser.K_FROZEN:
        case CqlParser.K_INET:
        case CqlParser.K_INT:
        case CqlParser.K_LIST:
        case CqlParser.K_MAP:
        case CqlParser.K_SMALLINT:
        case CqlParser.K_TEXT:
        case CqlParser.K_TIMEUUID:
        case CqlParser.K_TIME:
        case CqlParser.K_TINYINT:
        case CqlParser.K_TUPLE:
        case CqlParser.K_VARCHAR:
        case CqlParser.K_VARINT:
        case CqlParser.OBJECT_NAME:
        case CqlParser.K_USERS:
            this.enterOuterAlt(localctx, 3);
            this.state = 1333;
            this.id();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionHashContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_optionHash;
    return this;
}

OptionHashContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionHashContext.prototype.constructor = OptionHashContext;

OptionHashContext.prototype.syntaxBracketLc = function() {
    return this.getTypedRuleContext(SyntaxBracketLcContext,0);
};

OptionHashContext.prototype.optionHashItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OptionHashItemContext);
    } else {
        return this.getTypedRuleContext(OptionHashItemContext,i);
    }
};

OptionHashContext.prototype.syntaxBracketRc = function() {
    return this.getTypedRuleContext(SyntaxBracketRcContext,0);
};

OptionHashContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

OptionHashContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterOptionHash(this);
	}
};

OptionHashContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitOptionHash(this);
	}
};

OptionHashContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitOptionHash(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.OptionHashContext = OptionHashContext;

CqlParser.prototype.optionHash = function() {

    var localctx = new OptionHashContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, CqlParser.RULE_optionHash);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1336;
        this.syntaxBracketLc();
        this.state = 1337;
        this.optionHashItem();
        this.state = 1343;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1338;
            this.syntaxComma();
            this.state = 1339;
            this.optionHashItem();
            this.state = 1345;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1346;
        this.syntaxBracketRc();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionHashItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_optionHashItem;
    return this;
}

OptionHashItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionHashItemContext.prototype.constructor = OptionHashItemContext;

OptionHashItemContext.prototype.optionHashKey = function() {
    return this.getTypedRuleContext(OptionHashKeyContext,0);
};

OptionHashItemContext.prototype.COLON = function() {
    return this.getToken(CqlParser.COLON, 0);
};

OptionHashItemContext.prototype.optionHashValue = function() {
    return this.getTypedRuleContext(OptionHashValueContext,0);
};

OptionHashItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterOptionHashItem(this);
	}
};

OptionHashItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitOptionHashItem(this);
	}
};

OptionHashItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitOptionHashItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.OptionHashItemContext = OptionHashItemContext;

CqlParser.prototype.optionHashItem = function() {

    var localctx = new OptionHashItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, CqlParser.RULE_optionHashItem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1348;
        this.optionHashKey();
        this.state = 1349;
        this.match(CqlParser.COLON);
        this.state = 1350;
        this.optionHashValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionHashKeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_optionHashKey;
    return this;
}

OptionHashKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionHashKeyContext.prototype.constructor = OptionHashKeyContext;

OptionHashKeyContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

OptionHashKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterOptionHashKey(this);
	}
};

OptionHashKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitOptionHashKey(this);
	}
};

OptionHashKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitOptionHashKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.OptionHashKeyContext = OptionHashKeyContext;

CqlParser.prototype.optionHashKey = function() {

    var localctx = new OptionHashKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, CqlParser.RULE_optionHashKey);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1352;
        this.stringLiteral();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionHashValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_optionHashValue;
    return this;
}

OptionHashValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionHashValueContext.prototype.constructor = OptionHashValueContext;

OptionHashValueContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

OptionHashValueContext.prototype.floatLiteral = function() {
    return this.getTypedRuleContext(FloatLiteralContext,0);
};

OptionHashValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterOptionHashValue(this);
	}
};

OptionHashValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitOptionHashValue(this);
	}
};

OptionHashValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitOptionHashValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.OptionHashValueContext = OptionHashValueContext;

CqlParser.prototype.optionHashValue = function() {

    var localctx = new OptionHashValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, CqlParser.RULE_optionHashValue);
    try {
        this.state = 1356;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CqlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1354;
            this.stringLiteral();
            break;
        case CqlParser.DECIMAL_LITERAL:
        case CqlParser.FLOAT_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1355;
            this.floatLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnDefinitionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_columnDefinitionList;
    return this;
}

ColumnDefinitionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnDefinitionListContext.prototype.constructor = ColumnDefinitionListContext;

ColumnDefinitionListContext.prototype.columnDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnDefinitionContext);
    } else {
        return this.getTypedRuleContext(ColumnDefinitionContext,i);
    }
};

ColumnDefinitionListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

ColumnDefinitionListContext.prototype.primaryKeyElement = function() {
    return this.getTypedRuleContext(PrimaryKeyElementContext,0);
};

ColumnDefinitionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterColumnDefinitionList(this);
	}
};

ColumnDefinitionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitColumnDefinitionList(this);
	}
};

ColumnDefinitionListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitColumnDefinitionList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ColumnDefinitionListContext = ColumnDefinitionListContext;

CqlParser.prototype.columnDefinitionList = function() {

    var localctx = new ColumnDefinitionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, CqlParser.RULE_columnDefinitionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1358;
        this.columnDefinition();
        this.state = 1364;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,95,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1359;
                this.syntaxComma();
                this.state = 1360;
                this.columnDefinition(); 
            }
            this.state = 1366;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,95,this._ctx);
        }

        this.state = 1370;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.COMMA) {
            this.state = 1367;
            this.syntaxComma();
            this.state = 1368;
            this.primaryKeyElement();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_columnDefinition;
    return this;
}

ColumnDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnDefinitionContext.prototype.constructor = ColumnDefinitionContext;

ColumnDefinitionContext.prototype.column = function() {
    return this.getTypedRuleContext(ColumnContext,0);
};

ColumnDefinitionContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

ColumnDefinitionContext.prototype.primaryKeyColumn = function() {
    return this.getTypedRuleContext(PrimaryKeyColumnContext,0);
};

ColumnDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterColumnDefinition(this);
	}
};

ColumnDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitColumnDefinition(this);
	}
};

ColumnDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitColumnDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ColumnDefinitionContext = ColumnDefinitionContext;

CqlParser.prototype.columnDefinition = function() {

    var localctx = new ColumnDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, CqlParser.RULE_columnDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1372;
        this.column();
        this.state = 1373;
        this.dataType();
        this.state = 1375;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_PRIMARY) {
            this.state = 1374;
            this.primaryKeyColumn();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrimaryKeyColumnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_primaryKeyColumn;
    return this;
}

PrimaryKeyColumnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryKeyColumnContext.prototype.constructor = PrimaryKeyColumnContext;

PrimaryKeyColumnContext.prototype.kwPrimary = function() {
    return this.getTypedRuleContext(KwPrimaryContext,0);
};

PrimaryKeyColumnContext.prototype.kwKey = function() {
    return this.getTypedRuleContext(KwKeyContext,0);
};

PrimaryKeyColumnContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterPrimaryKeyColumn(this);
	}
};

PrimaryKeyColumnContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitPrimaryKeyColumn(this);
	}
};

PrimaryKeyColumnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitPrimaryKeyColumn(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.PrimaryKeyColumnContext = PrimaryKeyColumnContext;

CqlParser.prototype.primaryKeyColumn = function() {

    var localctx = new PrimaryKeyColumnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, CqlParser.RULE_primaryKeyColumn);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1377;
        this.kwPrimary();
        this.state = 1378;
        this.kwKey();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrimaryKeyElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_primaryKeyElement;
    return this;
}

PrimaryKeyElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryKeyElementContext.prototype.constructor = PrimaryKeyElementContext;

PrimaryKeyElementContext.prototype.kwPrimary = function() {
    return this.getTypedRuleContext(KwPrimaryContext,0);
};

PrimaryKeyElementContext.prototype.kwKey = function() {
    return this.getTypedRuleContext(KwKeyContext,0);
};

PrimaryKeyElementContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

PrimaryKeyElementContext.prototype.primaryKeyDefinition = function() {
    return this.getTypedRuleContext(PrimaryKeyDefinitionContext,0);
};

PrimaryKeyElementContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

PrimaryKeyElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterPrimaryKeyElement(this);
	}
};

PrimaryKeyElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitPrimaryKeyElement(this);
	}
};

PrimaryKeyElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitPrimaryKeyElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.PrimaryKeyElementContext = PrimaryKeyElementContext;

CqlParser.prototype.primaryKeyElement = function() {

    var localctx = new PrimaryKeyElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, CqlParser.RULE_primaryKeyElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1380;
        this.kwPrimary();
        this.state = 1381;
        this.kwKey();
        this.state = 1382;
        this.syntaxBracketLr();
        this.state = 1383;
        this.primaryKeyDefinition();
        this.state = 1384;
        this.syntaxBracketRr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrimaryKeyDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_primaryKeyDefinition;
    return this;
}

PrimaryKeyDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryKeyDefinitionContext.prototype.constructor = PrimaryKeyDefinitionContext;

PrimaryKeyDefinitionContext.prototype.singlePrimaryKey = function() {
    return this.getTypedRuleContext(SinglePrimaryKeyContext,0);
};

PrimaryKeyDefinitionContext.prototype.compoundKey = function() {
    return this.getTypedRuleContext(CompoundKeyContext,0);
};

PrimaryKeyDefinitionContext.prototype.compositeKey = function() {
    return this.getTypedRuleContext(CompositeKeyContext,0);
};

PrimaryKeyDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterPrimaryKeyDefinition(this);
	}
};

PrimaryKeyDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitPrimaryKeyDefinition(this);
	}
};

PrimaryKeyDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitPrimaryKeyDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.PrimaryKeyDefinitionContext = PrimaryKeyDefinitionContext;

CqlParser.prototype.primaryKeyDefinition = function() {

    var localctx = new PrimaryKeyDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, CqlParser.RULE_primaryKeyDefinition);
    try {
        this.state = 1389;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1386;
            this.singlePrimaryKey();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1387;
            this.compoundKey();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1388;
            this.compositeKey();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SinglePrimaryKeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_singlePrimaryKey;
    return this;
}

SinglePrimaryKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SinglePrimaryKeyContext.prototype.constructor = SinglePrimaryKeyContext;

SinglePrimaryKeyContext.prototype.column = function() {
    return this.getTypedRuleContext(ColumnContext,0);
};

SinglePrimaryKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSinglePrimaryKey(this);
	}
};

SinglePrimaryKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSinglePrimaryKey(this);
	}
};

SinglePrimaryKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSinglePrimaryKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SinglePrimaryKeyContext = SinglePrimaryKeyContext;

CqlParser.prototype.singlePrimaryKey = function() {

    var localctx = new SinglePrimaryKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, CqlParser.RULE_singlePrimaryKey);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1391;
        this.column();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CompoundKeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_compoundKey;
    return this;
}

CompoundKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompoundKeyContext.prototype.constructor = CompoundKeyContext;

CompoundKeyContext.prototype.partitionKey = function() {
    return this.getTypedRuleContext(PartitionKeyContext,0);
};

CompoundKeyContext.prototype.syntaxComma = function() {
    return this.getTypedRuleContext(SyntaxCommaContext,0);
};

CompoundKeyContext.prototype.clusteringKeyList = function() {
    return this.getTypedRuleContext(ClusteringKeyListContext,0);
};

CompoundKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCompoundKey(this);
	}
};

CompoundKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCompoundKey(this);
	}
};

CompoundKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCompoundKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CompoundKeyContext = CompoundKeyContext;

CqlParser.prototype.compoundKey = function() {

    var localctx = new CompoundKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, CqlParser.RULE_compoundKey);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1393;
        this.partitionKey();
        this.state = 1397;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.COMMA) {
            this.state = 1394;
            this.syntaxComma();
            this.state = 1395;
            this.clusteringKeyList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CompositeKeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_compositeKey;
    return this;
}

CompositeKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompositeKeyContext.prototype.constructor = CompositeKeyContext;

CompositeKeyContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

CompositeKeyContext.prototype.partitionKeyList = function() {
    return this.getTypedRuleContext(PartitionKeyListContext,0);
};

CompositeKeyContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

CompositeKeyContext.prototype.syntaxComma = function() {
    return this.getTypedRuleContext(SyntaxCommaContext,0);
};

CompositeKeyContext.prototype.clusteringKeyList = function() {
    return this.getTypedRuleContext(ClusteringKeyListContext,0);
};

CompositeKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCompositeKey(this);
	}
};

CompositeKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCompositeKey(this);
	}
};

CompositeKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCompositeKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CompositeKeyContext = CompositeKeyContext;

CqlParser.prototype.compositeKey = function() {

    var localctx = new CompositeKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, CqlParser.RULE_compositeKey);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1399;
        this.syntaxBracketLr();
        this.state = 1400;
        this.partitionKeyList();
        this.state = 1401;
        this.syntaxBracketRr();
        this.state = 1405;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.COMMA) {
            this.state = 1402;
            this.syntaxComma();
            this.state = 1403;
            this.clusteringKeyList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionKeyListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_partitionKeyList;
    return this;
}

PartitionKeyListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionKeyListContext.prototype.constructor = PartitionKeyListContext;

PartitionKeyListContext.prototype.partitionKey = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionKeyContext);
    } else {
        return this.getTypedRuleContext(PartitionKeyContext,i);
    }
};

PartitionKeyListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

PartitionKeyListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterPartitionKeyList(this);
	}
};

PartitionKeyListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitPartitionKeyList(this);
	}
};

PartitionKeyListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitPartitionKeyList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.PartitionKeyListContext = PartitionKeyListContext;

CqlParser.prototype.partitionKeyList = function() {

    var localctx = new PartitionKeyListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, CqlParser.RULE_partitionKeyList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1407;
        this.partitionKey();
        this.state = 1413;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1408;
            this.syntaxComma();
            this.state = 1409;
            this.partitionKey();
            this.state = 1415;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClusteringKeyListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_clusteringKeyList;
    return this;
}

ClusteringKeyListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClusteringKeyListContext.prototype.constructor = ClusteringKeyListContext;

ClusteringKeyListContext.prototype.clusteringKey = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClusteringKeyContext);
    } else {
        return this.getTypedRuleContext(ClusteringKeyContext,i);
    }
};

ClusteringKeyListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

ClusteringKeyListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterClusteringKeyList(this);
	}
};

ClusteringKeyListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitClusteringKeyList(this);
	}
};

ClusteringKeyListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitClusteringKeyList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ClusteringKeyListContext = ClusteringKeyListContext;

CqlParser.prototype.clusteringKeyList = function() {

    var localctx = new ClusteringKeyListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, CqlParser.RULE_clusteringKeyList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1416;
        this.clusteringKey();
        this.state = 1422;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1417;
            this.syntaxComma();
            this.state = 1418;
            this.clusteringKey();
            this.state = 1424;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionKeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_partitionKey;
    return this;
}

PartitionKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionKeyContext.prototype.constructor = PartitionKeyContext;

PartitionKeyContext.prototype.column = function() {
    return this.getTypedRuleContext(ColumnContext,0);
};

PartitionKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterPartitionKey(this);
	}
};

PartitionKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitPartitionKey(this);
	}
};

PartitionKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitPartitionKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.PartitionKeyContext = PartitionKeyContext;

CqlParser.prototype.partitionKey = function() {

    var localctx = new PartitionKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, CqlParser.RULE_partitionKey);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1425;
        this.column();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClusteringKeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_clusteringKey;
    return this;
}

ClusteringKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClusteringKeyContext.prototype.constructor = ClusteringKeyContext;

ClusteringKeyContext.prototype.column = function() {
    return this.getTypedRuleContext(ColumnContext,0);
};

ClusteringKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterClusteringKey(this);
	}
};

ClusteringKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitClusteringKey(this);
	}
};

ClusteringKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitClusteringKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ClusteringKeyContext = ClusteringKeyContext;

CqlParser.prototype.clusteringKey = function() {

    var localctx = new ClusteringKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, CqlParser.RULE_clusteringKey);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1427;
        this.column();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ApplyBatchContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_applyBatch;
    return this;
}

ApplyBatchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ApplyBatchContext.prototype.constructor = ApplyBatchContext;

ApplyBatchContext.prototype.kwApply = function() {
    return this.getTypedRuleContext(KwApplyContext,0);
};

ApplyBatchContext.prototype.kwBatch = function() {
    return this.getTypedRuleContext(KwBatchContext,0);
};

ApplyBatchContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterApplyBatch(this);
	}
};

ApplyBatchContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitApplyBatch(this);
	}
};

ApplyBatchContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitApplyBatch(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ApplyBatchContext = ApplyBatchContext;

CqlParser.prototype.applyBatch = function() {

    var localctx = new ApplyBatchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, CqlParser.RULE_applyBatch);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1429;
        this.kwApply();
        this.state = 1430;
        this.kwBatch();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BeginBatchContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_beginBatch;
    return this;
}

BeginBatchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BeginBatchContext.prototype.constructor = BeginBatchContext;

BeginBatchContext.prototype.kwBegin = function() {
    return this.getTypedRuleContext(KwBeginContext,0);
};

BeginBatchContext.prototype.kwBatch = function() {
    return this.getTypedRuleContext(KwBatchContext,0);
};

BeginBatchContext.prototype.batchType = function() {
    return this.getTypedRuleContext(BatchTypeContext,0);
};

BeginBatchContext.prototype.usingTimestampSpec = function() {
    return this.getTypedRuleContext(UsingTimestampSpecContext,0);
};

BeginBatchContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterBeginBatch(this);
	}
};

BeginBatchContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitBeginBatch(this);
	}
};

BeginBatchContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitBeginBatch(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.BeginBatchContext = BeginBatchContext;

CqlParser.prototype.beginBatch = function() {

    var localctx = new BeginBatchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, CqlParser.RULE_beginBatch);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1432;
        this.kwBegin();
        this.state = 1434;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_LOGGED || _la===CqlParser.K_UNLOGGED) {
            this.state = 1433;
            this.batchType();
        }

        this.state = 1436;
        this.kwBatch();
        this.state = 1438;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_USING) {
            this.state = 1437;
            this.usingTimestampSpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BatchTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_batchType;
    return this;
}

BatchTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BatchTypeContext.prototype.constructor = BatchTypeContext;

BatchTypeContext.prototype.kwLogged = function() {
    return this.getTypedRuleContext(KwLoggedContext,0);
};

BatchTypeContext.prototype.kwUnlogged = function() {
    return this.getTypedRuleContext(KwUnloggedContext,0);
};

BatchTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterBatchType(this);
	}
};

BatchTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitBatchType(this);
	}
};

BatchTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitBatchType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.BatchTypeContext = BatchTypeContext;

CqlParser.prototype.batchType = function() {

    var localctx = new BatchTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, CqlParser.RULE_batchType);
    try {
        this.state = 1442;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CqlParser.K_LOGGED:
            this.enterOuterAlt(localctx, 1);
            this.state = 1440;
            this.kwLogged();
            break;
        case CqlParser.K_UNLOGGED:
            this.enterOuterAlt(localctx, 2);
            this.state = 1441;
            this.kwUnlogged();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterKeyspaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterKeyspace;
    return this;
}

AlterKeyspaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterKeyspaceContext.prototype.constructor = AlterKeyspaceContext;

AlterKeyspaceContext.prototype.kwAlter = function() {
    return this.getTypedRuleContext(KwAlterContext,0);
};

AlterKeyspaceContext.prototype.kwKeyspace = function() {
    return this.getTypedRuleContext(KwKeyspaceContext,0);
};

AlterKeyspaceContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

AlterKeyspaceContext.prototype.kwWith = function() {
    return this.getTypedRuleContext(KwWithContext,0);
};

AlterKeyspaceContext.prototype.kwReplication = function() {
    return this.getTypedRuleContext(KwReplicationContext,0);
};

AlterKeyspaceContext.prototype.OPERATOR_EQ = function() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
};

AlterKeyspaceContext.prototype.syntaxBracketLc = function() {
    return this.getTypedRuleContext(SyntaxBracketLcContext,0);
};

AlterKeyspaceContext.prototype.replicationList = function() {
    return this.getTypedRuleContext(ReplicationListContext,0);
};

AlterKeyspaceContext.prototype.syntaxBracketRc = function() {
    return this.getTypedRuleContext(SyntaxBracketRcContext,0);
};

AlterKeyspaceContext.prototype.kwAnd = function() {
    return this.getTypedRuleContext(KwAndContext,0);
};

AlterKeyspaceContext.prototype.durableWrites = function() {
    return this.getTypedRuleContext(DurableWritesContext,0);
};

AlterKeyspaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterKeyspace(this);
	}
};

AlterKeyspaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterKeyspace(this);
	}
};

AlterKeyspaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterKeyspace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterKeyspaceContext = AlterKeyspaceContext;

CqlParser.prototype.alterKeyspace = function() {

    var localctx = new AlterKeyspaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, CqlParser.RULE_alterKeyspace);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1444;
        this.kwAlter();
        this.state = 1445;
        this.kwKeyspace();
        this.state = 1446;
        this.keyspace();
        this.state = 1447;
        this.kwWith();
        this.state = 1448;
        this.kwReplication();
        this.state = 1449;
        this.match(CqlParser.OPERATOR_EQ);
        this.state = 1450;
        this.syntaxBracketLc();
        this.state = 1451;
        this.replicationList();
        this.state = 1452;
        this.syntaxBracketRc();
        this.state = 1456;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_AND) {
            this.state = 1453;
            this.kwAnd();
            this.state = 1454;
            this.durableWrites();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReplicationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_replicationList;
    return this;
}

ReplicationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReplicationListContext.prototype.constructor = ReplicationListContext;

ReplicationListContext.prototype.replicationListItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ReplicationListItemContext);
    } else {
        return this.getTypedRuleContext(ReplicationListItemContext,i);
    }
};

ReplicationListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

ReplicationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterReplicationList(this);
	}
};

ReplicationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitReplicationList(this);
	}
};

ReplicationListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitReplicationList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ReplicationListContext = ReplicationListContext;

CqlParser.prototype.replicationList = function() {

    var localctx = new ReplicationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, CqlParser.RULE_replicationList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1458;
        this.replicationListItem();
        this.state = 1464;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1459;
            this.syntaxComma();
            this.state = 1460;
            this.replicationListItem();
            this.state = 1466;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReplicationListItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_replicationListItem;
    return this;
}

ReplicationListItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReplicationListItemContext.prototype.constructor = ReplicationListItemContext;

ReplicationListItemContext.prototype.STRING_LITERAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.STRING_LITERAL);
    } else {
        return this.getToken(CqlParser.STRING_LITERAL, i);
    }
};


ReplicationListItemContext.prototype.COLON = function() {
    return this.getToken(CqlParser.COLON, 0);
};

ReplicationListItemContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(CqlParser.DECIMAL_LITERAL, 0);
};

ReplicationListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterReplicationListItem(this);
	}
};

ReplicationListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitReplicationListItem(this);
	}
};

ReplicationListItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitReplicationListItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ReplicationListItemContext = ReplicationListItemContext;

CqlParser.prototype.replicationListItem = function() {

    var localctx = new ReplicationListItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, CqlParser.RULE_replicationListItem);
    try {
        this.state = 1473;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1467;
            this.match(CqlParser.STRING_LITERAL);
            this.state = 1468;
            this.match(CqlParser.COLON);
            this.state = 1469;
            this.match(CqlParser.STRING_LITERAL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1470;
            this.match(CqlParser.STRING_LITERAL);
            this.state = 1471;
            this.match(CqlParser.COLON);
            this.state = 1472;
            this.match(CqlParser.DECIMAL_LITERAL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DurableWritesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_durableWrites;
    return this;
}

DurableWritesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DurableWritesContext.prototype.constructor = DurableWritesContext;

DurableWritesContext.prototype.kwDurableWrites = function() {
    return this.getTypedRuleContext(KwDurableWritesContext,0);
};

DurableWritesContext.prototype.OPERATOR_EQ = function() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
};

DurableWritesContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

DurableWritesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDurableWrites(this);
	}
};

DurableWritesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDurableWrites(this);
	}
};

DurableWritesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDurableWrites(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DurableWritesContext = DurableWritesContext;

CqlParser.prototype.durableWrites = function() {

    var localctx = new DurableWritesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, CqlParser.RULE_durableWrites);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1475;
        this.kwDurableWrites();
        this.state = 1476;
        this.match(CqlParser.OPERATOR_EQ);
        this.state = 1477;
        this.booleanLiteral();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_use;
    return this;
}

UseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UseContext.prototype.constructor = UseContext;

UseContext.prototype.kwUse = function() {
    return this.getTypedRuleContext(KwUseContext,0);
};

UseContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

UseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterUse(this);
	}
};

UseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitUse(this);
	}
};

UseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitUse(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.UseContext = UseContext;

CqlParser.prototype.use = function() {

    var localctx = new UseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, CqlParser.RULE_use);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1479;
        this.kwUse();
        this.state = 1480;
        this.keyspace();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TruncateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_truncate;
    return this;
}

TruncateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TruncateContext.prototype.constructor = TruncateContext;

TruncateContext.prototype.kwTruncate = function() {
    return this.getTypedRuleContext(KwTruncateContext,0);
};

TruncateContext.prototype.table = function() {
    return this.getTypedRuleContext(TableContext,0);
};

TruncateContext.prototype.kwTable = function() {
    return this.getTypedRuleContext(KwTableContext,0);
};

TruncateContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

TruncateContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

TruncateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTruncate(this);
	}
};

TruncateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTruncate(this);
	}
};

TruncateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTruncate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TruncateContext = TruncateContext;

CqlParser.prototype.truncate = function() {

    var localctx = new TruncateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, CqlParser.RULE_truncate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1482;
        this.kwTruncate();
        this.state = 1484;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
        if(la_===1) {
            this.state = 1483;
            this.kwTable();

        }
        this.state = 1489;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
        if(la_===1) {
            this.state = 1486;
            this.keyspace();
            this.state = 1487;
            this.match(CqlParser.DOT);

        }
        this.state = 1491;
        this.table();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateIndexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createIndex;
    return this;
}

CreateIndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateIndexContext.prototype.constructor = CreateIndexContext;

CreateIndexContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

CreateIndexContext.prototype.kwIndex = function() {
    return this.getTypedRuleContext(KwIndexContext,0);
};

CreateIndexContext.prototype.kwOn = function() {
    return this.getTypedRuleContext(KwOnContext,0);
};

CreateIndexContext.prototype.table = function() {
    return this.getTypedRuleContext(TableContext,0);
};

CreateIndexContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

CreateIndexContext.prototype.indexColumnSpec = function() {
    return this.getTypedRuleContext(IndexColumnSpecContext,0);
};

CreateIndexContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

CreateIndexContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

CreateIndexContext.prototype.indexName = function() {
    return this.getTypedRuleContext(IndexNameContext,0);
};

CreateIndexContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

CreateIndexContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

CreateIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateIndex(this);
	}
};

CreateIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateIndex(this);
	}
};

CreateIndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateIndexContext = CreateIndexContext;

CqlParser.prototype.createIndex = function() {

    var localctx = new CreateIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, CqlParser.RULE_createIndex);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1493;
        this.kwCreate();
        this.state = 1494;
        this.kwIndex();
        this.state = 1496;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
        if(la_===1) {
            this.state = 1495;
            this.ifNotExist();

        }
        this.state = 1499;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
        if(la_===1) {
            this.state = 1498;
            this.indexName();

        }
        this.state = 1501;
        this.kwOn();
        this.state = 1505;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
        if(la_===1) {
            this.state = 1502;
            this.keyspace();
            this.state = 1503;
            this.match(CqlParser.DOT);

        }
        this.state = 1507;
        this.table();
        this.state = 1508;
        this.syntaxBracketLr();
        this.state = 1509;
        this.indexColumnSpec();
        this.state = 1510;
        this.syntaxBracketRr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_indexName;
    return this;
}

IndexNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexNameContext.prototype.constructor = IndexNameContext;

IndexNameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

IndexNameContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

IndexNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterIndexName(this);
	}
};

IndexNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitIndexName(this);
	}
};

IndexNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitIndexName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.IndexNameContext = IndexNameContext;

CqlParser.prototype.indexName = function() {

    var localctx = new IndexNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, CqlParser.RULE_indexName);
    try {
        this.state = 1514;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CqlParser.K_ADD:
        case CqlParser.K_ALL:
        case CqlParser.K_ALLOW:
        case CqlParser.K_ALTER:
        case CqlParser.K_AND:
        case CqlParser.K_ANY:
        case CqlParser.K_APPLY:
        case CqlParser.K_AS:
        case CqlParser.K_ASC:
        case CqlParser.K_AUTHORIZE:
        case CqlParser.K_BATCH:
        case CqlParser.K_BEGIN:
        case CqlParser.K_BY:
        case CqlParser.K_CALLED:
        case CqlParser.K_CLUSTERING:
        case CqlParser.K_COLUMNFAMILY:
        case CqlParser.K_COMPACT:
        case CqlParser.K_CONSISTENCY:
        case CqlParser.K_CONTAINS:
        case CqlParser.K_CREATE:
        case CqlParser.K_CUSTOM:
        case CqlParser.K_DELETE:
        case CqlParser.K_DESC:
        case CqlParser.K_DESCRIBE:
        case CqlParser.K_DISTINCT:
        case CqlParser.K_DROP:
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_EACH_QUORUM:
        case CqlParser.K_ENTRIES:
        case CqlParser.K_EXECUTE:
        case CqlParser.K_EXISTS:
        case CqlParser.K_FALSE:
        case CqlParser.K_FILTERING:
        case CqlParser.K_FINALFUNC:
        case CqlParser.K_FROM:
        case CqlParser.K_FULL:
        case CqlParser.K_FUNCTION:
        case CqlParser.K_FUNCTIONS:
        case CqlParser.K_GRANT:
        case CqlParser.K_IF:
        case CqlParser.K_IN:
        case CqlParser.K_INDEX:
        case CqlParser.K_INFINITY:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_INSERT:
        case CqlParser.K_INTO:
        case CqlParser.K_IS:
        case CqlParser.K_JSON:
        case CqlParser.K_KEY:
        case CqlParser.K_KEYS:
        case CqlParser.K_KEYSPACE:
        case CqlParser.K_KEYSPACES:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_LIMIT:
        case CqlParser.K_LOCAL_ONE:
        case CqlParser.K_LOCAL_QUORUM:
        case CqlParser.K_LOGGED:
        case CqlParser.K_LOGIN:
        case CqlParser.K_MATERIALIZED:
        case CqlParser.K_MODIFY:
        case CqlParser.K_NAN:
        case CqlParser.K_NORECURSIVE:
        case CqlParser.K_NOSUPERUSER:
        case CqlParser.K_NOT:
        case CqlParser.K_NULL:
        case CqlParser.K_OF:
        case CqlParser.K_ON:
        case CqlParser.K_ONE:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_OR:
        case CqlParser.K_ORDER:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PASSWORD:
        case CqlParser.K_PER:
        case CqlParser.K_PERMISSION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_PRIMARY:
        case CqlParser.K_QUORUM:
        case CqlParser.K_RENAME:
        case CqlParser.K_REPLACE:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_RETURNS:
        case CqlParser.K_REVOKE:
        case CqlParser.K_ROLE:
        case CqlParser.K_ROLES:
        case CqlParser.K_SCHEMA:
        case CqlParser.K_SELECT:
        case CqlParser.K_SET:
        case CqlParser.K_SFUNC:
        case CqlParser.K_STATIC:
        case CqlParser.K_STORAGE:
        case CqlParser.K_STYPE:
        case CqlParser.K_SUPERUSER:
        case CqlParser.K_TABLE:
        case CqlParser.K_THREE:
        case CqlParser.K_TIMESTAMP:
        case CqlParser.K_TO:
        case CqlParser.K_TOKEN:
        case CqlParser.K_TRIGGER:
        case CqlParser.K_TRUE:
        case CqlParser.K_TRUNCATE:
        case CqlParser.K_TTL:
        case CqlParser.K_TWO:
        case CqlParser.K_TYPE:
        case CqlParser.K_UNLOGGED:
        case CqlParser.K_UPDATE:
        case CqlParser.K_USE:
        case CqlParser.K_USER:
        case CqlParser.K_USING:
        case CqlParser.K_UUID:
        case CqlParser.K_VALUES:
        case CqlParser.K_VIEW:
        case CqlParser.K_WHERE:
        case CqlParser.K_WITH:
        case CqlParser.K_WRITETIME:
        case CqlParser.K_ASCII:
        case CqlParser.K_BIGINT:
        case CqlParser.K_BLOB:
        case CqlParser.K_BOOLEAN:
        case CqlParser.K_COUNTER:
        case CqlParser.K_DATE:
        case CqlParser.K_DECIMAL:
        case CqlParser.K_DOUBLE:
        case CqlParser.K_FLOAT:
        case CqlParser.K_FROZEN:
        case CqlParser.K_INET:
        case CqlParser.K_INT:
        case CqlParser.K_LIST:
        case CqlParser.K_MAP:
        case CqlParser.K_SMALLINT:
        case CqlParser.K_TEXT:
        case CqlParser.K_TIMEUUID:
        case CqlParser.K_TIME:
        case CqlParser.K_TINYINT:
        case CqlParser.K_TUPLE:
        case CqlParser.K_VARCHAR:
        case CqlParser.K_VARINT:
        case CqlParser.OBJECT_NAME:
        case CqlParser.K_USERS:
            this.enterOuterAlt(localctx, 1);
            this.state = 1512;
            this.id();
            break;
        case CqlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1513;
            this.stringLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexColumnSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_indexColumnSpec;
    return this;
}

IndexColumnSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexColumnSpecContext.prototype.constructor = IndexColumnSpecContext;

IndexColumnSpecContext.prototype.column = function() {
    return this.getTypedRuleContext(ColumnContext,0);
};

IndexColumnSpecContext.prototype.indexKeysSpec = function() {
    return this.getTypedRuleContext(IndexKeysSpecContext,0);
};

IndexColumnSpecContext.prototype.indexEntriesSSpec = function() {
    return this.getTypedRuleContext(IndexEntriesSSpecContext,0);
};

IndexColumnSpecContext.prototype.indexFullSpec = function() {
    return this.getTypedRuleContext(IndexFullSpecContext,0);
};

IndexColumnSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterIndexColumnSpec(this);
	}
};

IndexColumnSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitIndexColumnSpec(this);
	}
};

IndexColumnSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitIndexColumnSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.IndexColumnSpecContext = IndexColumnSpecContext;

CqlParser.prototype.indexColumnSpec = function() {

    var localctx = new IndexColumnSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, CqlParser.RULE_indexColumnSpec);
    try {
        this.state = 1520;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1516;
            this.column();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1517;
            this.indexKeysSpec();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1518;
            this.indexEntriesSSpec();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1519;
            this.indexFullSpec();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexKeysSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_indexKeysSpec;
    return this;
}

IndexKeysSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexKeysSpecContext.prototype.constructor = IndexKeysSpecContext;

IndexKeysSpecContext.prototype.kwKeys = function() {
    return this.getTypedRuleContext(KwKeysContext,0);
};

IndexKeysSpecContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

IndexKeysSpecContext.prototype.column = function() {
    return this.getTypedRuleContext(ColumnContext,0);
};

IndexKeysSpecContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

IndexKeysSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterIndexKeysSpec(this);
	}
};

IndexKeysSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitIndexKeysSpec(this);
	}
};

IndexKeysSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitIndexKeysSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.IndexKeysSpecContext = IndexKeysSpecContext;

CqlParser.prototype.indexKeysSpec = function() {

    var localctx = new IndexKeysSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, CqlParser.RULE_indexKeysSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1522;
        this.kwKeys();
        this.state = 1523;
        this.syntaxBracketLr();
        this.state = 1524;
        this.column();
        this.state = 1525;
        this.syntaxBracketRr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexEntriesSSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_indexEntriesSSpec;
    return this;
}

IndexEntriesSSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexEntriesSSpecContext.prototype.constructor = IndexEntriesSSpecContext;

IndexEntriesSSpecContext.prototype.kwEntries = function() {
    return this.getTypedRuleContext(KwEntriesContext,0);
};

IndexEntriesSSpecContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

IndexEntriesSSpecContext.prototype.column = function() {
    return this.getTypedRuleContext(ColumnContext,0);
};

IndexEntriesSSpecContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

IndexEntriesSSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterIndexEntriesSSpec(this);
	}
};

IndexEntriesSSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitIndexEntriesSSpec(this);
	}
};

IndexEntriesSSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitIndexEntriesSSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.IndexEntriesSSpecContext = IndexEntriesSSpecContext;

CqlParser.prototype.indexEntriesSSpec = function() {

    var localctx = new IndexEntriesSSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, CqlParser.RULE_indexEntriesSSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1527;
        this.kwEntries();
        this.state = 1528;
        this.syntaxBracketLr();
        this.state = 1529;
        this.column();
        this.state = 1530;
        this.syntaxBracketRr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexFullSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_indexFullSpec;
    return this;
}

IndexFullSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexFullSpecContext.prototype.constructor = IndexFullSpecContext;

IndexFullSpecContext.prototype.kwFull = function() {
    return this.getTypedRuleContext(KwFullContext,0);
};

IndexFullSpecContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

IndexFullSpecContext.prototype.column = function() {
    return this.getTypedRuleContext(ColumnContext,0);
};

IndexFullSpecContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

IndexFullSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterIndexFullSpec(this);
	}
};

IndexFullSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitIndexFullSpec(this);
	}
};

IndexFullSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitIndexFullSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.IndexFullSpecContext = IndexFullSpecContext;

CqlParser.prototype.indexFullSpec = function() {

    var localctx = new IndexFullSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, CqlParser.RULE_indexFullSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1532;
        this.kwFull();
        this.state = 1533;
        this.syntaxBracketLr();
        this.state = 1534;
        this.column();
        this.state = 1535;
        this.syntaxBracketRr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeleteStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_deleteStatement;
    return this;
}

DeleteStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteStatementContext.prototype.constructor = DeleteStatementContext;

DeleteStatementContext.prototype.kwDelete = function() {
    return this.getTypedRuleContext(KwDeleteContext,0);
};

DeleteStatementContext.prototype.fromSpec = function() {
    return this.getTypedRuleContext(FromSpecContext,0);
};

DeleteStatementContext.prototype.whereSpec = function() {
    return this.getTypedRuleContext(WhereSpecContext,0);
};

DeleteStatementContext.prototype.beginBatch = function() {
    return this.getTypedRuleContext(BeginBatchContext,0);
};

DeleteStatementContext.prototype.deleteColumnList = function() {
    return this.getTypedRuleContext(DeleteColumnListContext,0);
};

DeleteStatementContext.prototype.usingTimestampSpec = function() {
    return this.getTypedRuleContext(UsingTimestampSpecContext,0);
};

DeleteStatementContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DeleteStatementContext.prototype.ifSpec = function() {
    return this.getTypedRuleContext(IfSpecContext,0);
};

DeleteStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDeleteStatement(this);
	}
};

DeleteStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDeleteStatement(this);
	}
};

DeleteStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDeleteStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DeleteStatementContext = DeleteStatementContext;

CqlParser.prototype.deleteStatement = function() {

    var localctx = new DeleteStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, CqlParser.RULE_deleteStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1538;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_BEGIN) {
            this.state = 1537;
            this.beginBatch();
        }

        this.state = 1540;
        this.kwDelete();
        this.state = 1542;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
        if(la_===1) {
            this.state = 1541;
            this.deleteColumnList();

        }
        this.state = 1544;
        this.fromSpec();
        this.state = 1546;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_USING) {
            this.state = 1545;
            this.usingTimestampSpec();
        }

        this.state = 1548;
        this.whereSpec();
        this.state = 1551;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
        if(la_===1) {
            this.state = 1549;
            this.ifExist();

        } else if(la_===2) {
            this.state = 1550;
            this.ifSpec();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeleteColumnListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_deleteColumnList;
    return this;
}

DeleteColumnListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteColumnListContext.prototype.constructor = DeleteColumnListContext;

DeleteColumnListContext.prototype.deleteColumnItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeleteColumnItemContext);
    } else {
        return this.getTypedRuleContext(DeleteColumnItemContext,i);
    }
};

DeleteColumnListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

DeleteColumnListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDeleteColumnList(this);
	}
};

DeleteColumnListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDeleteColumnList(this);
	}
};

DeleteColumnListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDeleteColumnList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DeleteColumnListContext = DeleteColumnListContext;

CqlParser.prototype.deleteColumnList = function() {

    var localctx = new DeleteColumnListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, CqlParser.RULE_deleteColumnList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1553;
        this.deleteColumnItem();
        this.state = 1559;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1554;
            this.syntaxComma();
            this.state = 1555;
            this.deleteColumnItem();
            this.state = 1561;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeleteColumnItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_deleteColumnItem;
    return this;
}

DeleteColumnItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteColumnItemContext.prototype.constructor = DeleteColumnItemContext;

DeleteColumnItemContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

DeleteColumnItemContext.prototype.LS_BRACKET = function() {
    return this.getToken(CqlParser.LS_BRACKET, 0);
};

DeleteColumnItemContext.prototype.RS_BRACKET = function() {
    return this.getToken(CqlParser.RS_BRACKET, 0);
};

DeleteColumnItemContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

DeleteColumnItemContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

DeleteColumnItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDeleteColumnItem(this);
	}
};

DeleteColumnItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDeleteColumnItem(this);
	}
};

DeleteColumnItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDeleteColumnItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DeleteColumnItemContext = DeleteColumnItemContext;

CqlParser.prototype.deleteColumnItem = function() {

    var localctx = new DeleteColumnItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, CqlParser.RULE_deleteColumnItem);
    try {
        this.state = 1571;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1562;
            this.id();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1563;
            this.id();
            this.state = 1564;
            this.match(CqlParser.LS_BRACKET);
            this.state = 1567;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CqlParser.STRING_LITERAL:
                this.state = 1565;
                this.stringLiteral();
                break;
            case CqlParser.DECIMAL_LITERAL:
                this.state = 1566;
                this.decimalLiteral();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1569;
            this.match(CqlParser.RS_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UpdateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_update;
    return this;
}

UpdateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UpdateContext.prototype.constructor = UpdateContext;

UpdateContext.prototype.kwUpdate = function() {
    return this.getTypedRuleContext(KwUpdateContext,0);
};

UpdateContext.prototype.table = function() {
    return this.getTypedRuleContext(TableContext,0);
};

UpdateContext.prototype.kwSet = function() {
    return this.getTypedRuleContext(KwSetContext,0);
};

UpdateContext.prototype.assignments = function() {
    return this.getTypedRuleContext(AssignmentsContext,0);
};

UpdateContext.prototype.whereSpec = function() {
    return this.getTypedRuleContext(WhereSpecContext,0);
};

UpdateContext.prototype.beginBatch = function() {
    return this.getTypedRuleContext(BeginBatchContext,0);
};

UpdateContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

UpdateContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

UpdateContext.prototype.usingTtlTimestamp = function() {
    return this.getTypedRuleContext(UsingTtlTimestampContext,0);
};

UpdateContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

UpdateContext.prototype.ifSpec = function() {
    return this.getTypedRuleContext(IfSpecContext,0);
};

UpdateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterUpdate(this);
	}
};

UpdateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitUpdate(this);
	}
};

UpdateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitUpdate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.UpdateContext = UpdateContext;

CqlParser.prototype.update = function() {

    var localctx = new UpdateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, CqlParser.RULE_update);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1574;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_BEGIN) {
            this.state = 1573;
            this.beginBatch();
        }

        this.state = 1576;
        this.kwUpdate();
        this.state = 1580;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
        if(la_===1) {
            this.state = 1577;
            this.keyspace();
            this.state = 1578;
            this.match(CqlParser.DOT);

        }
        this.state = 1582;
        this.table();
        this.state = 1584;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_USING) {
            this.state = 1583;
            this.usingTtlTimestamp();
        }

        this.state = 1586;
        this.kwSet();
        this.state = 1587;
        this.assignments();
        this.state = 1588;
        this.whereSpec();
        this.state = 1591;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
        if(la_===1) {
            this.state = 1589;
            this.ifExist();

        } else if(la_===2) {
            this.state = 1590;
            this.ifSpec();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_ifSpec;
    return this;
}

IfSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfSpecContext.prototype.constructor = IfSpecContext;

IfSpecContext.prototype.kwIf = function() {
    return this.getTypedRuleContext(KwIfContext,0);
};

IfSpecContext.prototype.ifConditionList = function() {
    return this.getTypedRuleContext(IfConditionListContext,0);
};

IfSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterIfSpec(this);
	}
};

IfSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitIfSpec(this);
	}
};

IfSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitIfSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.IfSpecContext = IfSpecContext;

CqlParser.prototype.ifSpec = function() {

    var localctx = new IfSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, CqlParser.RULE_ifSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1593;
        this.kwIf();
        this.state = 1594;
        this.ifConditionList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfConditionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_ifConditionList;
    return this;
}

IfConditionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfConditionListContext.prototype.constructor = IfConditionListContext;

IfConditionListContext.prototype.ifCondition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IfConditionContext);
    } else {
        return this.getTypedRuleContext(IfConditionContext,i);
    }
};

IfConditionListContext.prototype.kwAnd = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KwAndContext);
    } else {
        return this.getTypedRuleContext(KwAndContext,i);
    }
};

IfConditionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterIfConditionList(this);
	}
};

IfConditionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitIfConditionList(this);
	}
};

IfConditionListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitIfConditionList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.IfConditionListContext = IfConditionListContext;

CqlParser.prototype.ifConditionList = function() {

    var localctx = new IfConditionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, CqlParser.RULE_ifConditionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1596;
        this.ifCondition();
        this.state = 1602;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.K_AND) {
            this.state = 1597;
            this.kwAnd();
            this.state = 1598;
            this.ifCondition();
            this.state = 1604;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_ifCondition;
    return this;
}

IfConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfConditionContext.prototype.constructor = IfConditionContext;

IfConditionContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

IfConditionContext.prototype.OPERATOR_EQ = function() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
};

IfConditionContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

IfConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterIfCondition(this);
	}
};

IfConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitIfCondition(this);
	}
};

IfConditionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitIfCondition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.IfConditionContext = IfConditionContext;

CqlParser.prototype.ifCondition = function() {

    var localctx = new IfConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, CqlParser.RULE_ifCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1605;
        this.id();
        this.state = 1606;
        this.match(CqlParser.OPERATOR_EQ);
        this.state = 1607;
        this.constant();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_assignments;
    return this;
}

AssignmentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentsContext.prototype.constructor = AssignmentsContext;

AssignmentsContext.prototype.assignmentElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentElementContext);
    } else {
        return this.getTypedRuleContext(AssignmentElementContext,i);
    }
};

AssignmentsContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

AssignmentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAssignments(this);
	}
};

AssignmentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAssignments(this);
	}
};

AssignmentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAssignments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AssignmentsContext = AssignmentsContext;

CqlParser.prototype.assignments = function() {

    var localctx = new AssignmentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, CqlParser.RULE_assignments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1609;
        this.assignmentElement();
        this.state = 1615;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1610;
            this.syntaxComma();
            this.state = 1611;
            this.assignmentElement();
            this.state = 1617;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_assignmentElement;
    return this;
}

AssignmentElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentElementContext.prototype.constructor = AssignmentElementContext;

AssignmentElementContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

AssignmentElementContext.prototype.OPERATOR_EQ = function() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
};

AssignmentElementContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

AssignmentElementContext.prototype.assignmentMap = function() {
    return this.getTypedRuleContext(AssignmentMapContext,0);
};

AssignmentElementContext.prototype.assignmentSet = function() {
    return this.getTypedRuleContext(AssignmentSetContext,0);
};

AssignmentElementContext.prototype.assignmentList = function() {
    return this.getTypedRuleContext(AssignmentListContext,0);
};

AssignmentElementContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

AssignmentElementContext.prototype.PLUS = function() {
    return this.getToken(CqlParser.PLUS, 0);
};

AssignmentElementContext.prototype.MINUS = function() {
    return this.getToken(CqlParser.MINUS, 0);
};

AssignmentElementContext.prototype.syntaxBracketLs = function() {
    return this.getTypedRuleContext(SyntaxBracketLsContext,0);
};

AssignmentElementContext.prototype.syntaxBracketRs = function() {
    return this.getTypedRuleContext(SyntaxBracketRsContext,0);
};

AssignmentElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAssignmentElement(this);
	}
};

AssignmentElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAssignmentElement(this);
	}
};

AssignmentElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAssignmentElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AssignmentElementContext = AssignmentElementContext;

CqlParser.prototype.assignmentElement = function() {

    var localctx = new AssignmentElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, CqlParser.RULE_assignmentElement);
    var _la = 0; // Token type
    try {
        this.state = 1675;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1618;
            this.id();
            this.state = 1619;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1624;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1620;
                this.constant();
                break;

            case 2:
                this.state = 1621;
                this.assignmentMap();
                break;

            case 3:
                this.state = 1622;
                this.assignmentSet();
                break;

            case 4:
                this.state = 1623;
                this.assignmentList();
                break;

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1626;
            this.id();
            this.state = 1627;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1628;
            this.id();
            this.state = 1629;
            _la = this._input.LA(1);
            if(!(_la===CqlParser.PLUS || _la===CqlParser.MINUS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1630;
            this.decimalLiteral();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1632;
            this.id();
            this.state = 1633;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1634;
            this.id();
            this.state = 1635;
            _la = this._input.LA(1);
            if(!(_la===CqlParser.PLUS || _la===CqlParser.MINUS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1636;
            this.assignmentSet();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1638;
            this.id();
            this.state = 1639;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1640;
            this.assignmentSet();
            this.state = 1641;
            _la = this._input.LA(1);
            if(!(_la===CqlParser.PLUS || _la===CqlParser.MINUS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1642;
            this.id();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1644;
            this.id();
            this.state = 1645;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1646;
            this.id();
            this.state = 1647;
            _la = this._input.LA(1);
            if(!(_la===CqlParser.PLUS || _la===CqlParser.MINUS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1648;
            this.assignmentMap();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1650;
            this.id();
            this.state = 1651;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1652;
            this.assignmentMap();
            this.state = 1653;
            _la = this._input.LA(1);
            if(!(_la===CqlParser.PLUS || _la===CqlParser.MINUS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1654;
            this.id();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1656;
            this.id();
            this.state = 1657;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1658;
            this.id();
            this.state = 1659;
            _la = this._input.LA(1);
            if(!(_la===CqlParser.PLUS || _la===CqlParser.MINUS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1660;
            this.assignmentList();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1662;
            this.id();
            this.state = 1663;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1664;
            this.assignmentList();
            this.state = 1665;
            _la = this._input.LA(1);
            if(!(_la===CqlParser.PLUS || _la===CqlParser.MINUS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1666;
            this.id();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1668;
            this.id();
            this.state = 1669;
            this.syntaxBracketLs();
            this.state = 1670;
            this.decimalLiteral();
            this.state = 1671;
            this.syntaxBracketRs();
            this.state = 1672;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1673;
            this.constant();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_assignmentSet;
    return this;
}

AssignmentSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentSetContext.prototype.constructor = AssignmentSetContext;

AssignmentSetContext.prototype.syntaxBracketLc = function() {
    return this.getTypedRuleContext(SyntaxBracketLcContext,0);
};

AssignmentSetContext.prototype.syntaxBracketRc = function() {
    return this.getTypedRuleContext(SyntaxBracketRcContext,0);
};

AssignmentSetContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

AssignmentSetContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

AssignmentSetContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AssignmentSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAssignmentSet(this);
	}
};

AssignmentSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAssignmentSet(this);
	}
};

AssignmentSetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAssignmentSet(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AssignmentSetContext = AssignmentSetContext;

CqlParser.prototype.assignmentSet = function() {

    var localctx = new AssignmentSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, CqlParser.RULE_assignmentSet);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1677;
        this.syntaxBracketLc();
        this.state = 1687;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 23)) & ~0x1f) == 0 && ((1 << (_la - 23)) & ((1 << (CqlParser.K_ADD - 23)) | (1 << (CqlParser.K_ALL - 23)) | (1 << (CqlParser.K_ALLOW - 23)) | (1 << (CqlParser.K_ALTER - 23)) | (1 << (CqlParser.K_AND - 23)) | (1 << (CqlParser.K_ANY - 23)) | (1 << (CqlParser.K_APPLY - 23)) | (1 << (CqlParser.K_AS - 23)) | (1 << (CqlParser.K_ASC - 23)) | (1 << (CqlParser.K_AUTHORIZE - 23)) | (1 << (CqlParser.K_BATCH - 23)) | (1 << (CqlParser.K_BEGIN - 23)) | (1 << (CqlParser.K_BY - 23)) | (1 << (CqlParser.K_CALLED - 23)) | (1 << (CqlParser.K_CLUSTERING - 23)) | (1 << (CqlParser.K_COLUMNFAMILY - 23)) | (1 << (CqlParser.K_COMPACT - 23)) | (1 << (CqlParser.K_CONSISTENCY - 23)) | (1 << (CqlParser.K_CONTAINS - 23)) | (1 << (CqlParser.K_CREATE - 23)) | (1 << (CqlParser.K_CUSTOM - 23)) | (1 << (CqlParser.K_DELETE - 23)) | (1 << (CqlParser.K_DESC - 23)) | (1 << (CqlParser.K_DESCRIBE - 23)) | (1 << (CqlParser.K_DISTINCT - 23)) | (1 << (CqlParser.K_DROP - 23)) | (1 << (CqlParser.K_DURABLE_WRITES - 23)) | (1 << (CqlParser.K_EACH_QUORUM - 23)) | (1 << (CqlParser.K_ENTRIES - 23)) | (1 << (CqlParser.K_EXECUTE - 23)) | (1 << (CqlParser.K_EXISTS - 23)))) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (CqlParser.K_FALSE - 55)) | (1 << (CqlParser.K_FILTERING - 55)) | (1 << (CqlParser.K_FINALFUNC - 55)) | (1 << (CqlParser.K_FROM - 55)) | (1 << (CqlParser.K_FULL - 55)) | (1 << (CqlParser.K_FUNCTION - 55)) | (1 << (CqlParser.K_FUNCTIONS - 55)) | (1 << (CqlParser.K_GRANT - 55)) | (1 << (CqlParser.K_IF - 55)) | (1 << (CqlParser.K_IN - 55)) | (1 << (CqlParser.K_INDEX - 55)) | (1 << (CqlParser.K_INFINITY - 55)) | (1 << (CqlParser.K_INITCOND - 55)) | (1 << (CqlParser.K_INPUT - 55)) | (1 << (CqlParser.K_INSERT - 55)) | (1 << (CqlParser.K_INTO - 55)) | (1 << (CqlParser.K_IS - 55)) | (1 << (CqlParser.K_JSON - 55)) | (1 << (CqlParser.K_KEY - 55)) | (1 << (CqlParser.K_KEYS - 55)) | (1 << (CqlParser.K_KEYSPACE - 55)) | (1 << (CqlParser.K_KEYSPACES - 55)) | (1 << (CqlParser.K_LANGUAGE - 55)) | (1 << (CqlParser.K_LEVEL - 55)) | (1 << (CqlParser.K_LIMIT - 55)) | (1 << (CqlParser.K_LOCAL_ONE - 55)) | (1 << (CqlParser.K_LOCAL_QUORUM - 55)) | (1 << (CqlParser.K_LOGGED - 55)) | (1 << (CqlParser.K_LOGIN - 55)) | (1 << (CqlParser.K_MATERIALIZED - 55)) | (1 << (CqlParser.K_MODIFY - 55)) | (1 << (CqlParser.K_NAN - 55)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (CqlParser.K_NORECURSIVE - 87)) | (1 << (CqlParser.K_NOSUPERUSER - 87)) | (1 << (CqlParser.K_NOT - 87)) | (1 << (CqlParser.K_NULL - 87)) | (1 << (CqlParser.K_OF - 87)) | (1 << (CqlParser.K_ON - 87)) | (1 << (CqlParser.K_ONE - 87)) | (1 << (CqlParser.K_OPTIONS - 87)) | (1 << (CqlParser.K_OR - 87)) | (1 << (CqlParser.K_ORDER - 87)) | (1 << (CqlParser.K_PARTITION - 87)) | (1 << (CqlParser.K_PASSWORD - 87)) | (1 << (CqlParser.K_PER - 87)) | (1 << (CqlParser.K_PERMISSION - 87)) | (1 << (CqlParser.K_PERMISSIONS - 87)) | (1 << (CqlParser.K_PRIMARY - 87)) | (1 << (CqlParser.K_QUORUM - 87)) | (1 << (CqlParser.K_RENAME - 87)) | (1 << (CqlParser.K_REPLACE - 87)) | (1 << (CqlParser.K_REPLICATION - 87)) | (1 << (CqlParser.K_RETURNS - 87)) | (1 << (CqlParser.K_REVOKE - 87)) | (1 << (CqlParser.K_ROLE - 87)) | (1 << (CqlParser.K_ROLES - 87)) | (1 << (CqlParser.K_SCHEMA - 87)) | (1 << (CqlParser.K_SELECT - 87)) | (1 << (CqlParser.K_SET - 87)) | (1 << (CqlParser.K_SFUNC - 87)) | (1 << (CqlParser.K_STATIC - 87)))) !== 0) || ((((_la - 119)) & ~0x1f) == 0 && ((1 << (_la - 119)) & ((1 << (CqlParser.K_STORAGE - 119)) | (1 << (CqlParser.K_STYPE - 119)) | (1 << (CqlParser.K_SUPERUSER - 119)) | (1 << (CqlParser.K_TABLE - 119)) | (1 << (CqlParser.K_THREE - 119)) | (1 << (CqlParser.K_TIMESTAMP - 119)) | (1 << (CqlParser.K_TO - 119)) | (1 << (CqlParser.K_TOKEN - 119)) | (1 << (CqlParser.K_TRIGGER - 119)) | (1 << (CqlParser.K_TRUE - 119)) | (1 << (CqlParser.K_TRUNCATE - 119)) | (1 << (CqlParser.K_TTL - 119)) | (1 << (CqlParser.K_TWO - 119)) | (1 << (CqlParser.K_TYPE - 119)) | (1 << (CqlParser.K_UNLOGGED - 119)) | (1 << (CqlParser.K_UPDATE - 119)) | (1 << (CqlParser.K_USE - 119)) | (1 << (CqlParser.K_USER - 119)) | (1 << (CqlParser.K_USING - 119)) | (1 << (CqlParser.K_UUID - 119)) | (1 << (CqlParser.K_VALUES - 119)) | (1 << (CqlParser.K_VIEW - 119)) | (1 << (CqlParser.K_WHERE - 119)) | (1 << (CqlParser.K_WITH - 119)) | (1 << (CqlParser.K_WRITETIME - 119)) | (1 << (CqlParser.K_ASCII - 119)) | (1 << (CqlParser.K_BIGINT - 119)) | (1 << (CqlParser.K_BLOB - 119)) | (1 << (CqlParser.K_BOOLEAN - 119)) | (1 << (CqlParser.K_COUNTER - 119)) | (1 << (CqlParser.K_DATE - 119)) | (1 << (CqlParser.K_DECIMAL - 119)))) !== 0) || ((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (CqlParser.K_DOUBLE - 151)) | (1 << (CqlParser.K_FLOAT - 151)) | (1 << (CqlParser.K_FROZEN - 151)) | (1 << (CqlParser.K_INET - 151)) | (1 << (CqlParser.K_INT - 151)) | (1 << (CqlParser.K_LIST - 151)) | (1 << (CqlParser.K_MAP - 151)) | (1 << (CqlParser.K_SMALLINT - 151)) | (1 << (CqlParser.K_TEXT - 151)) | (1 << (CqlParser.K_TIMEUUID - 151)) | (1 << (CqlParser.K_TIME - 151)) | (1 << (CqlParser.K_TINYINT - 151)) | (1 << (CqlParser.K_TUPLE - 151)) | (1 << (CqlParser.K_VARCHAR - 151)) | (1 << (CqlParser.K_VARINT - 151)) | (1 << (CqlParser.CODE_BLOCK - 151)) | (1 << (CqlParser.STRING_LITERAL - 151)) | (1 << (CqlParser.DECIMAL_LITERAL - 151)) | (1 << (CqlParser.FLOAT_LITERAL - 151)) | (1 << (CqlParser.HEXADECIMAL_LITERAL - 151)) | (1 << (CqlParser.OBJECT_NAME - 151)) | (1 << (CqlParser.UUID - 151)) | (1 << (CqlParser.K_USERS - 151)))) !== 0)) {
            this.state = 1678;
            this.constant();
            this.state = 1684;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CqlParser.COMMA) {
                this.state = 1679;
                this.syntaxComma();
                this.state = 1680;
                this.expression();
                this.state = 1686;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1689;
        this.syntaxBracketRc();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentMapContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_assignmentMap;
    return this;
}

AssignmentMapContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentMapContext.prototype.constructor = AssignmentMapContext;

AssignmentMapContext.prototype.syntaxBracketLc = function() {
    return this.getTypedRuleContext(SyntaxBracketLcContext,0);
};

AssignmentMapContext.prototype.syntaxBracketRc = function() {
    return this.getTypedRuleContext(SyntaxBracketRcContext,0);
};

AssignmentMapContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

AssignmentMapContext.prototype.syntaxColon = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxColonContext);
    } else {
        return this.getTypedRuleContext(SyntaxColonContext,i);
    }
};

AssignmentMapContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AssignmentMapContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

AssignmentMapContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAssignmentMap(this);
	}
};

AssignmentMapContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAssignmentMap(this);
	}
};

AssignmentMapContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAssignmentMap(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AssignmentMapContext = AssignmentMapContext;

CqlParser.prototype.assignmentMap = function() {

    var localctx = new AssignmentMapContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, CqlParser.RULE_assignmentMap);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1691;
        this.syntaxBracketLc();

        this.state = 1692;
        this.constant();
        this.state = 1693;
        this.syntaxColon();
        this.state = 1694;
        this.expression();
        this.state = 1703;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1696;
            this.syntaxComma();
            this.state = 1697;
            this.constant();
            this.state = 1698;
            this.syntaxColon();
            this.state = 1699;
            this.expression();
            this.state = 1705;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1706;
        this.syntaxBracketRc();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentMapExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_assignmentMapExpression;
    return this;
}

AssignmentMapExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentMapExpressionContext.prototype.constructor = AssignmentMapExpressionContext;

AssignmentMapExpressionContext.prototype.syntaxBracketLc = function() {
    return this.getTypedRuleContext(SyntaxBracketLcContext,0);
};

AssignmentMapExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AssignmentMapExpressionContext.prototype.syntaxBracketRc = function() {
    return this.getTypedRuleContext(SyntaxBracketRcContext,0);
};

AssignmentMapExpressionContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

AssignmentMapExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAssignmentMapExpression(this);
	}
};

AssignmentMapExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAssignmentMapExpression(this);
	}
};

AssignmentMapExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAssignmentMapExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AssignmentMapExpressionContext = AssignmentMapExpressionContext;

CqlParser.prototype.assignmentMapExpression = function() {

    var localctx = new AssignmentMapExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, CqlParser.RULE_assignmentMapExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1708;
        this.syntaxBracketLc();
        this.state = 1709;
        this.expression();
        this.state = 1715;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1710;
            this.syntaxComma();
            this.state = 1711;
            this.expression();
            this.state = 1717;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1718;
        this.syntaxBracketRc();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_assignmentList;
    return this;
}

AssignmentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentListContext.prototype.constructor = AssignmentListContext;

AssignmentListContext.prototype.syntaxBracketLs = function() {
    return this.getTypedRuleContext(SyntaxBracketLsContext,0);
};

AssignmentListContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

AssignmentListContext.prototype.syntaxBracketRs = function() {
    return this.getTypedRuleContext(SyntaxBracketRsContext,0);
};

AssignmentListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

AssignmentListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AssignmentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAssignmentList(this);
	}
};

AssignmentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAssignmentList(this);
	}
};

AssignmentListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAssignmentList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AssignmentListContext = AssignmentListContext;

CqlParser.prototype.assignmentList = function() {

    var localctx = new AssignmentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, CqlParser.RULE_assignmentList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1720;
        this.syntaxBracketLs();
        this.state = 1721;
        this.constant();
        this.state = 1727;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1722;
            this.syntaxComma();
            this.state = 1723;
            this.expression();
            this.state = 1729;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1730;
        this.syntaxBracketRs();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentTupleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_assignmentTuple;
    return this;
}

AssignmentTupleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentTupleContext.prototype.constructor = AssignmentTupleContext;

AssignmentTupleContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

AssignmentTupleContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

AssignmentTupleContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AssignmentTupleContext.prototype.assignmentTuple = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentTupleContext);
    } else {
        return this.getTypedRuleContext(AssignmentTupleContext,i);
    }
};

AssignmentTupleContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

AssignmentTupleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAssignmentTuple(this);
	}
};

AssignmentTupleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAssignmentTuple(this);
	}
};

AssignmentTupleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAssignmentTuple(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AssignmentTupleContext = AssignmentTupleContext;

CqlParser.prototype.assignmentTuple = function() {

    var localctx = new AssignmentTupleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, CqlParser.RULE_assignmentTuple);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1732;
        this.syntaxBracketLr();
        this.state = 1761;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1733;
            this.expression();
            this.state = 1750;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1739;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===CqlParser.COMMA) {
                    this.state = 1734;
                    this.syntaxComma();
                    this.state = 1735;
                    this.expression();
                    this.state = 1741;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;

            case 2:
                this.state = 1747;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===CqlParser.COMMA) {
                    this.state = 1742;
                    this.syntaxComma();
                    this.state = 1743;
                    this.assignmentTuple();
                    this.state = 1749;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;

            }
            break;

        case 2:
            this.state = 1752;
            this.assignmentTuple();
            this.state = 1758;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CqlParser.COMMA) {
                this.state = 1753;
                this.syntaxComma();
                this.state = 1754;
                this.assignmentTuple();
                this.state = 1760;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        }
        this.state = 1763;
        this.syntaxBracketRr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_insert;
    return this;
}

InsertContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertContext.prototype.constructor = InsertContext;

InsertContext.prototype.kwInsert = function() {
    return this.getTypedRuleContext(KwInsertContext,0);
};

InsertContext.prototype.kwInto = function() {
    return this.getTypedRuleContext(KwIntoContext,0);
};

InsertContext.prototype.table = function() {
    return this.getTypedRuleContext(TableContext,0);
};

InsertContext.prototype.insertValuesSpec = function() {
    return this.getTypedRuleContext(InsertValuesSpecContext,0);
};

InsertContext.prototype.beginBatch = function() {
    return this.getTypedRuleContext(BeginBatchContext,0);
};

InsertContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

InsertContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

InsertContext.prototype.insertColumnSpec = function() {
    return this.getTypedRuleContext(InsertColumnSpecContext,0);
};

InsertContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

InsertContext.prototype.usingTtlTimestamp = function() {
    return this.getTypedRuleContext(UsingTtlTimestampContext,0);
};

InsertContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterInsert(this);
	}
};

InsertContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitInsert(this);
	}
};

InsertContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitInsert(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.InsertContext = InsertContext;

CqlParser.prototype.insert = function() {

    var localctx = new InsertContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, CqlParser.RULE_insert);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1766;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_BEGIN) {
            this.state = 1765;
            this.beginBatch();
        }

        this.state = 1768;
        this.kwInsert();
        this.state = 1769;
        this.kwInto();
        this.state = 1773;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
        if(la_===1) {
            this.state = 1770;
            this.keyspace();
            this.state = 1771;
            this.match(CqlParser.DOT);

        }
        this.state = 1775;
        this.table();
        this.state = 1777;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.LR_BRACKET) {
            this.state = 1776;
            this.insertColumnSpec();
        }

        this.state = 1779;
        this.insertValuesSpec();
        this.state = 1781;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_IF) {
            this.state = 1780;
            this.ifNotExist();
        }

        this.state = 1784;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_USING) {
            this.state = 1783;
            this.usingTtlTimestamp();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UsingTtlTimestampContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_usingTtlTimestamp;
    return this;
}

UsingTtlTimestampContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingTtlTimestampContext.prototype.constructor = UsingTtlTimestampContext;

UsingTtlTimestampContext.prototype.kwUsing = function() {
    return this.getTypedRuleContext(KwUsingContext,0);
};

UsingTtlTimestampContext.prototype.ttl = function() {
    return this.getTypedRuleContext(TtlContext,0);
};

UsingTtlTimestampContext.prototype.kwAnd = function() {
    return this.getTypedRuleContext(KwAndContext,0);
};

UsingTtlTimestampContext.prototype.timestamp = function() {
    return this.getTypedRuleContext(TimestampContext,0);
};

UsingTtlTimestampContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterUsingTtlTimestamp(this);
	}
};

UsingTtlTimestampContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitUsingTtlTimestamp(this);
	}
};

UsingTtlTimestampContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitUsingTtlTimestamp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.UsingTtlTimestampContext = UsingTtlTimestampContext;

CqlParser.prototype.usingTtlTimestamp = function() {

    var localctx = new UsingTtlTimestampContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, CqlParser.RULE_usingTtlTimestamp);
    try {
        this.state = 1802;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1786;
            this.kwUsing();
            this.state = 1787;
            this.ttl();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1789;
            this.kwUsing();
            this.state = 1790;
            this.ttl();
            this.state = 1791;
            this.kwAnd();
            this.state = 1792;
            this.timestamp();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1794;
            this.kwUsing();
            this.state = 1795;
            this.timestamp();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1797;
            this.kwUsing();
            this.state = 1798;
            this.timestamp();
            this.state = 1799;
            this.kwAnd();
            this.state = 1800;
            this.ttl();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TimestampContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_timestamp;
    return this;
}

TimestampContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimestampContext.prototype.constructor = TimestampContext;

TimestampContext.prototype.kwTimestamp = function() {
    return this.getTypedRuleContext(KwTimestampContext,0);
};

TimestampContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

TimestampContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTimestamp(this);
	}
};

TimestampContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTimestamp(this);
	}
};

TimestampContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTimestamp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TimestampContext = TimestampContext;

CqlParser.prototype.timestamp = function() {

    var localctx = new TimestampContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, CqlParser.RULE_timestamp);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1804;
        this.kwTimestamp();
        this.state = 1805;
        this.decimalLiteral();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TtlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_ttl;
    return this;
}

TtlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TtlContext.prototype.constructor = TtlContext;

TtlContext.prototype.kwTtl = function() {
    return this.getTypedRuleContext(KwTtlContext,0);
};

TtlContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

TtlContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTtl(this);
	}
};

TtlContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTtl(this);
	}
};

TtlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTtl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TtlContext = TtlContext;

CqlParser.prototype.ttl = function() {

    var localctx = new TtlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, CqlParser.RULE_ttl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1807;
        this.kwTtl();
        this.state = 1808;
        this.decimalLiteral();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UsingTimestampSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_usingTimestampSpec;
    return this;
}

UsingTimestampSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingTimestampSpecContext.prototype.constructor = UsingTimestampSpecContext;

UsingTimestampSpecContext.prototype.kwUsing = function() {
    return this.getTypedRuleContext(KwUsingContext,0);
};

UsingTimestampSpecContext.prototype.timestamp = function() {
    return this.getTypedRuleContext(TimestampContext,0);
};

UsingTimestampSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterUsingTimestampSpec(this);
	}
};

UsingTimestampSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitUsingTimestampSpec(this);
	}
};

UsingTimestampSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitUsingTimestampSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.UsingTimestampSpecContext = UsingTimestampSpecContext;

CqlParser.prototype.usingTimestampSpec = function() {

    var localctx = new UsingTimestampSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, CqlParser.RULE_usingTimestampSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1810;
        this.kwUsing();
        this.state = 1811;
        this.timestamp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfNotExistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_ifNotExist;
    return this;
}

IfNotExistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfNotExistContext.prototype.constructor = IfNotExistContext;

IfNotExistContext.prototype.kwIf = function() {
    return this.getTypedRuleContext(KwIfContext,0);
};

IfNotExistContext.prototype.kwNot = function() {
    return this.getTypedRuleContext(KwNotContext,0);
};

IfNotExistContext.prototype.kwExists = function() {
    return this.getTypedRuleContext(KwExistsContext,0);
};

IfNotExistContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterIfNotExist(this);
	}
};

IfNotExistContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitIfNotExist(this);
	}
};

IfNotExistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitIfNotExist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.IfNotExistContext = IfNotExistContext;

CqlParser.prototype.ifNotExist = function() {

    var localctx = new IfNotExistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, CqlParser.RULE_ifNotExist);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1813;
        this.kwIf();
        this.state = 1814;
        this.kwNot();
        this.state = 1815;
        this.kwExists();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfExistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_ifExist;
    return this;
}

IfExistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfExistContext.prototype.constructor = IfExistContext;

IfExistContext.prototype.kwIf = function() {
    return this.getTypedRuleContext(KwIfContext,0);
};

IfExistContext.prototype.kwExists = function() {
    return this.getTypedRuleContext(KwExistsContext,0);
};

IfExistContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterIfExist(this);
	}
};

IfExistContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitIfExist(this);
	}
};

IfExistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitIfExist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.IfExistContext = IfExistContext;

CqlParser.prototype.ifExist = function() {

    var localctx = new IfExistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, CqlParser.RULE_ifExist);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1817;
        this.kwIf();
        this.state = 1818;
        this.kwExists();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertValuesSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_insertValuesSpec;
    return this;
}

InsertValuesSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertValuesSpecContext.prototype.constructor = InsertValuesSpecContext;

InsertValuesSpecContext.prototype.kwValues = function() {
    return this.getTypedRuleContext(KwValuesContext,0);
};

InsertValuesSpecContext.prototype.LR_BRACKET = function() {
    return this.getToken(CqlParser.LR_BRACKET, 0);
};

InsertValuesSpecContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

InsertValuesSpecContext.prototype.RR_BRACKET = function() {
    return this.getToken(CqlParser.RR_BRACKET, 0);
};

InsertValuesSpecContext.prototype.kwJson = function() {
    return this.getTypedRuleContext(KwJsonContext,0);
};

InsertValuesSpecContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

InsertValuesSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterInsertValuesSpec(this);
	}
};

InsertValuesSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitInsertValuesSpec(this);
	}
};

InsertValuesSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitInsertValuesSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.InsertValuesSpecContext = InsertValuesSpecContext;

CqlParser.prototype.insertValuesSpec = function() {

    var localctx = new InsertValuesSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, CqlParser.RULE_insertValuesSpec);
    try {
        this.state = 1828;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CqlParser.K_VALUES:
            this.enterOuterAlt(localctx, 1);
            this.state = 1820;
            this.kwValues();
            this.state = 1821;
            this.match(CqlParser.LR_BRACKET);
            this.state = 1822;
            this.expressionList();
            this.state = 1823;
            this.match(CqlParser.RR_BRACKET);
            break;
        case CqlParser.K_JSON:
            this.enterOuterAlt(localctx, 2);
            this.state = 1825;
            this.kwJson();
            this.state = 1826;
            this.constant();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertColumnSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_insertColumnSpec;
    return this;
}

InsertColumnSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertColumnSpecContext.prototype.constructor = InsertColumnSpecContext;

InsertColumnSpecContext.prototype.LR_BRACKET = function() {
    return this.getToken(CqlParser.LR_BRACKET, 0);
};

InsertColumnSpecContext.prototype.columnList = function() {
    return this.getTypedRuleContext(ColumnListContext,0);
};

InsertColumnSpecContext.prototype.RR_BRACKET = function() {
    return this.getToken(CqlParser.RR_BRACKET, 0);
};

InsertColumnSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterInsertColumnSpec(this);
	}
};

InsertColumnSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitInsertColumnSpec(this);
	}
};

InsertColumnSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitInsertColumnSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.InsertColumnSpecContext = InsertColumnSpecContext;

CqlParser.prototype.insertColumnSpec = function() {

    var localctx = new InsertColumnSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, CqlParser.RULE_insertColumnSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1830;
        this.match(CqlParser.LR_BRACKET);
        this.state = 1831;
        this.columnList();
        this.state = 1832;
        this.match(CqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_columnList;
    return this;
}

ColumnListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnListContext.prototype.constructor = ColumnListContext;

ColumnListContext.prototype.column = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnContext);
    } else {
        return this.getTypedRuleContext(ColumnContext,i);
    }
};

ColumnListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

ColumnListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterColumnList(this);
	}
};

ColumnListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitColumnList(this);
	}
};

ColumnListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitColumnList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ColumnListContext = ColumnListContext;

CqlParser.prototype.columnList = function() {

    var localctx = new ColumnListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, CqlParser.RULE_columnList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1834;
        this.column();
        this.state = 1840;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1835;
            this.syntaxComma();
            this.state = 1836;
            this.column();
            this.state = 1842;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitExpressionList(this);
	}
};

ExpressionListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitExpressionList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ExpressionListContext = ExpressionListContext;

CqlParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, CqlParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1843;
        this.expression();
        this.state = 1849;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1844;
            this.syntaxComma();
            this.state = 1845;
            this.expression();
            this.state = 1851;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

ExpressionContext.prototype.assignmentMap = function() {
    return this.getTypedRuleContext(AssignmentMapContext,0);
};

ExpressionContext.prototype.assignmentSet = function() {
    return this.getTypedRuleContext(AssignmentSetContext,0);
};

ExpressionContext.prototype.assignmentList = function() {
    return this.getTypedRuleContext(AssignmentListContext,0);
};

ExpressionContext.prototype.assignmentTuple = function() {
    return this.getTypedRuleContext(AssignmentTupleContext,0);
};

ExpressionContext.prototype.assignmentMapExpression = function() {
    return this.getTypedRuleContext(AssignmentMapExpressionContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitExpression(this);
	}
};

ExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ExpressionContext = ExpressionContext;

CqlParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, CqlParser.RULE_expression);
    try {
        this.state = 1858;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1852;
            this.constant();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1853;
            this.assignmentMap();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1854;
            this.assignmentSet();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1855;
            this.assignmentList();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1856;
            this.assignmentTuple();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1857;
            this.assignmentMapExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_select;
    return this;
}

SelectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectContext.prototype.constructor = SelectContext;

SelectContext.prototype.kwSelect = function() {
    return this.getTypedRuleContext(KwSelectContext,0);
};

SelectContext.prototype.selectElements = function() {
    return this.getTypedRuleContext(SelectElementsContext,0);
};

SelectContext.prototype.fromSpec = function() {
    return this.getTypedRuleContext(FromSpecContext,0);
};

SelectContext.prototype.distinctSpec = function() {
    return this.getTypedRuleContext(DistinctSpecContext,0);
};

SelectContext.prototype.kwJson = function() {
    return this.getTypedRuleContext(KwJsonContext,0);
};

SelectContext.prototype.whereSpec = function() {
    return this.getTypedRuleContext(WhereSpecContext,0);
};

SelectContext.prototype.orderSpec = function() {
    return this.getTypedRuleContext(OrderSpecContext,0);
};

SelectContext.prototype.limitSpec = function() {
    return this.getTypedRuleContext(LimitSpecContext,0);
};

SelectContext.prototype.allowFilteringSpec = function() {
    return this.getTypedRuleContext(AllowFilteringSpecContext,0);
};

SelectContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSelect(this);
	}
};

SelectContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSelect(this);
	}
};

SelectContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSelect(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SelectContext = SelectContext;

CqlParser.prototype.select = function() {

    var localctx = new SelectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, CqlParser.RULE_select);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1860;
        this.kwSelect();
        this.state = 1862;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
        if(la_===1) {
            this.state = 1861;
            this.distinctSpec();

        }
        this.state = 1865;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
        if(la_===1) {
            this.state = 1864;
            this.kwJson();

        }
        this.state = 1867;
        this.selectElements();
        this.state = 1868;
        this.fromSpec();
        this.state = 1870;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_WHERE) {
            this.state = 1869;
            this.whereSpec();
        }

        this.state = 1873;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_ORDER) {
            this.state = 1872;
            this.orderSpec();
        }

        this.state = 1876;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_LIMIT) {
            this.state = 1875;
            this.limitSpec();
        }

        this.state = 1879;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.K_ALLOW) {
            this.state = 1878;
            this.allowFilteringSpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AllowFilteringSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_allowFilteringSpec;
    return this;
}

AllowFilteringSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AllowFilteringSpecContext.prototype.constructor = AllowFilteringSpecContext;

AllowFilteringSpecContext.prototype.kwAllow = function() {
    return this.getTypedRuleContext(KwAllowContext,0);
};

AllowFilteringSpecContext.prototype.kwFiltering = function() {
    return this.getTypedRuleContext(KwFilteringContext,0);
};

AllowFilteringSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAllowFilteringSpec(this);
	}
};

AllowFilteringSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAllowFilteringSpec(this);
	}
};

AllowFilteringSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAllowFilteringSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AllowFilteringSpecContext = AllowFilteringSpecContext;

CqlParser.prototype.allowFilteringSpec = function() {

    var localctx = new AllowFilteringSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, CqlParser.RULE_allowFilteringSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1881;
        this.kwAllow();
        this.state = 1882;
        this.kwFiltering();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LimitSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_limitSpec;
    return this;
}

LimitSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitSpecContext.prototype.constructor = LimitSpecContext;

LimitSpecContext.prototype.kwLimit = function() {
    return this.getTypedRuleContext(KwLimitContext,0);
};

LimitSpecContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

LimitSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterLimitSpec(this);
	}
};

LimitSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitLimitSpec(this);
	}
};

LimitSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitLimitSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.LimitSpecContext = LimitSpecContext;

CqlParser.prototype.limitSpec = function() {

    var localctx = new LimitSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, CqlParser.RULE_limitSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1884;
        this.kwLimit();
        this.state = 1885;
        this.decimalLiteral();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FromSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_fromSpec;
    return this;
}

FromSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromSpecContext.prototype.constructor = FromSpecContext;

FromSpecContext.prototype.kwFrom = function() {
    return this.getTypedRuleContext(KwFromContext,0);
};

FromSpecContext.prototype.fromSpecElement = function() {
    return this.getTypedRuleContext(FromSpecElementContext,0);
};

FromSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterFromSpec(this);
	}
};

FromSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitFromSpec(this);
	}
};

FromSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitFromSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.FromSpecContext = FromSpecContext;

CqlParser.prototype.fromSpec = function() {

    var localctx = new FromSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, CqlParser.RULE_fromSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1887;
        this.kwFrom();
        this.state = 1888;
        this.fromSpecElement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FromSpecElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_fromSpecElement;
    return this;
}

FromSpecElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromSpecElementContext.prototype.constructor = FromSpecElementContext;

FromSpecElementContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

FromSpecElementContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

FromSpecElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterFromSpecElement(this);
	}
};

FromSpecElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitFromSpecElement(this);
	}
};

FromSpecElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitFromSpecElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.FromSpecElementContext = FromSpecElementContext;

CqlParser.prototype.fromSpecElement = function() {

    var localctx = new FromSpecElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, CqlParser.RULE_fromSpecElement);
    try {
        this.state = 1895;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1890;
            this.id();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1891;
            this.id();
            this.state = 1892;
            this.match(CqlParser.DOT);
            this.state = 1893;
            this.id();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrderSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_orderSpec;
    return this;
}

OrderSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderSpecContext.prototype.constructor = OrderSpecContext;

OrderSpecContext.prototype.kwOrder = function() {
    return this.getTypedRuleContext(KwOrderContext,0);
};

OrderSpecContext.prototype.kwBy = function() {
    return this.getTypedRuleContext(KwByContext,0);
};

OrderSpecContext.prototype.orderSpecElement = function() {
    return this.getTypedRuleContext(OrderSpecElementContext,0);
};

OrderSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterOrderSpec(this);
	}
};

OrderSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitOrderSpec(this);
	}
};

OrderSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitOrderSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.OrderSpecContext = OrderSpecContext;

CqlParser.prototype.orderSpec = function() {

    var localctx = new OrderSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, CqlParser.RULE_orderSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1897;
        this.kwOrder();
        this.state = 1898;
        this.kwBy();
        this.state = 1899;
        this.orderSpecElement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrderSpecElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_orderSpecElement;
    return this;
}

OrderSpecElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderSpecElementContext.prototype.constructor = OrderSpecElementContext;

OrderSpecElementContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

OrderSpecElementContext.prototype.kwAsc = function() {
    return this.getTypedRuleContext(KwAscContext,0);
};

OrderSpecElementContext.prototype.kwDesc = function() {
    return this.getTypedRuleContext(KwDescContext,0);
};

OrderSpecElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterOrderSpecElement(this);
	}
};

OrderSpecElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitOrderSpecElement(this);
	}
};

OrderSpecElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitOrderSpecElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.OrderSpecElementContext = OrderSpecElementContext;

CqlParser.prototype.orderSpecElement = function() {

    var localctx = new OrderSpecElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, CqlParser.RULE_orderSpecElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1901;
        this.id();
        this.state = 1904;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case CqlParser.K_ASC:
        	this.state = 1902;
        	this.kwAsc();
        	break;
        case CqlParser.K_DESC:
        	this.state = 1903;
        	this.kwDesc();
        	break;
        case CqlParser.EOF:
        case CqlParser.SEMI:
        case CqlParser.MINUSMINUS:
        case CqlParser.K_ALLOW:
        case CqlParser.K_LIMIT:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhereSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_whereSpec;
    return this;
}

WhereSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhereSpecContext.prototype.constructor = WhereSpecContext;

WhereSpecContext.prototype.kwWhere = function() {
    return this.getTypedRuleContext(KwWhereContext,0);
};

WhereSpecContext.prototype.relationElements = function() {
    return this.getTypedRuleContext(RelationElementsContext,0);
};

WhereSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterWhereSpec(this);
	}
};

WhereSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitWhereSpec(this);
	}
};

WhereSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitWhereSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.WhereSpecContext = WhereSpecContext;

CqlParser.prototype.whereSpec = function() {

    var localctx = new WhereSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, CqlParser.RULE_whereSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1906;
        this.kwWhere();
        this.state = 1907;
        this.relationElements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DistinctSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_distinctSpec;
    return this;
}

DistinctSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DistinctSpecContext.prototype.constructor = DistinctSpecContext;

DistinctSpecContext.prototype.kwDistinct = function() {
    return this.getTypedRuleContext(KwDistinctContext,0);
};

DistinctSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDistinctSpec(this);
	}
};

DistinctSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDistinctSpec(this);
	}
};

DistinctSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDistinctSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DistinctSpecContext = DistinctSpecContext;

CqlParser.prototype.distinctSpec = function() {

    var localctx = new DistinctSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, CqlParser.RULE_distinctSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1909;
        this.kwDistinct();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectElementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_selectElements;
    this.star = null; // Token
    return this;
}

SelectElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectElementsContext.prototype.constructor = SelectElementsContext;

SelectElementsContext.prototype.selectElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectElementContext);
    } else {
        return this.getTypedRuleContext(SelectElementContext,i);
    }
};

SelectElementsContext.prototype.STAR = function() {
    return this.getToken(CqlParser.STAR, 0);
};

SelectElementsContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

SelectElementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSelectElements(this);
	}
};

SelectElementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSelectElements(this);
	}
};

SelectElementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSelectElements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SelectElementsContext = SelectElementsContext;

CqlParser.prototype.selectElements = function() {

    var localctx = new SelectElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, CqlParser.RULE_selectElements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1913;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CqlParser.STAR:
            this.state = 1911;
            localctx.star = this.match(CqlParser.STAR);
            break;
        case CqlParser.K_ADD:
        case CqlParser.K_ALL:
        case CqlParser.K_ALLOW:
        case CqlParser.K_ALTER:
        case CqlParser.K_AND:
        case CqlParser.K_ANY:
        case CqlParser.K_APPLY:
        case CqlParser.K_AS:
        case CqlParser.K_ASC:
        case CqlParser.K_AUTHORIZE:
        case CqlParser.K_BATCH:
        case CqlParser.K_BEGIN:
        case CqlParser.K_BY:
        case CqlParser.K_CALLED:
        case CqlParser.K_CLUSTERING:
        case CqlParser.K_COLUMNFAMILY:
        case CqlParser.K_COMPACT:
        case CqlParser.K_CONSISTENCY:
        case CqlParser.K_CONTAINS:
        case CqlParser.K_CREATE:
        case CqlParser.K_CUSTOM:
        case CqlParser.K_DELETE:
        case CqlParser.K_DESC:
        case CqlParser.K_DESCRIBE:
        case CqlParser.K_DISTINCT:
        case CqlParser.K_DROP:
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_EACH_QUORUM:
        case CqlParser.K_ENTRIES:
        case CqlParser.K_EXECUTE:
        case CqlParser.K_EXISTS:
        case CqlParser.K_FALSE:
        case CqlParser.K_FILTERING:
        case CqlParser.K_FINALFUNC:
        case CqlParser.K_FROM:
        case CqlParser.K_FULL:
        case CqlParser.K_FUNCTION:
        case CqlParser.K_FUNCTIONS:
        case CqlParser.K_GRANT:
        case CqlParser.K_IF:
        case CqlParser.K_IN:
        case CqlParser.K_INDEX:
        case CqlParser.K_INFINITY:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_INSERT:
        case CqlParser.K_INTO:
        case CqlParser.K_IS:
        case CqlParser.K_JSON:
        case CqlParser.K_KEY:
        case CqlParser.K_KEYS:
        case CqlParser.K_KEYSPACE:
        case CqlParser.K_KEYSPACES:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_LIMIT:
        case CqlParser.K_LOCAL_ONE:
        case CqlParser.K_LOCAL_QUORUM:
        case CqlParser.K_LOGGED:
        case CqlParser.K_LOGIN:
        case CqlParser.K_MATERIALIZED:
        case CqlParser.K_MODIFY:
        case CqlParser.K_NAN:
        case CqlParser.K_NORECURSIVE:
        case CqlParser.K_NOSUPERUSER:
        case CqlParser.K_NOT:
        case CqlParser.K_NULL:
        case CqlParser.K_OF:
        case CqlParser.K_ON:
        case CqlParser.K_ONE:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_OR:
        case CqlParser.K_ORDER:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PASSWORD:
        case CqlParser.K_PER:
        case CqlParser.K_PERMISSION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_PRIMARY:
        case CqlParser.K_QUORUM:
        case CqlParser.K_RENAME:
        case CqlParser.K_REPLACE:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_RETURNS:
        case CqlParser.K_REVOKE:
        case CqlParser.K_ROLE:
        case CqlParser.K_ROLES:
        case CqlParser.K_SCHEMA:
        case CqlParser.K_SELECT:
        case CqlParser.K_SET:
        case CqlParser.K_SFUNC:
        case CqlParser.K_STATIC:
        case CqlParser.K_STORAGE:
        case CqlParser.K_STYPE:
        case CqlParser.K_SUPERUSER:
        case CqlParser.K_TABLE:
        case CqlParser.K_THREE:
        case CqlParser.K_TIMESTAMP:
        case CqlParser.K_TO:
        case CqlParser.K_TOKEN:
        case CqlParser.K_TRIGGER:
        case CqlParser.K_TRUE:
        case CqlParser.K_TRUNCATE:
        case CqlParser.K_TTL:
        case CqlParser.K_TWO:
        case CqlParser.K_TYPE:
        case CqlParser.K_UNLOGGED:
        case CqlParser.K_UPDATE:
        case CqlParser.K_USE:
        case CqlParser.K_USER:
        case CqlParser.K_USING:
        case CqlParser.K_UUID:
        case CqlParser.K_VALUES:
        case CqlParser.K_VIEW:
        case CqlParser.K_WHERE:
        case CqlParser.K_WITH:
        case CqlParser.K_WRITETIME:
        case CqlParser.K_ASCII:
        case CqlParser.K_BIGINT:
        case CqlParser.K_BLOB:
        case CqlParser.K_BOOLEAN:
        case CqlParser.K_COUNTER:
        case CqlParser.K_DATE:
        case CqlParser.K_DECIMAL:
        case CqlParser.K_DOUBLE:
        case CqlParser.K_FLOAT:
        case CqlParser.K_FROZEN:
        case CqlParser.K_INET:
        case CqlParser.K_INT:
        case CqlParser.K_LIST:
        case CqlParser.K_MAP:
        case CqlParser.K_SMALLINT:
        case CqlParser.K_TEXT:
        case CqlParser.K_TIMEUUID:
        case CqlParser.K_TIME:
        case CqlParser.K_TINYINT:
        case CqlParser.K_TUPLE:
        case CqlParser.K_VARCHAR:
        case CqlParser.K_VARINT:
        case CqlParser.OBJECT_NAME:
        case CqlParser.K_USERS:
            this.state = 1912;
            this.selectElement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1920;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1915;
            this.syntaxComma();
            this.state = 1916;
            this.selectElement();
            this.state = 1922;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_selectElement;
    return this;
}

SelectElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectElementContext.prototype.constructor = SelectElementContext;

SelectElementContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

SelectElementContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

SelectElementContext.prototype.STAR = function() {
    return this.getToken(CqlParser.STAR, 0);
};

SelectElementContext.prototype.kwAs = function() {
    return this.getTypedRuleContext(KwAsContext,0);
};

SelectElementContext.prototype.functionCall = function() {
    return this.getTypedRuleContext(FunctionCallContext,0);
};

SelectElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSelectElement(this);
	}
};

SelectElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSelectElement(this);
	}
};

SelectElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSelectElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SelectElementContext = SelectElementContext;

CqlParser.prototype.selectElement = function() {

    var localctx = new SelectElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, CqlParser.RULE_selectElement);
    var _la = 0; // Token type
    try {
        this.state = 1939;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1923;
            this.id();
            this.state = 1924;
            this.match(CqlParser.DOT);
            this.state = 1925;
            this.match(CqlParser.STAR);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1927;
            this.id();
            this.state = 1931;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CqlParser.K_AS) {
                this.state = 1928;
                this.kwAs();
                this.state = 1929;
                this.id();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1933;
            this.functionCall();
            this.state = 1937;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CqlParser.K_AS) {
                this.state = 1934;
                this.kwAs();
                this.state = 1935;
                this.id();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RelationElementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_relationElements;
    return this;
}

RelationElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationElementsContext.prototype.constructor = RelationElementsContext;

RelationElementsContext.prototype.relationElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RelationElementContext);
    } else {
        return this.getTypedRuleContext(RelationElementContext,i);
    }
};

RelationElementsContext.prototype.kwAnd = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KwAndContext);
    } else {
        return this.getTypedRuleContext(KwAndContext,i);
    }
};

RelationElementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterRelationElements(this);
	}
};

RelationElementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitRelationElements(this);
	}
};

RelationElementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitRelationElements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.RelationElementsContext = RelationElementsContext;

CqlParser.prototype.relationElements = function() {

    var localctx = new RelationElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, CqlParser.RULE_relationElements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1941;
        this.relationElement();
        this.state = 1947;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.K_AND) {
            this.state = 1942;
            this.kwAnd();
            this.state = 1943;
            this.relationElement();
            this.state = 1949;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RelationElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_relationElement;
    return this;
}

RelationElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationElementContext.prototype.constructor = RelationElementContext;

RelationElementContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

RelationElementContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

RelationElementContext.prototype.OPERATOR_EQ = function() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
};

RelationElementContext.prototype.OPERATOR_LT = function() {
    return this.getToken(CqlParser.OPERATOR_LT, 0);
};

RelationElementContext.prototype.OPERATOR_GT = function() {
    return this.getToken(CqlParser.OPERATOR_GT, 0);
};

RelationElementContext.prototype.OPERATOR_LTE = function() {
    return this.getToken(CqlParser.OPERATOR_LTE, 0);
};

RelationElementContext.prototype.OPERATOR_GTE = function() {
    return this.getToken(CqlParser.OPERATOR_GTE, 0);
};

RelationElementContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

RelationElementContext.prototype.functionCall = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionCallContext);
    } else {
        return this.getTypedRuleContext(FunctionCallContext,i);
    }
};

RelationElementContext.prototype.kwIn = function() {
    return this.getTypedRuleContext(KwInContext,0);
};

RelationElementContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.LR_BRACKET);
    } else {
        return this.getToken(CqlParser.LR_BRACKET, i);
    }
};


RelationElementContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.RR_BRACKET);
    } else {
        return this.getToken(CqlParser.RR_BRACKET, i);
    }
};


RelationElementContext.prototype.functionArgs = function() {
    return this.getTypedRuleContext(FunctionArgsContext,0);
};

RelationElementContext.prototype.assignmentTuple = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentTupleContext);
    } else {
        return this.getTypedRuleContext(AssignmentTupleContext,i);
    }
};

RelationElementContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

RelationElementContext.prototype.relalationContainsKey = function() {
    return this.getTypedRuleContext(RelalationContainsKeyContext,0);
};

RelationElementContext.prototype.relalationContains = function() {
    return this.getTypedRuleContext(RelalationContainsContext,0);
};

RelationElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterRelationElement(this);
	}
};

RelationElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitRelationElement(this);
	}
};

RelationElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitRelationElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.RelationElementContext = RelationElementContext;

CqlParser.prototype.relationElement = function() {

    var localctx = new RelationElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, CqlParser.RULE_relationElement);
    var _la = 0; // Token type
    try {
        this.state = 2023;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1950;
            this.id();
            this.state = 1951;
            _la = this._input.LA(1);
            if(!(((((_la - 174)) & ~0x1f) == 0 && ((1 << (_la - 174)) & ((1 << (CqlParser.OPERATOR_EQ - 174)) | (1 << (CqlParser.OPERATOR_LT - 174)) | (1 << (CqlParser.OPERATOR_GT - 174)) | (1 << (CqlParser.OPERATOR_LTE - 174)) | (1 << (CqlParser.OPERATOR_GTE - 174)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1952;
            this.constant();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1954;
            this.id();
            this.state = 1955;
            this.match(CqlParser.DOT);
            this.state = 1956;
            this.id();
            this.state = 1957;
            _la = this._input.LA(1);
            if(!(((((_la - 174)) & ~0x1f) == 0 && ((1 << (_la - 174)) & ((1 << (CqlParser.OPERATOR_EQ - 174)) | (1 << (CqlParser.OPERATOR_LT - 174)) | (1 << (CqlParser.OPERATOR_GT - 174)) | (1 << (CqlParser.OPERATOR_LTE - 174)) | (1 << (CqlParser.OPERATOR_GTE - 174)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1958;
            this.constant();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1960;
            this.functionCall();
            this.state = 1961;
            _la = this._input.LA(1);
            if(!(((((_la - 174)) & ~0x1f) == 0 && ((1 << (_la - 174)) & ((1 << (CqlParser.OPERATOR_EQ - 174)) | (1 << (CqlParser.OPERATOR_LT - 174)) | (1 << (CqlParser.OPERATOR_GT - 174)) | (1 << (CqlParser.OPERATOR_LTE - 174)) | (1 << (CqlParser.OPERATOR_GTE - 174)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1962;
            this.constant();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1964;
            this.functionCall();
            this.state = 1965;
            _la = this._input.LA(1);
            if(!(((((_la - 174)) & ~0x1f) == 0 && ((1 << (_la - 174)) & ((1 << (CqlParser.OPERATOR_EQ - 174)) | (1 << (CqlParser.OPERATOR_LT - 174)) | (1 << (CqlParser.OPERATOR_GT - 174)) | (1 << (CqlParser.OPERATOR_LTE - 174)) | (1 << (CqlParser.OPERATOR_GTE - 174)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1966;
            this.functionCall();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1968;
            this.id();
            this.state = 1969;
            this.kwIn();
            this.state = 1970;
            this.match(CqlParser.LR_BRACKET);
            this.state = 1972;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 23)) & ~0x1f) == 0 && ((1 << (_la - 23)) & ((1 << (CqlParser.K_ADD - 23)) | (1 << (CqlParser.K_ALL - 23)) | (1 << (CqlParser.K_ALLOW - 23)) | (1 << (CqlParser.K_ALTER - 23)) | (1 << (CqlParser.K_AND - 23)) | (1 << (CqlParser.K_ANY - 23)) | (1 << (CqlParser.K_APPLY - 23)) | (1 << (CqlParser.K_AS - 23)) | (1 << (CqlParser.K_ASC - 23)) | (1 << (CqlParser.K_AUTHORIZE - 23)) | (1 << (CqlParser.K_BATCH - 23)) | (1 << (CqlParser.K_BEGIN - 23)) | (1 << (CqlParser.K_BY - 23)) | (1 << (CqlParser.K_CALLED - 23)) | (1 << (CqlParser.K_CLUSTERING - 23)) | (1 << (CqlParser.K_COLUMNFAMILY - 23)) | (1 << (CqlParser.K_COMPACT - 23)) | (1 << (CqlParser.K_CONSISTENCY - 23)) | (1 << (CqlParser.K_CONTAINS - 23)) | (1 << (CqlParser.K_CREATE - 23)) | (1 << (CqlParser.K_CUSTOM - 23)) | (1 << (CqlParser.K_DELETE - 23)) | (1 << (CqlParser.K_DESC - 23)) | (1 << (CqlParser.K_DESCRIBE - 23)) | (1 << (CqlParser.K_DISTINCT - 23)) | (1 << (CqlParser.K_DROP - 23)) | (1 << (CqlParser.K_DURABLE_WRITES - 23)) | (1 << (CqlParser.K_EACH_QUORUM - 23)) | (1 << (CqlParser.K_ENTRIES - 23)) | (1 << (CqlParser.K_EXECUTE - 23)) | (1 << (CqlParser.K_EXISTS - 23)))) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (CqlParser.K_FALSE - 55)) | (1 << (CqlParser.K_FILTERING - 55)) | (1 << (CqlParser.K_FINALFUNC - 55)) | (1 << (CqlParser.K_FROM - 55)) | (1 << (CqlParser.K_FULL - 55)) | (1 << (CqlParser.K_FUNCTION - 55)) | (1 << (CqlParser.K_FUNCTIONS - 55)) | (1 << (CqlParser.K_GRANT - 55)) | (1 << (CqlParser.K_IF - 55)) | (1 << (CqlParser.K_IN - 55)) | (1 << (CqlParser.K_INDEX - 55)) | (1 << (CqlParser.K_INFINITY - 55)) | (1 << (CqlParser.K_INITCOND - 55)) | (1 << (CqlParser.K_INPUT - 55)) | (1 << (CqlParser.K_INSERT - 55)) | (1 << (CqlParser.K_INTO - 55)) | (1 << (CqlParser.K_IS - 55)) | (1 << (CqlParser.K_JSON - 55)) | (1 << (CqlParser.K_KEY - 55)) | (1 << (CqlParser.K_KEYS - 55)) | (1 << (CqlParser.K_KEYSPACE - 55)) | (1 << (CqlParser.K_KEYSPACES - 55)) | (1 << (CqlParser.K_LANGUAGE - 55)) | (1 << (CqlParser.K_LEVEL - 55)) | (1 << (CqlParser.K_LIMIT - 55)) | (1 << (CqlParser.K_LOCAL_ONE - 55)) | (1 << (CqlParser.K_LOCAL_QUORUM - 55)) | (1 << (CqlParser.K_LOGGED - 55)) | (1 << (CqlParser.K_LOGIN - 55)) | (1 << (CqlParser.K_MATERIALIZED - 55)) | (1 << (CqlParser.K_MODIFY - 55)) | (1 << (CqlParser.K_NAN - 55)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (CqlParser.K_NORECURSIVE - 87)) | (1 << (CqlParser.K_NOSUPERUSER - 87)) | (1 << (CqlParser.K_NOT - 87)) | (1 << (CqlParser.K_NULL - 87)) | (1 << (CqlParser.K_OF - 87)) | (1 << (CqlParser.K_ON - 87)) | (1 << (CqlParser.K_ONE - 87)) | (1 << (CqlParser.K_OPTIONS - 87)) | (1 << (CqlParser.K_OR - 87)) | (1 << (CqlParser.K_ORDER - 87)) | (1 << (CqlParser.K_PARTITION - 87)) | (1 << (CqlParser.K_PASSWORD - 87)) | (1 << (CqlParser.K_PER - 87)) | (1 << (CqlParser.K_PERMISSION - 87)) | (1 << (CqlParser.K_PERMISSIONS - 87)) | (1 << (CqlParser.K_PRIMARY - 87)) | (1 << (CqlParser.K_QUORUM - 87)) | (1 << (CqlParser.K_RENAME - 87)) | (1 << (CqlParser.K_REPLACE - 87)) | (1 << (CqlParser.K_REPLICATION - 87)) | (1 << (CqlParser.K_RETURNS - 87)) | (1 << (CqlParser.K_REVOKE - 87)) | (1 << (CqlParser.K_ROLE - 87)) | (1 << (CqlParser.K_ROLES - 87)) | (1 << (CqlParser.K_SCHEMA - 87)) | (1 << (CqlParser.K_SELECT - 87)) | (1 << (CqlParser.K_SET - 87)) | (1 << (CqlParser.K_SFUNC - 87)) | (1 << (CqlParser.K_STATIC - 87)))) !== 0) || ((((_la - 119)) & ~0x1f) == 0 && ((1 << (_la - 119)) & ((1 << (CqlParser.K_STORAGE - 119)) | (1 << (CqlParser.K_STYPE - 119)) | (1 << (CqlParser.K_SUPERUSER - 119)) | (1 << (CqlParser.K_TABLE - 119)) | (1 << (CqlParser.K_THREE - 119)) | (1 << (CqlParser.K_TIMESTAMP - 119)) | (1 << (CqlParser.K_TO - 119)) | (1 << (CqlParser.K_TOKEN - 119)) | (1 << (CqlParser.K_TRIGGER - 119)) | (1 << (CqlParser.K_TRUE - 119)) | (1 << (CqlParser.K_TRUNCATE - 119)) | (1 << (CqlParser.K_TTL - 119)) | (1 << (CqlParser.K_TWO - 119)) | (1 << (CqlParser.K_TYPE - 119)) | (1 << (CqlParser.K_UNLOGGED - 119)) | (1 << (CqlParser.K_UPDATE - 119)) | (1 << (CqlParser.K_USE - 119)) | (1 << (CqlParser.K_USER - 119)) | (1 << (CqlParser.K_USING - 119)) | (1 << (CqlParser.K_UUID - 119)) | (1 << (CqlParser.K_VALUES - 119)) | (1 << (CqlParser.K_VIEW - 119)) | (1 << (CqlParser.K_WHERE - 119)) | (1 << (CqlParser.K_WITH - 119)) | (1 << (CqlParser.K_WRITETIME - 119)) | (1 << (CqlParser.K_ASCII - 119)) | (1 << (CqlParser.K_BIGINT - 119)) | (1 << (CqlParser.K_BLOB - 119)) | (1 << (CqlParser.K_BOOLEAN - 119)) | (1 << (CqlParser.K_COUNTER - 119)) | (1 << (CqlParser.K_DATE - 119)) | (1 << (CqlParser.K_DECIMAL - 119)))) !== 0) || ((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (CqlParser.K_DOUBLE - 151)) | (1 << (CqlParser.K_FLOAT - 151)) | (1 << (CqlParser.K_FROZEN - 151)) | (1 << (CqlParser.K_INET - 151)) | (1 << (CqlParser.K_INT - 151)) | (1 << (CqlParser.K_LIST - 151)) | (1 << (CqlParser.K_MAP - 151)) | (1 << (CqlParser.K_SMALLINT - 151)) | (1 << (CqlParser.K_TEXT - 151)) | (1 << (CqlParser.K_TIMEUUID - 151)) | (1 << (CqlParser.K_TIME - 151)) | (1 << (CqlParser.K_TINYINT - 151)) | (1 << (CqlParser.K_TUPLE - 151)) | (1 << (CqlParser.K_VARCHAR - 151)) | (1 << (CqlParser.K_VARINT - 151)) | (1 << (CqlParser.CODE_BLOCK - 151)) | (1 << (CqlParser.STRING_LITERAL - 151)) | (1 << (CqlParser.DECIMAL_LITERAL - 151)) | (1 << (CqlParser.FLOAT_LITERAL - 151)) | (1 << (CqlParser.HEXADECIMAL_LITERAL - 151)) | (1 << (CqlParser.OBJECT_NAME - 151)) | (1 << (CqlParser.UUID - 151)) | (1 << (CqlParser.K_USERS - 151)))) !== 0)) {
                this.state = 1971;
                this.functionArgs();
            }

            this.state = 1974;
            this.match(CqlParser.RR_BRACKET);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1976;
            this.match(CqlParser.LR_BRACKET);
            this.state = 1977;
            this.id();
            this.state = 1983;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CqlParser.COMMA) {
                this.state = 1978;
                this.syntaxComma();
                this.state = 1979;
                this.id();
                this.state = 1985;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1986;
            this.match(CqlParser.RR_BRACKET);
            this.state = 1987;
            this.kwIn();
            this.state = 1988;
            this.match(CqlParser.LR_BRACKET);
            this.state = 1989;
            this.assignmentTuple();
            this.state = 1995;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CqlParser.COMMA) {
                this.state = 1990;
                this.syntaxComma();
                this.state = 1991;
                this.assignmentTuple();
                this.state = 1997;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1998;
            this.match(CqlParser.RR_BRACKET);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2000;
            this.match(CqlParser.LR_BRACKET);
            this.state = 2001;
            this.id();
            this.state = 2007;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CqlParser.COMMA) {
                this.state = 2002;
                this.syntaxComma();
                this.state = 2003;
                this.id();
                this.state = 2009;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2010;
            this.match(CqlParser.RR_BRACKET);
            this.state = 2011;
            _la = this._input.LA(1);
            if(!(((((_la - 174)) & ~0x1f) == 0 && ((1 << (_la - 174)) & ((1 << (CqlParser.OPERATOR_EQ - 174)) | (1 << (CqlParser.OPERATOR_LT - 174)) | (1 << (CqlParser.OPERATOR_GT - 174)) | (1 << (CqlParser.OPERATOR_LTE - 174)) | (1 << (CqlParser.OPERATOR_GTE - 174)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

            this.state = 2012;
            this.assignmentTuple();
            this.state = 2018;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CqlParser.COMMA) {
                this.state = 2013;
                this.syntaxComma();
                this.state = 2014;
                this.assignmentTuple();
                this.state = 2020;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2021;
            this.relalationContainsKey();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2022;
            this.relalationContains();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RelalationContainsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_relalationContains;
    return this;
}

RelalationContainsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelalationContainsContext.prototype.constructor = RelalationContainsContext;

RelalationContainsContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

RelalationContainsContext.prototype.kwContains = function() {
    return this.getTypedRuleContext(KwContainsContext,0);
};

RelalationContainsContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

RelalationContainsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterRelalationContains(this);
	}
};

RelalationContainsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitRelalationContains(this);
	}
};

RelalationContainsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitRelalationContains(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.RelalationContainsContext = RelalationContainsContext;

CqlParser.prototype.relalationContains = function() {

    var localctx = new RelalationContainsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, CqlParser.RULE_relalationContains);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2025;
        this.id();
        this.state = 2026;
        this.kwContains();
        this.state = 2027;
        this.constant();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RelalationContainsKeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_relalationContainsKey;
    return this;
}

RelalationContainsKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelalationContainsKeyContext.prototype.constructor = RelalationContainsKeyContext;

RelalationContainsKeyContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

RelalationContainsKeyContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

RelalationContainsKeyContext.prototype.kwContains = function() {
    return this.getTypedRuleContext(KwContainsContext,0);
};

RelalationContainsKeyContext.prototype.kwKey = function() {
    return this.getTypedRuleContext(KwKeyContext,0);
};

RelalationContainsKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterRelalationContainsKey(this);
	}
};

RelalationContainsKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitRelalationContainsKey(this);
	}
};

RelalationContainsKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitRelalationContainsKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.RelalationContainsKeyContext = RelalationContainsKeyContext;

CqlParser.prototype.relalationContainsKey = function() {

    var localctx = new RelalationContainsKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, CqlParser.RULE_relalationContainsKey);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2029;
        this.id();

        this.state = 2030;
        this.kwContains();
        this.state = 2031;
        this.kwKey();
        this.state = 2033;
        this.constant();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_functionCall;
    return this;
}

FunctionCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionCallContext.prototype.constructor = FunctionCallContext;

FunctionCallContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

FunctionCallContext.prototype.LR_BRACKET = function() {
    return this.getToken(CqlParser.LR_BRACKET, 0);
};

FunctionCallContext.prototype.STAR = function() {
    return this.getToken(CqlParser.STAR, 0);
};

FunctionCallContext.prototype.RR_BRACKET = function() {
    return this.getToken(CqlParser.RR_BRACKET, 0);
};

FunctionCallContext.prototype.functionArgs = function() {
    return this.getTypedRuleContext(FunctionArgsContext,0);
};

FunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterFunctionCall(this);
	}
};

FunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitFunctionCall(this);
	}
};

FunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.FunctionCallContext = FunctionCallContext;

CqlParser.prototype.functionCall = function() {

    var localctx = new FunctionCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, CqlParser.RULE_functionCall);
    var _la = 0; // Token type
    try {
        this.state = 2047;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2035;
            this.id();
            this.state = 2036;
            this.match(CqlParser.LR_BRACKET);
            this.state = 2037;
            this.match(CqlParser.STAR);
            this.state = 2038;
            this.match(CqlParser.RR_BRACKET);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2040;
            this.id();
            this.state = 2041;
            this.match(CqlParser.LR_BRACKET);
            this.state = 2043;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 23)) & ~0x1f) == 0 && ((1 << (_la - 23)) & ((1 << (CqlParser.K_ADD - 23)) | (1 << (CqlParser.K_ALL - 23)) | (1 << (CqlParser.K_ALLOW - 23)) | (1 << (CqlParser.K_ALTER - 23)) | (1 << (CqlParser.K_AND - 23)) | (1 << (CqlParser.K_ANY - 23)) | (1 << (CqlParser.K_APPLY - 23)) | (1 << (CqlParser.K_AS - 23)) | (1 << (CqlParser.K_ASC - 23)) | (1 << (CqlParser.K_AUTHORIZE - 23)) | (1 << (CqlParser.K_BATCH - 23)) | (1 << (CqlParser.K_BEGIN - 23)) | (1 << (CqlParser.K_BY - 23)) | (1 << (CqlParser.K_CALLED - 23)) | (1 << (CqlParser.K_CLUSTERING - 23)) | (1 << (CqlParser.K_COLUMNFAMILY - 23)) | (1 << (CqlParser.K_COMPACT - 23)) | (1 << (CqlParser.K_CONSISTENCY - 23)) | (1 << (CqlParser.K_CONTAINS - 23)) | (1 << (CqlParser.K_CREATE - 23)) | (1 << (CqlParser.K_CUSTOM - 23)) | (1 << (CqlParser.K_DELETE - 23)) | (1 << (CqlParser.K_DESC - 23)) | (1 << (CqlParser.K_DESCRIBE - 23)) | (1 << (CqlParser.K_DISTINCT - 23)) | (1 << (CqlParser.K_DROP - 23)) | (1 << (CqlParser.K_DURABLE_WRITES - 23)) | (1 << (CqlParser.K_EACH_QUORUM - 23)) | (1 << (CqlParser.K_ENTRIES - 23)) | (1 << (CqlParser.K_EXECUTE - 23)) | (1 << (CqlParser.K_EXISTS - 23)))) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (CqlParser.K_FALSE - 55)) | (1 << (CqlParser.K_FILTERING - 55)) | (1 << (CqlParser.K_FINALFUNC - 55)) | (1 << (CqlParser.K_FROM - 55)) | (1 << (CqlParser.K_FULL - 55)) | (1 << (CqlParser.K_FUNCTION - 55)) | (1 << (CqlParser.K_FUNCTIONS - 55)) | (1 << (CqlParser.K_GRANT - 55)) | (1 << (CqlParser.K_IF - 55)) | (1 << (CqlParser.K_IN - 55)) | (1 << (CqlParser.K_INDEX - 55)) | (1 << (CqlParser.K_INFINITY - 55)) | (1 << (CqlParser.K_INITCOND - 55)) | (1 << (CqlParser.K_INPUT - 55)) | (1 << (CqlParser.K_INSERT - 55)) | (1 << (CqlParser.K_INTO - 55)) | (1 << (CqlParser.K_IS - 55)) | (1 << (CqlParser.K_JSON - 55)) | (1 << (CqlParser.K_KEY - 55)) | (1 << (CqlParser.K_KEYS - 55)) | (1 << (CqlParser.K_KEYSPACE - 55)) | (1 << (CqlParser.K_KEYSPACES - 55)) | (1 << (CqlParser.K_LANGUAGE - 55)) | (1 << (CqlParser.K_LEVEL - 55)) | (1 << (CqlParser.K_LIMIT - 55)) | (1 << (CqlParser.K_LOCAL_ONE - 55)) | (1 << (CqlParser.K_LOCAL_QUORUM - 55)) | (1 << (CqlParser.K_LOGGED - 55)) | (1 << (CqlParser.K_LOGIN - 55)) | (1 << (CqlParser.K_MATERIALIZED - 55)) | (1 << (CqlParser.K_MODIFY - 55)) | (1 << (CqlParser.K_NAN - 55)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (CqlParser.K_NORECURSIVE - 87)) | (1 << (CqlParser.K_NOSUPERUSER - 87)) | (1 << (CqlParser.K_NOT - 87)) | (1 << (CqlParser.K_NULL - 87)) | (1 << (CqlParser.K_OF - 87)) | (1 << (CqlParser.K_ON - 87)) | (1 << (CqlParser.K_ONE - 87)) | (1 << (CqlParser.K_OPTIONS - 87)) | (1 << (CqlParser.K_OR - 87)) | (1 << (CqlParser.K_ORDER - 87)) | (1 << (CqlParser.K_PARTITION - 87)) | (1 << (CqlParser.K_PASSWORD - 87)) | (1 << (CqlParser.K_PER - 87)) | (1 << (CqlParser.K_PERMISSION - 87)) | (1 << (CqlParser.K_PERMISSIONS - 87)) | (1 << (CqlParser.K_PRIMARY - 87)) | (1 << (CqlParser.K_QUORUM - 87)) | (1 << (CqlParser.K_RENAME - 87)) | (1 << (CqlParser.K_REPLACE - 87)) | (1 << (CqlParser.K_REPLICATION - 87)) | (1 << (CqlParser.K_RETURNS - 87)) | (1 << (CqlParser.K_REVOKE - 87)) | (1 << (CqlParser.K_ROLE - 87)) | (1 << (CqlParser.K_ROLES - 87)) | (1 << (CqlParser.K_SCHEMA - 87)) | (1 << (CqlParser.K_SELECT - 87)) | (1 << (CqlParser.K_SET - 87)) | (1 << (CqlParser.K_SFUNC - 87)) | (1 << (CqlParser.K_STATIC - 87)))) !== 0) || ((((_la - 119)) & ~0x1f) == 0 && ((1 << (_la - 119)) & ((1 << (CqlParser.K_STORAGE - 119)) | (1 << (CqlParser.K_STYPE - 119)) | (1 << (CqlParser.K_SUPERUSER - 119)) | (1 << (CqlParser.K_TABLE - 119)) | (1 << (CqlParser.K_THREE - 119)) | (1 << (CqlParser.K_TIMESTAMP - 119)) | (1 << (CqlParser.K_TO - 119)) | (1 << (CqlParser.K_TOKEN - 119)) | (1 << (CqlParser.K_TRIGGER - 119)) | (1 << (CqlParser.K_TRUE - 119)) | (1 << (CqlParser.K_TRUNCATE - 119)) | (1 << (CqlParser.K_TTL - 119)) | (1 << (CqlParser.K_TWO - 119)) | (1 << (CqlParser.K_TYPE - 119)) | (1 << (CqlParser.K_UNLOGGED - 119)) | (1 << (CqlParser.K_UPDATE - 119)) | (1 << (CqlParser.K_USE - 119)) | (1 << (CqlParser.K_USER - 119)) | (1 << (CqlParser.K_USING - 119)) | (1 << (CqlParser.K_UUID - 119)) | (1 << (CqlParser.K_VALUES - 119)) | (1 << (CqlParser.K_VIEW - 119)) | (1 << (CqlParser.K_WHERE - 119)) | (1 << (CqlParser.K_WITH - 119)) | (1 << (CqlParser.K_WRITETIME - 119)) | (1 << (CqlParser.K_ASCII - 119)) | (1 << (CqlParser.K_BIGINT - 119)) | (1 << (CqlParser.K_BLOB - 119)) | (1 << (CqlParser.K_BOOLEAN - 119)) | (1 << (CqlParser.K_COUNTER - 119)) | (1 << (CqlParser.K_DATE - 119)) | (1 << (CqlParser.K_DECIMAL - 119)))) !== 0) || ((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (CqlParser.K_DOUBLE - 151)) | (1 << (CqlParser.K_FLOAT - 151)) | (1 << (CqlParser.K_FROZEN - 151)) | (1 << (CqlParser.K_INET - 151)) | (1 << (CqlParser.K_INT - 151)) | (1 << (CqlParser.K_LIST - 151)) | (1 << (CqlParser.K_MAP - 151)) | (1 << (CqlParser.K_SMALLINT - 151)) | (1 << (CqlParser.K_TEXT - 151)) | (1 << (CqlParser.K_TIMEUUID - 151)) | (1 << (CqlParser.K_TIME - 151)) | (1 << (CqlParser.K_TINYINT - 151)) | (1 << (CqlParser.K_TUPLE - 151)) | (1 << (CqlParser.K_VARCHAR - 151)) | (1 << (CqlParser.K_VARINT - 151)) | (1 << (CqlParser.CODE_BLOCK - 151)) | (1 << (CqlParser.STRING_LITERAL - 151)) | (1 << (CqlParser.DECIMAL_LITERAL - 151)) | (1 << (CqlParser.FLOAT_LITERAL - 151)) | (1 << (CqlParser.HEXADECIMAL_LITERAL - 151)) | (1 << (CqlParser.OBJECT_NAME - 151)) | (1 << (CqlParser.UUID - 151)) | (1 << (CqlParser.K_USERS - 151)))) !== 0)) {
                this.state = 2042;
                this.functionArgs();
            }

            this.state = 2045;
            this.match(CqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionArgsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_functionArgs;
    return this;
}

FunctionArgsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionArgsContext.prototype.constructor = FunctionArgsContext;

FunctionArgsContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

FunctionArgsContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

FunctionArgsContext.prototype.functionCall = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionCallContext);
    } else {
        return this.getTypedRuleContext(FunctionCallContext,i);
    }
};

FunctionArgsContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

FunctionArgsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterFunctionArgs(this);
	}
};

FunctionArgsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitFunctionArgs(this);
	}
};

FunctionArgsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitFunctionArgs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.FunctionArgsContext = FunctionArgsContext;

CqlParser.prototype.functionArgs = function() {

    var localctx = new FunctionArgsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, CqlParser.RULE_functionArgs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2052;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2049;
            this.constant();
            break;

        case 2:
            this.state = 2050;
            this.id();
            break;

        case 3:
            this.state = 2051;
            this.functionCall();
            break;

        }
        this.state = 2062;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 2054;
            this.syntaxComma();
            this.state = 2058;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
            switch(la_) {
            case 1:
                this.state = 2055;
                this.constant();
                break;

            case 2:
                this.state = 2056;
                this.id();
                break;

            case 3:
                this.state = 2057;
                this.functionCall();
                break;

            }
            this.state = 2064;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_constant;
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.UUID = function() {
    return this.getToken(CqlParser.UUID, 0);
};

ConstantContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

ConstantContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

ConstantContext.prototype.floatLiteral = function() {
    return this.getTypedRuleContext(FloatLiteralContext,0);
};

ConstantContext.prototype.hexadecimalLiteral = function() {
    return this.getTypedRuleContext(HexadecimalLiteralContext,0);
};

ConstantContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

ConstantContext.prototype.codeBlock = function() {
    return this.getTypedRuleContext(CodeBlockContext,0);
};

ConstantContext.prototype.kwNull = function() {
    return this.getTypedRuleContext(KwNullContext,0);
};

ConstantContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitConstant(this);
	}
};

ConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ConstantContext = ConstantContext;

CqlParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, CqlParser.RULE_constant);
    try {
        this.state = 2074;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2065;
            this.match(CqlParser.UUID);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2066;
            this.stringLiteral();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2067;
            this.decimalLiteral();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2068;
            this.floatLiteral();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2069;
            this.hexadecimalLiteral();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2070;
            this.booleanLiteral();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2071;
            this.codeBlock();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2072;
            this.kwNull();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2073;
            this.id();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DecimalLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_decimalLiteral;
    return this;
}

DecimalLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecimalLiteralContext.prototype.constructor = DecimalLiteralContext;

DecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(CqlParser.DECIMAL_LITERAL, 0);
};

DecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDecimalLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DecimalLiteralContext = DecimalLiteralContext;

CqlParser.prototype.decimalLiteral = function() {

    var localctx = new DecimalLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, CqlParser.RULE_decimalLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2076;
        this.match(CqlParser.DECIMAL_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FloatLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_floatLiteral;
    return this;
}

FloatLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FloatLiteralContext.prototype.constructor = FloatLiteralContext;

FloatLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(CqlParser.DECIMAL_LITERAL, 0);
};

FloatLiteralContext.prototype.FLOAT_LITERAL = function() {
    return this.getToken(CqlParser.FLOAT_LITERAL, 0);
};

FloatLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterFloatLiteral(this);
	}
};

FloatLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitFloatLiteral(this);
	}
};

FloatLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitFloatLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.FloatLiteralContext = FloatLiteralContext;

CqlParser.prototype.floatLiteral = function() {

    var localctx = new FloatLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, CqlParser.RULE_floatLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2078;
        _la = this._input.LA(1);
        if(!(_la===CqlParser.DECIMAL_LITERAL || _la===CqlParser.FLOAT_LITERAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StringLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_stringLiteral;
    return this;
}

StringLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

StringLiteralContext.prototype.STRING_LITERAL = function() {
    return this.getToken(CqlParser.STRING_LITERAL, 0);
};

StringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterStringLiteral(this);
	}
};

StringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitStringLiteral(this);
	}
};

StringLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitStringLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.StringLiteralContext = StringLiteralContext;

CqlParser.prototype.stringLiteral = function() {

    var localctx = new StringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, CqlParser.RULE_stringLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2080;
        this.match(CqlParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BooleanLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_booleanLiteral;
    return this;
}

BooleanLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

BooleanLiteralContext.prototype.K_TRUE = function() {
    return this.getToken(CqlParser.K_TRUE, 0);
};

BooleanLiteralContext.prototype.K_FALSE = function() {
    return this.getToken(CqlParser.K_FALSE, 0);
};

BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitBooleanLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.BooleanLiteralContext = BooleanLiteralContext;

CqlParser.prototype.booleanLiteral = function() {

    var localctx = new BooleanLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, CqlParser.RULE_booleanLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2082;
        _la = this._input.LA(1);
        if(!(_la===CqlParser.K_FALSE || _la===CqlParser.K_TRUE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HexadecimalLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_hexadecimalLiteral;
    return this;
}

HexadecimalLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HexadecimalLiteralContext.prototype.constructor = HexadecimalLiteralContext;

HexadecimalLiteralContext.prototype.HEXADECIMAL_LITERAL = function() {
    return this.getToken(CqlParser.HEXADECIMAL_LITERAL, 0);
};

HexadecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterHexadecimalLiteral(this);
	}
};

HexadecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitHexadecimalLiteral(this);
	}
};

HexadecimalLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitHexadecimalLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.HexadecimalLiteralContext = HexadecimalLiteralContext;

CqlParser.prototype.hexadecimalLiteral = function() {

    var localctx = new HexadecimalLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, CqlParser.RULE_hexadecimalLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2084;
        this.match(CqlParser.HEXADECIMAL_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeyspaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_keyspace;
    return this;
}

KeyspaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyspaceContext.prototype.constructor = KeyspaceContext;

KeyspaceContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

KeyspaceContext.prototype.DQUOTE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.DQUOTE);
    } else {
        return this.getToken(CqlParser.DQUOTE, i);
    }
};


KeyspaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKeyspace(this);
	}
};

KeyspaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKeyspace(this);
	}
};

KeyspaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKeyspace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KeyspaceContext = KeyspaceContext;

CqlParser.prototype.keyspace = function() {

    var localctx = new KeyspaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, CqlParser.RULE_keyspace);
    try {
        this.state = 2091;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CqlParser.K_ADD:
        case CqlParser.K_ALL:
        case CqlParser.K_ALLOW:
        case CqlParser.K_ALTER:
        case CqlParser.K_AND:
        case CqlParser.K_ANY:
        case CqlParser.K_APPLY:
        case CqlParser.K_AS:
        case CqlParser.K_ASC:
        case CqlParser.K_AUTHORIZE:
        case CqlParser.K_BATCH:
        case CqlParser.K_BEGIN:
        case CqlParser.K_BY:
        case CqlParser.K_CALLED:
        case CqlParser.K_CLUSTERING:
        case CqlParser.K_COLUMNFAMILY:
        case CqlParser.K_COMPACT:
        case CqlParser.K_CONSISTENCY:
        case CqlParser.K_CONTAINS:
        case CqlParser.K_CREATE:
        case CqlParser.K_CUSTOM:
        case CqlParser.K_DELETE:
        case CqlParser.K_DESC:
        case CqlParser.K_DESCRIBE:
        case CqlParser.K_DISTINCT:
        case CqlParser.K_DROP:
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_EACH_QUORUM:
        case CqlParser.K_ENTRIES:
        case CqlParser.K_EXECUTE:
        case CqlParser.K_EXISTS:
        case CqlParser.K_FALSE:
        case CqlParser.K_FILTERING:
        case CqlParser.K_FINALFUNC:
        case CqlParser.K_FROM:
        case CqlParser.K_FULL:
        case CqlParser.K_FUNCTION:
        case CqlParser.K_FUNCTIONS:
        case CqlParser.K_GRANT:
        case CqlParser.K_IF:
        case CqlParser.K_IN:
        case CqlParser.K_INDEX:
        case CqlParser.K_INFINITY:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_INSERT:
        case CqlParser.K_INTO:
        case CqlParser.K_IS:
        case CqlParser.K_JSON:
        case CqlParser.K_KEY:
        case CqlParser.K_KEYS:
        case CqlParser.K_KEYSPACE:
        case CqlParser.K_KEYSPACES:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_LIMIT:
        case CqlParser.K_LOCAL_ONE:
        case CqlParser.K_LOCAL_QUORUM:
        case CqlParser.K_LOGGED:
        case CqlParser.K_LOGIN:
        case CqlParser.K_MATERIALIZED:
        case CqlParser.K_MODIFY:
        case CqlParser.K_NAN:
        case CqlParser.K_NORECURSIVE:
        case CqlParser.K_NOSUPERUSER:
        case CqlParser.K_NOT:
        case CqlParser.K_NULL:
        case CqlParser.K_OF:
        case CqlParser.K_ON:
        case CqlParser.K_ONE:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_OR:
        case CqlParser.K_ORDER:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PASSWORD:
        case CqlParser.K_PER:
        case CqlParser.K_PERMISSION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_PRIMARY:
        case CqlParser.K_QUORUM:
        case CqlParser.K_RENAME:
        case CqlParser.K_REPLACE:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_RETURNS:
        case CqlParser.K_REVOKE:
        case CqlParser.K_ROLE:
        case CqlParser.K_ROLES:
        case CqlParser.K_SCHEMA:
        case CqlParser.K_SELECT:
        case CqlParser.K_SET:
        case CqlParser.K_SFUNC:
        case CqlParser.K_STATIC:
        case CqlParser.K_STORAGE:
        case CqlParser.K_STYPE:
        case CqlParser.K_SUPERUSER:
        case CqlParser.K_TABLE:
        case CqlParser.K_THREE:
        case CqlParser.K_TIMESTAMP:
        case CqlParser.K_TO:
        case CqlParser.K_TOKEN:
        case CqlParser.K_TRIGGER:
        case CqlParser.K_TRUE:
        case CqlParser.K_TRUNCATE:
        case CqlParser.K_TTL:
        case CqlParser.K_TWO:
        case CqlParser.K_TYPE:
        case CqlParser.K_UNLOGGED:
        case CqlParser.K_UPDATE:
        case CqlParser.K_USE:
        case CqlParser.K_USER:
        case CqlParser.K_USING:
        case CqlParser.K_UUID:
        case CqlParser.K_VALUES:
        case CqlParser.K_VIEW:
        case CqlParser.K_WHERE:
        case CqlParser.K_WITH:
        case CqlParser.K_WRITETIME:
        case CqlParser.K_ASCII:
        case CqlParser.K_BIGINT:
        case CqlParser.K_BLOB:
        case CqlParser.K_BOOLEAN:
        case CqlParser.K_COUNTER:
        case CqlParser.K_DATE:
        case CqlParser.K_DECIMAL:
        case CqlParser.K_DOUBLE:
        case CqlParser.K_FLOAT:
        case CqlParser.K_FROZEN:
        case CqlParser.K_INET:
        case CqlParser.K_INT:
        case CqlParser.K_LIST:
        case CqlParser.K_MAP:
        case CqlParser.K_SMALLINT:
        case CqlParser.K_TEXT:
        case CqlParser.K_TIMEUUID:
        case CqlParser.K_TIME:
        case CqlParser.K_TINYINT:
        case CqlParser.K_TUPLE:
        case CqlParser.K_VARCHAR:
        case CqlParser.K_VARINT:
        case CqlParser.OBJECT_NAME:
        case CqlParser.K_USERS:
            this.enterOuterAlt(localctx, 1);
            this.state = 2086;
            this.id();
            break;
        case CqlParser.DQUOTE:
            this.enterOuterAlt(localctx, 2);
            this.state = 2087;
            this.match(CqlParser.DQUOTE);
            this.state = 2088;
            this.id();
            this.state = 2089;
            this.match(CqlParser.DQUOTE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_table;
    return this;
}

TableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableContext.prototype.constructor = TableContext;

TableContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

TableContext.prototype.DQUOTE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.DQUOTE);
    } else {
        return this.getToken(CqlParser.DQUOTE, i);
    }
};


TableContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTable(this);
	}
};

TableContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTable(this);
	}
};

TableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TableContext = TableContext;

CqlParser.prototype.table = function() {

    var localctx = new TableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, CqlParser.RULE_table);
    try {
        this.state = 2098;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CqlParser.K_ADD:
        case CqlParser.K_ALL:
        case CqlParser.K_ALLOW:
        case CqlParser.K_ALTER:
        case CqlParser.K_AND:
        case CqlParser.K_ANY:
        case CqlParser.K_APPLY:
        case CqlParser.K_AS:
        case CqlParser.K_ASC:
        case CqlParser.K_AUTHORIZE:
        case CqlParser.K_BATCH:
        case CqlParser.K_BEGIN:
        case CqlParser.K_BY:
        case CqlParser.K_CALLED:
        case CqlParser.K_CLUSTERING:
        case CqlParser.K_COLUMNFAMILY:
        case CqlParser.K_COMPACT:
        case CqlParser.K_CONSISTENCY:
        case CqlParser.K_CONTAINS:
        case CqlParser.K_CREATE:
        case CqlParser.K_CUSTOM:
        case CqlParser.K_DELETE:
        case CqlParser.K_DESC:
        case CqlParser.K_DESCRIBE:
        case CqlParser.K_DISTINCT:
        case CqlParser.K_DROP:
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_EACH_QUORUM:
        case CqlParser.K_ENTRIES:
        case CqlParser.K_EXECUTE:
        case CqlParser.K_EXISTS:
        case CqlParser.K_FALSE:
        case CqlParser.K_FILTERING:
        case CqlParser.K_FINALFUNC:
        case CqlParser.K_FROM:
        case CqlParser.K_FULL:
        case CqlParser.K_FUNCTION:
        case CqlParser.K_FUNCTIONS:
        case CqlParser.K_GRANT:
        case CqlParser.K_IF:
        case CqlParser.K_IN:
        case CqlParser.K_INDEX:
        case CqlParser.K_INFINITY:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_INSERT:
        case CqlParser.K_INTO:
        case CqlParser.K_IS:
        case CqlParser.K_JSON:
        case CqlParser.K_KEY:
        case CqlParser.K_KEYS:
        case CqlParser.K_KEYSPACE:
        case CqlParser.K_KEYSPACES:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_LIMIT:
        case CqlParser.K_LOCAL_ONE:
        case CqlParser.K_LOCAL_QUORUM:
        case CqlParser.K_LOGGED:
        case CqlParser.K_LOGIN:
        case CqlParser.K_MATERIALIZED:
        case CqlParser.K_MODIFY:
        case CqlParser.K_NAN:
        case CqlParser.K_NORECURSIVE:
        case CqlParser.K_NOSUPERUSER:
        case CqlParser.K_NOT:
        case CqlParser.K_NULL:
        case CqlParser.K_OF:
        case CqlParser.K_ON:
        case CqlParser.K_ONE:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_OR:
        case CqlParser.K_ORDER:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PASSWORD:
        case CqlParser.K_PER:
        case CqlParser.K_PERMISSION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_PRIMARY:
        case CqlParser.K_QUORUM:
        case CqlParser.K_RENAME:
        case CqlParser.K_REPLACE:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_RETURNS:
        case CqlParser.K_REVOKE:
        case CqlParser.K_ROLE:
        case CqlParser.K_ROLES:
        case CqlParser.K_SCHEMA:
        case CqlParser.K_SELECT:
        case CqlParser.K_SET:
        case CqlParser.K_SFUNC:
        case CqlParser.K_STATIC:
        case CqlParser.K_STORAGE:
        case CqlParser.K_STYPE:
        case CqlParser.K_SUPERUSER:
        case CqlParser.K_TABLE:
        case CqlParser.K_THREE:
        case CqlParser.K_TIMESTAMP:
        case CqlParser.K_TO:
        case CqlParser.K_TOKEN:
        case CqlParser.K_TRIGGER:
        case CqlParser.K_TRUE:
        case CqlParser.K_TRUNCATE:
        case CqlParser.K_TTL:
        case CqlParser.K_TWO:
        case CqlParser.K_TYPE:
        case CqlParser.K_UNLOGGED:
        case CqlParser.K_UPDATE:
        case CqlParser.K_USE:
        case CqlParser.K_USER:
        case CqlParser.K_USING:
        case CqlParser.K_UUID:
        case CqlParser.K_VALUES:
        case CqlParser.K_VIEW:
        case CqlParser.K_WHERE:
        case CqlParser.K_WITH:
        case CqlParser.K_WRITETIME:
        case CqlParser.K_ASCII:
        case CqlParser.K_BIGINT:
        case CqlParser.K_BLOB:
        case CqlParser.K_BOOLEAN:
        case CqlParser.K_COUNTER:
        case CqlParser.K_DATE:
        case CqlParser.K_DECIMAL:
        case CqlParser.K_DOUBLE:
        case CqlParser.K_FLOAT:
        case CqlParser.K_FROZEN:
        case CqlParser.K_INET:
        case CqlParser.K_INT:
        case CqlParser.K_LIST:
        case CqlParser.K_MAP:
        case CqlParser.K_SMALLINT:
        case CqlParser.K_TEXT:
        case CqlParser.K_TIMEUUID:
        case CqlParser.K_TIME:
        case CqlParser.K_TINYINT:
        case CqlParser.K_TUPLE:
        case CqlParser.K_VARCHAR:
        case CqlParser.K_VARINT:
        case CqlParser.OBJECT_NAME:
        case CqlParser.K_USERS:
            this.enterOuterAlt(localctx, 1);
            this.state = 2093;
            this.id();
            break;
        case CqlParser.DQUOTE:
            this.enterOuterAlt(localctx, 2);
            this.state = 2094;
            this.match(CqlParser.DQUOTE);
            this.state = 2095;
            this.id();
            this.state = 2096;
            this.match(CqlParser.DQUOTE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_column;
    return this;
}

ColumnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnContext.prototype.constructor = ColumnContext;

ColumnContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

ColumnContext.prototype.DQUOTE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.DQUOTE);
    } else {
        return this.getToken(CqlParser.DQUOTE, i);
    }
};


ColumnContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterColumn(this);
	}
};

ColumnContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitColumn(this);
	}
};

ColumnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitColumn(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ColumnContext = ColumnContext;

CqlParser.prototype.column = function() {

    var localctx = new ColumnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, CqlParser.RULE_column);
    try {
        this.state = 2105;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CqlParser.K_ADD:
        case CqlParser.K_ALL:
        case CqlParser.K_ALLOW:
        case CqlParser.K_ALTER:
        case CqlParser.K_AND:
        case CqlParser.K_ANY:
        case CqlParser.K_APPLY:
        case CqlParser.K_AS:
        case CqlParser.K_ASC:
        case CqlParser.K_AUTHORIZE:
        case CqlParser.K_BATCH:
        case CqlParser.K_BEGIN:
        case CqlParser.K_BY:
        case CqlParser.K_CALLED:
        case CqlParser.K_CLUSTERING:
        case CqlParser.K_COLUMNFAMILY:
        case CqlParser.K_COMPACT:
        case CqlParser.K_CONSISTENCY:
        case CqlParser.K_CONTAINS:
        case CqlParser.K_CREATE:
        case CqlParser.K_CUSTOM:
        case CqlParser.K_DELETE:
        case CqlParser.K_DESC:
        case CqlParser.K_DESCRIBE:
        case CqlParser.K_DISTINCT:
        case CqlParser.K_DROP:
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_EACH_QUORUM:
        case CqlParser.K_ENTRIES:
        case CqlParser.K_EXECUTE:
        case CqlParser.K_EXISTS:
        case CqlParser.K_FALSE:
        case CqlParser.K_FILTERING:
        case CqlParser.K_FINALFUNC:
        case CqlParser.K_FROM:
        case CqlParser.K_FULL:
        case CqlParser.K_FUNCTION:
        case CqlParser.K_FUNCTIONS:
        case CqlParser.K_GRANT:
        case CqlParser.K_IF:
        case CqlParser.K_IN:
        case CqlParser.K_INDEX:
        case CqlParser.K_INFINITY:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_INSERT:
        case CqlParser.K_INTO:
        case CqlParser.K_IS:
        case CqlParser.K_JSON:
        case CqlParser.K_KEY:
        case CqlParser.K_KEYS:
        case CqlParser.K_KEYSPACE:
        case CqlParser.K_KEYSPACES:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_LIMIT:
        case CqlParser.K_LOCAL_ONE:
        case CqlParser.K_LOCAL_QUORUM:
        case CqlParser.K_LOGGED:
        case CqlParser.K_LOGIN:
        case CqlParser.K_MATERIALIZED:
        case CqlParser.K_MODIFY:
        case CqlParser.K_NAN:
        case CqlParser.K_NORECURSIVE:
        case CqlParser.K_NOSUPERUSER:
        case CqlParser.K_NOT:
        case CqlParser.K_NULL:
        case CqlParser.K_OF:
        case CqlParser.K_ON:
        case CqlParser.K_ONE:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_OR:
        case CqlParser.K_ORDER:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PASSWORD:
        case CqlParser.K_PER:
        case CqlParser.K_PERMISSION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_PRIMARY:
        case CqlParser.K_QUORUM:
        case CqlParser.K_RENAME:
        case CqlParser.K_REPLACE:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_RETURNS:
        case CqlParser.K_REVOKE:
        case CqlParser.K_ROLE:
        case CqlParser.K_ROLES:
        case CqlParser.K_SCHEMA:
        case CqlParser.K_SELECT:
        case CqlParser.K_SET:
        case CqlParser.K_SFUNC:
        case CqlParser.K_STATIC:
        case CqlParser.K_STORAGE:
        case CqlParser.K_STYPE:
        case CqlParser.K_SUPERUSER:
        case CqlParser.K_TABLE:
        case CqlParser.K_THREE:
        case CqlParser.K_TIMESTAMP:
        case CqlParser.K_TO:
        case CqlParser.K_TOKEN:
        case CqlParser.K_TRIGGER:
        case CqlParser.K_TRUE:
        case CqlParser.K_TRUNCATE:
        case CqlParser.K_TTL:
        case CqlParser.K_TWO:
        case CqlParser.K_TYPE:
        case CqlParser.K_UNLOGGED:
        case CqlParser.K_UPDATE:
        case CqlParser.K_USE:
        case CqlParser.K_USER:
        case CqlParser.K_USING:
        case CqlParser.K_UUID:
        case CqlParser.K_VALUES:
        case CqlParser.K_VIEW:
        case CqlParser.K_WHERE:
        case CqlParser.K_WITH:
        case CqlParser.K_WRITETIME:
        case CqlParser.K_ASCII:
        case CqlParser.K_BIGINT:
        case CqlParser.K_BLOB:
        case CqlParser.K_BOOLEAN:
        case CqlParser.K_COUNTER:
        case CqlParser.K_DATE:
        case CqlParser.K_DECIMAL:
        case CqlParser.K_DOUBLE:
        case CqlParser.K_FLOAT:
        case CqlParser.K_FROZEN:
        case CqlParser.K_INET:
        case CqlParser.K_INT:
        case CqlParser.K_LIST:
        case CqlParser.K_MAP:
        case CqlParser.K_SMALLINT:
        case CqlParser.K_TEXT:
        case CqlParser.K_TIMEUUID:
        case CqlParser.K_TIME:
        case CqlParser.K_TINYINT:
        case CqlParser.K_TUPLE:
        case CqlParser.K_VARCHAR:
        case CqlParser.K_VARINT:
        case CqlParser.OBJECT_NAME:
        case CqlParser.K_USERS:
            this.enterOuterAlt(localctx, 1);
            this.state = 2100;
            this.id();
            break;
        case CqlParser.DQUOTE:
            this.enterOuterAlt(localctx, 2);
            this.state = 2101;
            this.match(CqlParser.DQUOTE);
            this.state = 2102;
            this.id();
            this.state = 2103;
            this.match(CqlParser.DQUOTE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DataTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataType;
    return this;
}

DataTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeContext.prototype.constructor = DataTypeContext;

DataTypeContext.prototype.dataTypeName = function() {
    return this.getTypedRuleContext(DataTypeNameContext,0);
};

DataTypeContext.prototype.dataTypeDefinition = function() {
    return this.getTypedRuleContext(DataTypeDefinitionContext,0);
};

DataTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataType(this);
	}
};

DataTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataType(this);
	}
};

DataTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeContext = DataTypeContext;

CqlParser.prototype.dataType = function() {

    var localctx = new DataTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, CqlParser.RULE_dataType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2107;
        this.dataTypeName();
        this.state = 2109;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CqlParser.OPERATOR_LT) {
            this.state = 2108;
            this.dataTypeDefinition();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DataTypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeName;
    return this;
}

DataTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeNameContext.prototype.constructor = DataTypeNameContext;

DataTypeNameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

DataTypeNameContext.prototype.STRING_LITERAL = function() {
    return this.getToken(CqlParser.STRING_LITERAL, 0);
};

DataTypeNameContext.prototype.K_TIMESTAMP = function() {
    return this.getToken(CqlParser.K_TIMESTAMP, 0);
};

DataTypeNameContext.prototype.K_SET = function() {
    return this.getToken(CqlParser.K_SET, 0);
};

DataTypeNameContext.prototype.K_ASCII = function() {
    return this.getToken(CqlParser.K_ASCII, 0);
};

DataTypeNameContext.prototype.K_BIGINT = function() {
    return this.getToken(CqlParser.K_BIGINT, 0);
};

DataTypeNameContext.prototype.K_BLOB = function() {
    return this.getToken(CqlParser.K_BLOB, 0);
};

DataTypeNameContext.prototype.K_BOOLEAN = function() {
    return this.getToken(CqlParser.K_BOOLEAN, 0);
};

DataTypeNameContext.prototype.K_COUNTER = function() {
    return this.getToken(CqlParser.K_COUNTER, 0);
};

DataTypeNameContext.prototype.K_DATE = function() {
    return this.getToken(CqlParser.K_DATE, 0);
};

DataTypeNameContext.prototype.K_DECIMAL = function() {
    return this.getToken(CqlParser.K_DECIMAL, 0);
};

DataTypeNameContext.prototype.K_DOUBLE = function() {
    return this.getToken(CqlParser.K_DOUBLE, 0);
};

DataTypeNameContext.prototype.K_FLOAT = function() {
    return this.getToken(CqlParser.K_FLOAT, 0);
};

DataTypeNameContext.prototype.K_FROZEN = function() {
    return this.getToken(CqlParser.K_FROZEN, 0);
};

DataTypeNameContext.prototype.K_INET = function() {
    return this.getToken(CqlParser.K_INET, 0);
};

DataTypeNameContext.prototype.K_INT = function() {
    return this.getToken(CqlParser.K_INT, 0);
};

DataTypeNameContext.prototype.K_LIST = function() {
    return this.getToken(CqlParser.K_LIST, 0);
};

DataTypeNameContext.prototype.K_MAP = function() {
    return this.getToken(CqlParser.K_MAP, 0);
};

DataTypeNameContext.prototype.K_SMALLINT = function() {
    return this.getToken(CqlParser.K_SMALLINT, 0);
};

DataTypeNameContext.prototype.K_TEXT = function() {
    return this.getToken(CqlParser.K_TEXT, 0);
};

DataTypeNameContext.prototype.K_TIME = function() {
    return this.getToken(CqlParser.K_TIME, 0);
};

DataTypeNameContext.prototype.K_TIMEUUID = function() {
    return this.getToken(CqlParser.K_TIMEUUID, 0);
};

DataTypeNameContext.prototype.K_TINYINT = function() {
    return this.getToken(CqlParser.K_TINYINT, 0);
};

DataTypeNameContext.prototype.K_TUPLE = function() {
    return this.getToken(CqlParser.K_TUPLE, 0);
};

DataTypeNameContext.prototype.K_VARCHAR = function() {
    return this.getToken(CqlParser.K_VARCHAR, 0);
};

DataTypeNameContext.prototype.K_VARINT = function() {
    return this.getToken(CqlParser.K_VARINT, 0);
};

DataTypeNameContext.prototype.K_UUID = function() {
    return this.getToken(CqlParser.K_UUID, 0);
};

DataTypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeName(this);
	}
};

DataTypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeName(this);
	}
};

DataTypeNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeNameContext = DataTypeNameContext;

CqlParser.prototype.dataTypeName = function() {

    var localctx = new DataTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, CqlParser.RULE_dataTypeName);
    try {
        this.state = 2139;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2111;
            this.id();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2112;
            this.match(CqlParser.STRING_LITERAL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2113;
            this.match(CqlParser.K_TIMESTAMP);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2114;
            this.match(CqlParser.K_SET);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2115;
            this.match(CqlParser.K_ASCII);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2116;
            this.match(CqlParser.K_BIGINT);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2117;
            this.match(CqlParser.K_BLOB);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2118;
            this.match(CqlParser.K_BOOLEAN);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2119;
            this.match(CqlParser.K_COUNTER);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2120;
            this.match(CqlParser.K_DATE);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2121;
            this.match(CqlParser.K_DECIMAL);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 2122;
            this.match(CqlParser.K_DOUBLE);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 2123;
            this.match(CqlParser.K_FLOAT);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 2124;
            this.match(CqlParser.K_FROZEN);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 2125;
            this.match(CqlParser.K_INET);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 2126;
            this.match(CqlParser.K_INT);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 2127;
            this.match(CqlParser.K_LIST);
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 2128;
            this.match(CqlParser.K_MAP);
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 2129;
            this.match(CqlParser.K_SMALLINT);
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 2130;
            this.match(CqlParser.K_TEXT);
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 2131;
            this.match(CqlParser.K_TIME);
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 2132;
            this.match(CqlParser.K_TIMEUUID);
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 2133;
            this.match(CqlParser.K_TINYINT);
            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 2134;
            this.match(CqlParser.K_TUPLE);
            break;

        case 25:
            this.enterOuterAlt(localctx, 25);
            this.state = 2135;
            this.match(CqlParser.K_VARCHAR);
            break;

        case 26:
            this.enterOuterAlt(localctx, 26);
            this.state = 2136;
            this.match(CqlParser.K_VARINT);
            break;

        case 27:
            this.enterOuterAlt(localctx, 27);
            this.state = 2137;
            this.match(CqlParser.K_TIMESTAMP);
            break;

        case 28:
            this.enterOuterAlt(localctx, 28);
            this.state = 2138;
            this.match(CqlParser.K_UUID);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DataTypeDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeDefinition;
    return this;
}

DataTypeDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeDefinitionContext.prototype.constructor = DataTypeDefinitionContext;

DataTypeDefinitionContext.prototype.syntaxBracketLa = function() {
    return this.getTypedRuleContext(SyntaxBracketLaContext,0);
};

DataTypeDefinitionContext.prototype.dataType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DataTypeContext);
    } else {
        return this.getTypedRuleContext(DataTypeContext,i);
    }
};

DataTypeDefinitionContext.prototype.syntaxBracketRa = function() {
    return this.getTypedRuleContext(SyntaxBracketRaContext,0);
};

DataTypeDefinitionContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

DataTypeDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeDefinition(this);
	}
};

DataTypeDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeDefinition(this);
	}
};

DataTypeDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeDefinitionContext = DataTypeDefinitionContext;

CqlParser.prototype.dataTypeDefinition = function() {

    var localctx = new DataTypeDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, CqlParser.RULE_dataTypeDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2141;
        this.syntaxBracketLa();
        this.state = 2142;
        this.dataType();
        this.state = 2148;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 2143;
            this.syntaxComma();
            this.state = 2144;
            this.dataType();
            this.state = 2150;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2151;
        this.syntaxBracketRa();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrderDirectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_orderDirection;
    return this;
}

OrderDirectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderDirectionContext.prototype.constructor = OrderDirectionContext;

OrderDirectionContext.prototype.kwAsc = function() {
    return this.getTypedRuleContext(KwAscContext,0);
};

OrderDirectionContext.prototype.kwDesc = function() {
    return this.getTypedRuleContext(KwDescContext,0);
};

OrderDirectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterOrderDirection(this);
	}
};

OrderDirectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitOrderDirection(this);
	}
};

OrderDirectionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitOrderDirection(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.OrderDirectionContext = OrderDirectionContext;

CqlParser.prototype.orderDirection = function() {

    var localctx = new OrderDirectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, CqlParser.RULE_orderDirection);
    try {
        this.state = 2155;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CqlParser.K_ASC:
            this.enterOuterAlt(localctx, 1);
            this.state = 2153;
            this.kwAsc();
            break;
        case CqlParser.K_DESC:
            this.enterOuterAlt(localctx, 2);
            this.state = 2154;
            this.kwDesc();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RoleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_role;
    return this;
}

RoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoleContext.prototype.constructor = RoleContext;

RoleContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

RoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterRole(this);
	}
};

RoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitRole(this);
	}
};

RoleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitRole(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.RoleContext = RoleContext;

CqlParser.prototype.role = function() {

    var localctx = new RoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, CqlParser.RULE_role);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2157;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TriggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_trigger;
    return this;
}

TriggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerContext.prototype.constructor = TriggerContext;

TriggerContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

TriggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTrigger(this);
	}
};

TriggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTrigger(this);
	}
};

TriggerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTrigger(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TriggerContext = TriggerContext;

CqlParser.prototype.trigger = function() {

    var localctx = new TriggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, CqlParser.RULE_trigger);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2159;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TriggerClassContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_triggerClass;
    return this;
}

TriggerClassContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerClassContext.prototype.constructor = TriggerClassContext;

TriggerClassContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

TriggerClassContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTriggerClass(this);
	}
};

TriggerClassContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTriggerClass(this);
	}
};

TriggerClassContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTriggerClass(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TriggerClassContext = TriggerClassContext;

CqlParser.prototype.triggerClass = function() {

    var localctx = new TriggerClassContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, CqlParser.RULE_triggerClass);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2161;
        this.stringLiteral();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MaterializedViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_materializedView;
    return this;
}

MaterializedViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MaterializedViewContext.prototype.constructor = MaterializedViewContext;

MaterializedViewContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

MaterializedViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterMaterializedView(this);
	}
};

MaterializedViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitMaterializedView(this);
	}
};

MaterializedViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitMaterializedView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.MaterializedViewContext = MaterializedViewContext;

CqlParser.prototype.materializedView = function() {

    var localctx = new MaterializedViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, CqlParser.RULE_materializedView);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2163;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitType(this);
	}
};

TypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TypeContext = TypeContext;

CqlParser.prototype.type = function() {

    var localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, CqlParser.RULE_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2165;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AggregateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_aggregate;
    return this;
}

AggregateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggregateContext.prototype.constructor = AggregateContext;

AggregateContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

AggregateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAggregate(this);
	}
};

AggregateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAggregate(this);
	}
};

AggregateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAggregate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AggregateContext = AggregateContext;

CqlParser.prototype.aggregate = function() {

    var localctx = new AggregateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, CqlParser.RULE_aggregate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2167;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_functionStatement;
    return this;
}

FunctionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionStatementContext.prototype.constructor = FunctionStatementContext;

FunctionStatementContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

FunctionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterFunctionStatement(this);
	}
};

FunctionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitFunctionStatement(this);
	}
};

FunctionStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitFunctionStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.FunctionStatementContext = FunctionStatementContext;

CqlParser.prototype.functionStatement = function() {

    var localctx = new FunctionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, CqlParser.RULE_functionStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2169;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LanguageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_language;
    return this;
}

LanguageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LanguageContext.prototype.constructor = LanguageContext;

LanguageContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

LanguageContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterLanguage(this);
	}
};

LanguageContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitLanguage(this);
	}
};

LanguageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitLanguage(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.LanguageContext = LanguageContext;

CqlParser.prototype.language = function() {

    var localctx = new LanguageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, CqlParser.RULE_language);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2171;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_user;
    return this;
}

UserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserContext.prototype.constructor = UserContext;

UserContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

UserContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterUser(this);
	}
};

UserContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitUser(this);
	}
};

UserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitUser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.UserContext = UserContext;

CqlParser.prototype.user = function() {

    var localctx = new UserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, CqlParser.RULE_user);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2173;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PasswordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_password;
    return this;
}

PasswordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PasswordContext.prototype.constructor = PasswordContext;

PasswordContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

PasswordContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterPassword(this);
	}
};

PasswordContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitPassword(this);
	}
};

PasswordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitPassword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.PasswordContext = PasswordContext;

CqlParser.prototype.password = function() {

    var localctx = new PasswordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, CqlParser.RULE_password);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2175;
        this.stringLiteral();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HashKeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_hashKey;
    return this;
}

HashKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HashKeyContext.prototype.constructor = HashKeyContext;

HashKeyContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

HashKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterHashKey(this);
	}
};

HashKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitHashKey(this);
	}
};

HashKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitHashKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.HashKeyContext = HashKeyContext;

CqlParser.prototype.hashKey = function() {

    var localctx = new HashKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, CqlParser.RULE_hashKey);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2177;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParamContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_param;
    return this;
}

ParamContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamContext.prototype.constructor = ParamContext;

ParamContext.prototype.paramName = function() {
    return this.getTypedRuleContext(ParamNameContext,0);
};

ParamContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

ParamContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterParam(this);
	}
};

ParamContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitParam(this);
	}
};

ParamContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitParam(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ParamContext = ParamContext;

CqlParser.prototype.param = function() {

    var localctx = new ParamContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, CqlParser.RULE_param);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2179;
        this.paramName();
        this.state = 2180;
        this.dataType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParamNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_paramName;
    return this;
}

ParamNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamNameContext.prototype.constructor = ParamNameContext;

ParamNameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

ParamNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterParamName(this);
	}
};

ParamNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitParamName(this);
	}
};

ParamNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitParamName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ParamNameContext = ParamNameContext;

CqlParser.prototype.paramName = function() {

    var localctx = new ParamNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, CqlParser.RULE_paramName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2182;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwAddContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAdd;
    return this;
}

KwAddContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAddContext.prototype.constructor = KwAddContext;

KwAddContext.prototype.K_ADD = function() {
    return this.getToken(CqlParser.K_ADD, 0);
};

KwAddContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAdd(this);
	}
};

KwAddContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAdd(this);
	}
};

KwAddContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAdd(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAddContext = KwAddContext;

CqlParser.prototype.kwAdd = function() {

    var localctx = new KwAddContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, CqlParser.RULE_kwAdd);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2184;
        this.match(CqlParser.K_ADD);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwAggregateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAggregate;
    return this;
}

KwAggregateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAggregateContext.prototype.constructor = KwAggregateContext;

KwAggregateContext.prototype.K_AGGREGATE = function() {
    return this.getToken(CqlParser.K_AGGREGATE, 0);
};

KwAggregateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAggregate(this);
	}
};

KwAggregateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAggregate(this);
	}
};

KwAggregateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAggregate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAggregateContext = KwAggregateContext;

CqlParser.prototype.kwAggregate = function() {

    var localctx = new KwAggregateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, CqlParser.RULE_kwAggregate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2186;
        this.match(CqlParser.K_AGGREGATE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwAllContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAll;
    return this;
}

KwAllContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAllContext.prototype.constructor = KwAllContext;

KwAllContext.prototype.K_ALL = function() {
    return this.getToken(CqlParser.K_ALL, 0);
};

KwAllContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAll(this);
	}
};

KwAllContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAll(this);
	}
};

KwAllContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAll(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAllContext = KwAllContext;

CqlParser.prototype.kwAll = function() {

    var localctx = new KwAllContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, CqlParser.RULE_kwAll);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2188;
        this.match(CqlParser.K_ALL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwAllPermissionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAllPermissions;
    return this;
}

KwAllPermissionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAllPermissionsContext.prototype.constructor = KwAllPermissionsContext;

KwAllPermissionsContext.prototype.K_ALL = function() {
    return this.getToken(CqlParser.K_ALL, 0);
};

KwAllPermissionsContext.prototype.K_PERMISSIONS = function() {
    return this.getToken(CqlParser.K_PERMISSIONS, 0);
};

KwAllPermissionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAllPermissions(this);
	}
};

KwAllPermissionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAllPermissions(this);
	}
};

KwAllPermissionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAllPermissions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAllPermissionsContext = KwAllPermissionsContext;

CqlParser.prototype.kwAllPermissions = function() {

    var localctx = new KwAllPermissionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, CqlParser.RULE_kwAllPermissions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2190;
        this.match(CqlParser.K_ALL);
        this.state = 2191;
        this.match(CqlParser.K_PERMISSIONS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwAllowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAllow;
    return this;
}

KwAllowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAllowContext.prototype.constructor = KwAllowContext;

KwAllowContext.prototype.K_ALLOW = function() {
    return this.getToken(CqlParser.K_ALLOW, 0);
};

KwAllowContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAllow(this);
	}
};

KwAllowContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAllow(this);
	}
};

KwAllowContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAllow(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAllowContext = KwAllowContext;

CqlParser.prototype.kwAllow = function() {

    var localctx = new KwAllowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, CqlParser.RULE_kwAllow);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2193;
        this.match(CqlParser.K_ALLOW);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwAlterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAlter;
    return this;
}

KwAlterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAlterContext.prototype.constructor = KwAlterContext;

KwAlterContext.prototype.K_ALTER = function() {
    return this.getToken(CqlParser.K_ALTER, 0);
};

KwAlterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAlter(this);
	}
};

KwAlterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAlter(this);
	}
};

KwAlterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAlter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAlterContext = KwAlterContext;

CqlParser.prototype.kwAlter = function() {

    var localctx = new KwAlterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, CqlParser.RULE_kwAlter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2195;
        this.match(CqlParser.K_ALTER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwAndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAnd;
    return this;
}

KwAndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAndContext.prototype.constructor = KwAndContext;

KwAndContext.prototype.K_AND = function() {
    return this.getToken(CqlParser.K_AND, 0);
};

KwAndContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAnd(this);
	}
};

KwAndContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAnd(this);
	}
};

KwAndContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAnd(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAndContext = KwAndContext;

CqlParser.prototype.kwAnd = function() {

    var localctx = new KwAndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, CqlParser.RULE_kwAnd);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2197;
        this.match(CqlParser.K_AND);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwApplyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwApply;
    return this;
}

KwApplyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwApplyContext.prototype.constructor = KwApplyContext;

KwApplyContext.prototype.K_APPLY = function() {
    return this.getToken(CqlParser.K_APPLY, 0);
};

KwApplyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwApply(this);
	}
};

KwApplyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwApply(this);
	}
};

KwApplyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwApply(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwApplyContext = KwApplyContext;

CqlParser.prototype.kwApply = function() {

    var localctx = new KwApplyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, CqlParser.RULE_kwApply);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2199;
        this.match(CqlParser.K_APPLY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwAsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAs;
    return this;
}

KwAsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAsContext.prototype.constructor = KwAsContext;

KwAsContext.prototype.K_AS = function() {
    return this.getToken(CqlParser.K_AS, 0);
};

KwAsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAs(this);
	}
};

KwAsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAs(this);
	}
};

KwAsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAsContext = KwAsContext;

CqlParser.prototype.kwAs = function() {

    var localctx = new KwAsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, CqlParser.RULE_kwAs);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2201;
        this.match(CqlParser.K_AS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwAscContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAsc;
    return this;
}

KwAscContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAscContext.prototype.constructor = KwAscContext;

KwAscContext.prototype.K_ASC = function() {
    return this.getToken(CqlParser.K_ASC, 0);
};

KwAscContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAsc(this);
	}
};

KwAscContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAsc(this);
	}
};

KwAscContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAsc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAscContext = KwAscContext;

CqlParser.prototype.kwAsc = function() {

    var localctx = new KwAscContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, CqlParser.RULE_kwAsc);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2203;
        this.match(CqlParser.K_ASC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwAuthorizeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAuthorize;
    return this;
}

KwAuthorizeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAuthorizeContext.prototype.constructor = KwAuthorizeContext;

KwAuthorizeContext.prototype.K_AUTHORIZE = function() {
    return this.getToken(CqlParser.K_AUTHORIZE, 0);
};

KwAuthorizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAuthorize(this);
	}
};

KwAuthorizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAuthorize(this);
	}
};

KwAuthorizeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAuthorize(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAuthorizeContext = KwAuthorizeContext;

CqlParser.prototype.kwAuthorize = function() {

    var localctx = new KwAuthorizeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, CqlParser.RULE_kwAuthorize);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2205;
        this.match(CqlParser.K_AUTHORIZE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwBatchContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwBatch;
    return this;
}

KwBatchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwBatchContext.prototype.constructor = KwBatchContext;

KwBatchContext.prototype.K_BATCH = function() {
    return this.getToken(CqlParser.K_BATCH, 0);
};

KwBatchContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwBatch(this);
	}
};

KwBatchContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwBatch(this);
	}
};

KwBatchContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwBatch(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwBatchContext = KwBatchContext;

CqlParser.prototype.kwBatch = function() {

    var localctx = new KwBatchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, CqlParser.RULE_kwBatch);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2207;
        this.match(CqlParser.K_BATCH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwBeginContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwBegin;
    return this;
}

KwBeginContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwBeginContext.prototype.constructor = KwBeginContext;

KwBeginContext.prototype.K_BEGIN = function() {
    return this.getToken(CqlParser.K_BEGIN, 0);
};

KwBeginContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwBegin(this);
	}
};

KwBeginContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwBegin(this);
	}
};

KwBeginContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwBegin(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwBeginContext = KwBeginContext;

CqlParser.prototype.kwBegin = function() {

    var localctx = new KwBeginContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, CqlParser.RULE_kwBegin);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2209;
        this.match(CqlParser.K_BEGIN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwByContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwBy;
    return this;
}

KwByContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwByContext.prototype.constructor = KwByContext;

KwByContext.prototype.K_BY = function() {
    return this.getToken(CqlParser.K_BY, 0);
};

KwByContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwBy(this);
	}
};

KwByContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwBy(this);
	}
};

KwByContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwBy(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwByContext = KwByContext;

CqlParser.prototype.kwBy = function() {

    var localctx = new KwByContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, CqlParser.RULE_kwBy);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2211;
        this.match(CqlParser.K_BY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwCalledContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwCalled;
    return this;
}

KwCalledContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwCalledContext.prototype.constructor = KwCalledContext;

KwCalledContext.prototype.K_CALLED = function() {
    return this.getToken(CqlParser.K_CALLED, 0);
};

KwCalledContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwCalled(this);
	}
};

KwCalledContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwCalled(this);
	}
};

KwCalledContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwCalled(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwCalledContext = KwCalledContext;

CqlParser.prototype.kwCalled = function() {

    var localctx = new KwCalledContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, CqlParser.RULE_kwCalled);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2213;
        this.match(CqlParser.K_CALLED);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwClusteringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwClustering;
    return this;
}

KwClusteringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwClusteringContext.prototype.constructor = KwClusteringContext;

KwClusteringContext.prototype.K_CLUSTERING = function() {
    return this.getToken(CqlParser.K_CLUSTERING, 0);
};

KwClusteringContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwClustering(this);
	}
};

KwClusteringContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwClustering(this);
	}
};

KwClusteringContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwClustering(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwClusteringContext = KwClusteringContext;

CqlParser.prototype.kwClustering = function() {

    var localctx = new KwClusteringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, CqlParser.RULE_kwClustering);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2215;
        this.match(CqlParser.K_CLUSTERING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwCompactContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwCompact;
    return this;
}

KwCompactContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwCompactContext.prototype.constructor = KwCompactContext;

KwCompactContext.prototype.K_COMPACT = function() {
    return this.getToken(CqlParser.K_COMPACT, 0);
};

KwCompactContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwCompact(this);
	}
};

KwCompactContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwCompact(this);
	}
};

KwCompactContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwCompact(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwCompactContext = KwCompactContext;

CqlParser.prototype.kwCompact = function() {

    var localctx = new KwCompactContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, CqlParser.RULE_kwCompact);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2217;
        this.match(CqlParser.K_COMPACT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwContainsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwContains;
    return this;
}

KwContainsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwContainsContext.prototype.constructor = KwContainsContext;

KwContainsContext.prototype.K_CONTAINS = function() {
    return this.getToken(CqlParser.K_CONTAINS, 0);
};

KwContainsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwContains(this);
	}
};

KwContainsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwContains(this);
	}
};

KwContainsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwContains(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwContainsContext = KwContainsContext;

CqlParser.prototype.kwContains = function() {

    var localctx = new KwContainsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, CqlParser.RULE_kwContains);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2219;
        this.match(CqlParser.K_CONTAINS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwCreateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwCreate;
    return this;
}

KwCreateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwCreateContext.prototype.constructor = KwCreateContext;

KwCreateContext.prototype.K_CREATE = function() {
    return this.getToken(CqlParser.K_CREATE, 0);
};

KwCreateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwCreate(this);
	}
};

KwCreateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwCreate(this);
	}
};

KwCreateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwCreate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwCreateContext = KwCreateContext;

CqlParser.prototype.kwCreate = function() {

    var localctx = new KwCreateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, CqlParser.RULE_kwCreate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2221;
        this.match(CqlParser.K_CREATE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwDeleteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDelete;
    return this;
}

KwDeleteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwDeleteContext.prototype.constructor = KwDeleteContext;

KwDeleteContext.prototype.K_DELETE = function() {
    return this.getToken(CqlParser.K_DELETE, 0);
};

KwDeleteContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwDelete(this);
	}
};

KwDeleteContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwDelete(this);
	}
};

KwDeleteContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwDelete(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwDeleteContext = KwDeleteContext;

CqlParser.prototype.kwDelete = function() {

    var localctx = new KwDeleteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, CqlParser.RULE_kwDelete);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2223;
        this.match(CqlParser.K_DELETE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwDescContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDesc;
    return this;
}

KwDescContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwDescContext.prototype.constructor = KwDescContext;

KwDescContext.prototype.K_DESC = function() {
    return this.getToken(CqlParser.K_DESC, 0);
};

KwDescContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwDesc(this);
	}
};

KwDescContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwDesc(this);
	}
};

KwDescContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwDesc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwDescContext = KwDescContext;

CqlParser.prototype.kwDesc = function() {

    var localctx = new KwDescContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, CqlParser.RULE_kwDesc);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2225;
        this.match(CqlParser.K_DESC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwDescibeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDescibe;
    return this;
}

KwDescibeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwDescibeContext.prototype.constructor = KwDescibeContext;

KwDescibeContext.prototype.K_DESCRIBE = function() {
    return this.getToken(CqlParser.K_DESCRIBE, 0);
};

KwDescibeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwDescibe(this);
	}
};

KwDescibeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwDescibe(this);
	}
};

KwDescibeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwDescibe(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwDescibeContext = KwDescibeContext;

CqlParser.prototype.kwDescibe = function() {

    var localctx = new KwDescibeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, CqlParser.RULE_kwDescibe);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2227;
        this.match(CqlParser.K_DESCRIBE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwDistinctContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDistinct;
    return this;
}

KwDistinctContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwDistinctContext.prototype.constructor = KwDistinctContext;

KwDistinctContext.prototype.K_DISTINCT = function() {
    return this.getToken(CqlParser.K_DISTINCT, 0);
};

KwDistinctContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwDistinct(this);
	}
};

KwDistinctContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwDistinct(this);
	}
};

KwDistinctContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwDistinct(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwDistinctContext = KwDistinctContext;

CqlParser.prototype.kwDistinct = function() {

    var localctx = new KwDistinctContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, CqlParser.RULE_kwDistinct);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2229;
        this.match(CqlParser.K_DISTINCT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwDropContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDrop;
    return this;
}

KwDropContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwDropContext.prototype.constructor = KwDropContext;

KwDropContext.prototype.K_DROP = function() {
    return this.getToken(CqlParser.K_DROP, 0);
};

KwDropContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwDrop(this);
	}
};

KwDropContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwDrop(this);
	}
};

KwDropContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwDrop(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwDropContext = KwDropContext;

CqlParser.prototype.kwDrop = function() {

    var localctx = new KwDropContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, CqlParser.RULE_kwDrop);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2231;
        this.match(CqlParser.K_DROP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwDurableWritesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDurableWrites;
    return this;
}

KwDurableWritesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwDurableWritesContext.prototype.constructor = KwDurableWritesContext;

KwDurableWritesContext.prototype.K_DURABLE_WRITES = function() {
    return this.getToken(CqlParser.K_DURABLE_WRITES, 0);
};

KwDurableWritesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwDurableWrites(this);
	}
};

KwDurableWritesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwDurableWrites(this);
	}
};

KwDurableWritesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwDurableWrites(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwDurableWritesContext = KwDurableWritesContext;

CqlParser.prototype.kwDurableWrites = function() {

    var localctx = new KwDurableWritesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, CqlParser.RULE_kwDurableWrites);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2233;
        this.match(CqlParser.K_DURABLE_WRITES);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwEntriesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwEntries;
    return this;
}

KwEntriesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwEntriesContext.prototype.constructor = KwEntriesContext;

KwEntriesContext.prototype.K_ENTRIES = function() {
    return this.getToken(CqlParser.K_ENTRIES, 0);
};

KwEntriesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwEntries(this);
	}
};

KwEntriesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwEntries(this);
	}
};

KwEntriesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwEntries(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwEntriesContext = KwEntriesContext;

CqlParser.prototype.kwEntries = function() {

    var localctx = new KwEntriesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, CqlParser.RULE_kwEntries);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2235;
        this.match(CqlParser.K_ENTRIES);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwExecuteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwExecute;
    return this;
}

KwExecuteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwExecuteContext.prototype.constructor = KwExecuteContext;

KwExecuteContext.prototype.K_EXECUTE = function() {
    return this.getToken(CqlParser.K_EXECUTE, 0);
};

KwExecuteContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwExecute(this);
	}
};

KwExecuteContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwExecute(this);
	}
};

KwExecuteContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwExecute(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwExecuteContext = KwExecuteContext;

CqlParser.prototype.kwExecute = function() {

    var localctx = new KwExecuteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, CqlParser.RULE_kwExecute);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2237;
        this.match(CqlParser.K_EXECUTE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwExistsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwExists;
    return this;
}

KwExistsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwExistsContext.prototype.constructor = KwExistsContext;

KwExistsContext.prototype.K_EXISTS = function() {
    return this.getToken(CqlParser.K_EXISTS, 0);
};

KwExistsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwExists(this);
	}
};

KwExistsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwExists(this);
	}
};

KwExistsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwExists(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwExistsContext = KwExistsContext;

CqlParser.prototype.kwExists = function() {

    var localctx = new KwExistsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, CqlParser.RULE_kwExists);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2239;
        this.match(CqlParser.K_EXISTS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwFilteringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwFiltering;
    return this;
}

KwFilteringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwFilteringContext.prototype.constructor = KwFilteringContext;

KwFilteringContext.prototype.K_FILTERING = function() {
    return this.getToken(CqlParser.K_FILTERING, 0);
};

KwFilteringContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwFiltering(this);
	}
};

KwFilteringContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwFiltering(this);
	}
};

KwFilteringContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwFiltering(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwFilteringContext = KwFilteringContext;

CqlParser.prototype.kwFiltering = function() {

    var localctx = new KwFilteringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, CqlParser.RULE_kwFiltering);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2241;
        this.match(CqlParser.K_FILTERING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwFinalfuncContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwFinalfunc;
    return this;
}

KwFinalfuncContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwFinalfuncContext.prototype.constructor = KwFinalfuncContext;

KwFinalfuncContext.prototype.K_FINALFUNC = function() {
    return this.getToken(CqlParser.K_FINALFUNC, 0);
};

KwFinalfuncContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwFinalfunc(this);
	}
};

KwFinalfuncContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwFinalfunc(this);
	}
};

KwFinalfuncContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwFinalfunc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwFinalfuncContext = KwFinalfuncContext;

CqlParser.prototype.kwFinalfunc = function() {

    var localctx = new KwFinalfuncContext(this, this._ctx, this.state);
    this.enterRule(localctx, 408, CqlParser.RULE_kwFinalfunc);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2243;
        this.match(CqlParser.K_FINALFUNC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwFromContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwFrom;
    return this;
}

KwFromContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwFromContext.prototype.constructor = KwFromContext;

KwFromContext.prototype.K_FROM = function() {
    return this.getToken(CqlParser.K_FROM, 0);
};

KwFromContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwFrom(this);
	}
};

KwFromContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwFrom(this);
	}
};

KwFromContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwFrom(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwFromContext = KwFromContext;

CqlParser.prototype.kwFrom = function() {

    var localctx = new KwFromContext(this, this._ctx, this.state);
    this.enterRule(localctx, 410, CqlParser.RULE_kwFrom);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2245;
        this.match(CqlParser.K_FROM);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwFullContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwFull;
    return this;
}

KwFullContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwFullContext.prototype.constructor = KwFullContext;

KwFullContext.prototype.K_FULL = function() {
    return this.getToken(CqlParser.K_FULL, 0);
};

KwFullContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwFull(this);
	}
};

KwFullContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwFull(this);
	}
};

KwFullContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwFull(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwFullContext = KwFullContext;

CqlParser.prototype.kwFull = function() {

    var localctx = new KwFullContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, CqlParser.RULE_kwFull);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2247;
        this.match(CqlParser.K_FULL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwFunction;
    return this;
}

KwFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwFunctionContext.prototype.constructor = KwFunctionContext;

KwFunctionContext.prototype.K_FUNCTION = function() {
    return this.getToken(CqlParser.K_FUNCTION, 0);
};

KwFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwFunction(this);
	}
};

KwFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwFunction(this);
	}
};

KwFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwFunctionContext = KwFunctionContext;

CqlParser.prototype.kwFunction = function() {

    var localctx = new KwFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, CqlParser.RULE_kwFunction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2249;
        this.match(CqlParser.K_FUNCTION);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwFunctionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwFunctions;
    return this;
}

KwFunctionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwFunctionsContext.prototype.constructor = KwFunctionsContext;

KwFunctionsContext.prototype.K_FUNCTIONS = function() {
    return this.getToken(CqlParser.K_FUNCTIONS, 0);
};

KwFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwFunctions(this);
	}
};

KwFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwFunctions(this);
	}
};

KwFunctionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwFunctions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwFunctionsContext = KwFunctionsContext;

CqlParser.prototype.kwFunctions = function() {

    var localctx = new KwFunctionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 416, CqlParser.RULE_kwFunctions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2251;
        this.match(CqlParser.K_FUNCTIONS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwGrantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwGrant;
    return this;
}

KwGrantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwGrantContext.prototype.constructor = KwGrantContext;

KwGrantContext.prototype.K_GRANT = function() {
    return this.getToken(CqlParser.K_GRANT, 0);
};

KwGrantContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwGrant(this);
	}
};

KwGrantContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwGrant(this);
	}
};

KwGrantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwGrant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwGrantContext = KwGrantContext;

CqlParser.prototype.kwGrant = function() {

    var localctx = new KwGrantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 418, CqlParser.RULE_kwGrant);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2253;
        this.match(CqlParser.K_GRANT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwIfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwIf;
    return this;
}

KwIfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwIfContext.prototype.constructor = KwIfContext;

KwIfContext.prototype.K_IF = function() {
    return this.getToken(CqlParser.K_IF, 0);
};

KwIfContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwIf(this);
	}
};

KwIfContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwIf(this);
	}
};

KwIfContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwIf(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwIfContext = KwIfContext;

CqlParser.prototype.kwIf = function() {

    var localctx = new KwIfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 420, CqlParser.RULE_kwIf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2255;
        this.match(CqlParser.K_IF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwInContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwIn;
    return this;
}

KwInContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwInContext.prototype.constructor = KwInContext;

KwInContext.prototype.K_IN = function() {
    return this.getToken(CqlParser.K_IN, 0);
};

KwInContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwIn(this);
	}
};

KwInContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwIn(this);
	}
};

KwInContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwIn(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwInContext = KwInContext;

CqlParser.prototype.kwIn = function() {

    var localctx = new KwInContext(this, this._ctx, this.state);
    this.enterRule(localctx, 422, CqlParser.RULE_kwIn);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2257;
        this.match(CqlParser.K_IN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwIndexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwIndex;
    return this;
}

KwIndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwIndexContext.prototype.constructor = KwIndexContext;

KwIndexContext.prototype.K_INDEX = function() {
    return this.getToken(CqlParser.K_INDEX, 0);
};

KwIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwIndex(this);
	}
};

KwIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwIndex(this);
	}
};

KwIndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwIndexContext = KwIndexContext;

CqlParser.prototype.kwIndex = function() {

    var localctx = new KwIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 424, CqlParser.RULE_kwIndex);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2259;
        this.match(CqlParser.K_INDEX);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwInitcondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwInitcond;
    return this;
}

KwInitcondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwInitcondContext.prototype.constructor = KwInitcondContext;

KwInitcondContext.prototype.K_INITCOND = function() {
    return this.getToken(CqlParser.K_INITCOND, 0);
};

KwInitcondContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwInitcond(this);
	}
};

KwInitcondContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwInitcond(this);
	}
};

KwInitcondContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwInitcond(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwInitcondContext = KwInitcondContext;

CqlParser.prototype.kwInitcond = function() {

    var localctx = new KwInitcondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 426, CqlParser.RULE_kwInitcond);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2261;
        this.match(CqlParser.K_INITCOND);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwInputContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwInput;
    return this;
}

KwInputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwInputContext.prototype.constructor = KwInputContext;

KwInputContext.prototype.K_INPUT = function() {
    return this.getToken(CqlParser.K_INPUT, 0);
};

KwInputContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwInput(this);
	}
};

KwInputContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwInput(this);
	}
};

KwInputContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwInput(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwInputContext = KwInputContext;

CqlParser.prototype.kwInput = function() {

    var localctx = new KwInputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 428, CqlParser.RULE_kwInput);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2263;
        this.match(CqlParser.K_INPUT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwInsertContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwInsert;
    return this;
}

KwInsertContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwInsertContext.prototype.constructor = KwInsertContext;

KwInsertContext.prototype.K_INSERT = function() {
    return this.getToken(CqlParser.K_INSERT, 0);
};

KwInsertContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwInsert(this);
	}
};

KwInsertContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwInsert(this);
	}
};

KwInsertContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwInsert(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwInsertContext = KwInsertContext;

CqlParser.prototype.kwInsert = function() {

    var localctx = new KwInsertContext(this, this._ctx, this.state);
    this.enterRule(localctx, 430, CqlParser.RULE_kwInsert);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2265;
        this.match(CqlParser.K_INSERT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwIntoContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwInto;
    return this;
}

KwIntoContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwIntoContext.prototype.constructor = KwIntoContext;

KwIntoContext.prototype.K_INTO = function() {
    return this.getToken(CqlParser.K_INTO, 0);
};

KwIntoContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwInto(this);
	}
};

KwIntoContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwInto(this);
	}
};

KwIntoContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwInto(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwIntoContext = KwIntoContext;

CqlParser.prototype.kwInto = function() {

    var localctx = new KwIntoContext(this, this._ctx, this.state);
    this.enterRule(localctx, 432, CqlParser.RULE_kwInto);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2267;
        this.match(CqlParser.K_INTO);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwIsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwIs;
    return this;
}

KwIsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwIsContext.prototype.constructor = KwIsContext;

KwIsContext.prototype.K_IS = function() {
    return this.getToken(CqlParser.K_IS, 0);
};

KwIsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwIs(this);
	}
};

KwIsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwIs(this);
	}
};

KwIsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwIs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwIsContext = KwIsContext;

CqlParser.prototype.kwIs = function() {

    var localctx = new KwIsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 434, CqlParser.RULE_kwIs);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2269;
        this.match(CqlParser.K_IS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwJsonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwJson;
    return this;
}

KwJsonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwJsonContext.prototype.constructor = KwJsonContext;

KwJsonContext.prototype.K_JSON = function() {
    return this.getToken(CqlParser.K_JSON, 0);
};

KwJsonContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwJson(this);
	}
};

KwJsonContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwJson(this);
	}
};

KwJsonContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwJson(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwJsonContext = KwJsonContext;

CqlParser.prototype.kwJson = function() {

    var localctx = new KwJsonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 436, CqlParser.RULE_kwJson);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2271;
        this.match(CqlParser.K_JSON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwKeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwKey;
    return this;
}

KwKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwKeyContext.prototype.constructor = KwKeyContext;

KwKeyContext.prototype.K_KEY = function() {
    return this.getToken(CqlParser.K_KEY, 0);
};

KwKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwKey(this);
	}
};

KwKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwKey(this);
	}
};

KwKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwKeyContext = KwKeyContext;

CqlParser.prototype.kwKey = function() {

    var localctx = new KwKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 438, CqlParser.RULE_kwKey);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2273;
        this.match(CqlParser.K_KEY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwKeysContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwKeys;
    return this;
}

KwKeysContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwKeysContext.prototype.constructor = KwKeysContext;

KwKeysContext.prototype.K_KEYS = function() {
    return this.getToken(CqlParser.K_KEYS, 0);
};

KwKeysContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwKeys(this);
	}
};

KwKeysContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwKeys(this);
	}
};

KwKeysContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwKeys(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwKeysContext = KwKeysContext;

CqlParser.prototype.kwKeys = function() {

    var localctx = new KwKeysContext(this, this._ctx, this.state);
    this.enterRule(localctx, 440, CqlParser.RULE_kwKeys);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2275;
        this.match(CqlParser.K_KEYS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwKeyspaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwKeyspace;
    return this;
}

KwKeyspaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwKeyspaceContext.prototype.constructor = KwKeyspaceContext;

KwKeyspaceContext.prototype.K_KEYSPACE = function() {
    return this.getToken(CqlParser.K_KEYSPACE, 0);
};

KwKeyspaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwKeyspace(this);
	}
};

KwKeyspaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwKeyspace(this);
	}
};

KwKeyspaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwKeyspace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwKeyspaceContext = KwKeyspaceContext;

CqlParser.prototype.kwKeyspace = function() {

    var localctx = new KwKeyspaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 442, CqlParser.RULE_kwKeyspace);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2277;
        this.match(CqlParser.K_KEYSPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwKeyspacesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwKeyspaces;
    return this;
}

KwKeyspacesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwKeyspacesContext.prototype.constructor = KwKeyspacesContext;

KwKeyspacesContext.prototype.K_KEYSPACES = function() {
    return this.getToken(CqlParser.K_KEYSPACES, 0);
};

KwKeyspacesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwKeyspaces(this);
	}
};

KwKeyspacesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwKeyspaces(this);
	}
};

KwKeyspacesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwKeyspaces(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwKeyspacesContext = KwKeyspacesContext;

CqlParser.prototype.kwKeyspaces = function() {

    var localctx = new KwKeyspacesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 444, CqlParser.RULE_kwKeyspaces);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2279;
        this.match(CqlParser.K_KEYSPACES);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwLanguageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwLanguage;
    return this;
}

KwLanguageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwLanguageContext.prototype.constructor = KwLanguageContext;

KwLanguageContext.prototype.K_LANGUAGE = function() {
    return this.getToken(CqlParser.K_LANGUAGE, 0);
};

KwLanguageContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwLanguage(this);
	}
};

KwLanguageContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwLanguage(this);
	}
};

KwLanguageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwLanguage(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwLanguageContext = KwLanguageContext;

CqlParser.prototype.kwLanguage = function() {

    var localctx = new KwLanguageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 446, CqlParser.RULE_kwLanguage);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2281;
        this.match(CqlParser.K_LANGUAGE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwLimitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwLimit;
    return this;
}

KwLimitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwLimitContext.prototype.constructor = KwLimitContext;

KwLimitContext.prototype.K_LIMIT = function() {
    return this.getToken(CqlParser.K_LIMIT, 0);
};

KwLimitContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwLimit(this);
	}
};

KwLimitContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwLimit(this);
	}
};

KwLimitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwLimit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwLimitContext = KwLimitContext;

CqlParser.prototype.kwLimit = function() {

    var localctx = new KwLimitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 448, CqlParser.RULE_kwLimit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2283;
        this.match(CqlParser.K_LIMIT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwList;
    return this;
}

KwListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwListContext.prototype.constructor = KwListContext;

KwListContext.prototype.K_LIST = function() {
    return this.getToken(CqlParser.K_LIST, 0);
};

KwListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwList(this);
	}
};

KwListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwList(this);
	}
};

KwListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwListContext = KwListContext;

CqlParser.prototype.kwList = function() {

    var localctx = new KwListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 450, CqlParser.RULE_kwList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2285;
        this.match(CqlParser.K_LIST);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwLoggedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwLogged;
    return this;
}

KwLoggedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwLoggedContext.prototype.constructor = KwLoggedContext;

KwLoggedContext.prototype.K_LOGGED = function() {
    return this.getToken(CqlParser.K_LOGGED, 0);
};

KwLoggedContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwLogged(this);
	}
};

KwLoggedContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwLogged(this);
	}
};

KwLoggedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwLogged(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwLoggedContext = KwLoggedContext;

CqlParser.prototype.kwLogged = function() {

    var localctx = new KwLoggedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 452, CqlParser.RULE_kwLogged);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2287;
        this.match(CqlParser.K_LOGGED);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwLoginContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwLogin;
    return this;
}

KwLoginContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwLoginContext.prototype.constructor = KwLoginContext;

KwLoginContext.prototype.K_LOGIN = function() {
    return this.getToken(CqlParser.K_LOGIN, 0);
};

KwLoginContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwLogin(this);
	}
};

KwLoginContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwLogin(this);
	}
};

KwLoginContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwLogin(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwLoginContext = KwLoginContext;

CqlParser.prototype.kwLogin = function() {

    var localctx = new KwLoginContext(this, this._ctx, this.state);
    this.enterRule(localctx, 454, CqlParser.RULE_kwLogin);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2289;
        this.match(CqlParser.K_LOGIN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwMaterializedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwMaterialized;
    return this;
}

KwMaterializedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwMaterializedContext.prototype.constructor = KwMaterializedContext;

KwMaterializedContext.prototype.K_MATERIALIZED = function() {
    return this.getToken(CqlParser.K_MATERIALIZED, 0);
};

KwMaterializedContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwMaterialized(this);
	}
};

KwMaterializedContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwMaterialized(this);
	}
};

KwMaterializedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwMaterialized(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwMaterializedContext = KwMaterializedContext;

CqlParser.prototype.kwMaterialized = function() {

    var localctx = new KwMaterializedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 456, CqlParser.RULE_kwMaterialized);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2291;
        this.match(CqlParser.K_MATERIALIZED);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwModifyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwModify;
    return this;
}

KwModifyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwModifyContext.prototype.constructor = KwModifyContext;

KwModifyContext.prototype.K_MODIFY = function() {
    return this.getToken(CqlParser.K_MODIFY, 0);
};

KwModifyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwModify(this);
	}
};

KwModifyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwModify(this);
	}
};

KwModifyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwModify(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwModifyContext = KwModifyContext;

CqlParser.prototype.kwModify = function() {

    var localctx = new KwModifyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 458, CqlParser.RULE_kwModify);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2293;
        this.match(CqlParser.K_MODIFY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwNosuperuserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwNosuperuser;
    return this;
}

KwNosuperuserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwNosuperuserContext.prototype.constructor = KwNosuperuserContext;

KwNosuperuserContext.prototype.K_NOSUPERUSER = function() {
    return this.getToken(CqlParser.K_NOSUPERUSER, 0);
};

KwNosuperuserContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwNosuperuser(this);
	}
};

KwNosuperuserContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwNosuperuser(this);
	}
};

KwNosuperuserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwNosuperuser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwNosuperuserContext = KwNosuperuserContext;

CqlParser.prototype.kwNosuperuser = function() {

    var localctx = new KwNosuperuserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 460, CqlParser.RULE_kwNosuperuser);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2295;
        this.match(CqlParser.K_NOSUPERUSER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwNorecursiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwNorecursive;
    return this;
}

KwNorecursiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwNorecursiveContext.prototype.constructor = KwNorecursiveContext;

KwNorecursiveContext.prototype.K_NORECURSIVE = function() {
    return this.getToken(CqlParser.K_NORECURSIVE, 0);
};

KwNorecursiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwNorecursive(this);
	}
};

KwNorecursiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwNorecursive(this);
	}
};

KwNorecursiveContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwNorecursive(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwNorecursiveContext = KwNorecursiveContext;

CqlParser.prototype.kwNorecursive = function() {

    var localctx = new KwNorecursiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 462, CqlParser.RULE_kwNorecursive);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2297;
        this.match(CqlParser.K_NORECURSIVE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwNotContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwNot;
    return this;
}

KwNotContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwNotContext.prototype.constructor = KwNotContext;

KwNotContext.prototype.K_NOT = function() {
    return this.getToken(CqlParser.K_NOT, 0);
};

KwNotContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwNot(this);
	}
};

KwNotContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwNot(this);
	}
};

KwNotContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwNot(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwNotContext = KwNotContext;

CqlParser.prototype.kwNot = function() {

    var localctx = new KwNotContext(this, this._ctx, this.state);
    this.enterRule(localctx, 464, CqlParser.RULE_kwNot);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2299;
        this.match(CqlParser.K_NOT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwNullContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwNull;
    return this;
}

KwNullContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwNullContext.prototype.constructor = KwNullContext;

KwNullContext.prototype.K_NULL = function() {
    return this.getToken(CqlParser.K_NULL, 0);
};

KwNullContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwNull(this);
	}
};

KwNullContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwNull(this);
	}
};

KwNullContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwNull(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwNullContext = KwNullContext;

CqlParser.prototype.kwNull = function() {

    var localctx = new KwNullContext(this, this._ctx, this.state);
    this.enterRule(localctx, 466, CqlParser.RULE_kwNull);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2301;
        this.match(CqlParser.K_NULL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwOf;
    return this;
}

KwOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwOfContext.prototype.constructor = KwOfContext;

KwOfContext.prototype.K_OF = function() {
    return this.getToken(CqlParser.K_OF, 0);
};

KwOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwOf(this);
	}
};

KwOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwOf(this);
	}
};

KwOfContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwOf(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwOfContext = KwOfContext;

CqlParser.prototype.kwOf = function() {

    var localctx = new KwOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 468, CqlParser.RULE_kwOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2303;
        this.match(CqlParser.K_OF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwOnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwOn;
    return this;
}

KwOnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwOnContext.prototype.constructor = KwOnContext;

KwOnContext.prototype.K_ON = function() {
    return this.getToken(CqlParser.K_ON, 0);
};

KwOnContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwOn(this);
	}
};

KwOnContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwOn(this);
	}
};

KwOnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwOn(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwOnContext = KwOnContext;

CqlParser.prototype.kwOn = function() {

    var localctx = new KwOnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 470, CqlParser.RULE_kwOn);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2305;
        this.match(CqlParser.K_ON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwOptions;
    return this;
}

KwOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwOptionsContext.prototype.constructor = KwOptionsContext;

KwOptionsContext.prototype.K_OPTIONS = function() {
    return this.getToken(CqlParser.K_OPTIONS, 0);
};

KwOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwOptions(this);
	}
};

KwOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwOptions(this);
	}
};

KwOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwOptionsContext = KwOptionsContext;

CqlParser.prototype.kwOptions = function() {

    var localctx = new KwOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 472, CqlParser.RULE_kwOptions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2307;
        this.match(CqlParser.K_OPTIONS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwOrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwOr;
    return this;
}

KwOrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwOrContext.prototype.constructor = KwOrContext;

KwOrContext.prototype.K_OR = function() {
    return this.getToken(CqlParser.K_OR, 0);
};

KwOrContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwOr(this);
	}
};

KwOrContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwOr(this);
	}
};

KwOrContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwOr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwOrContext = KwOrContext;

CqlParser.prototype.kwOr = function() {

    var localctx = new KwOrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 474, CqlParser.RULE_kwOr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2309;
        this.match(CqlParser.K_OR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwOrderContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwOrder;
    return this;
}

KwOrderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwOrderContext.prototype.constructor = KwOrderContext;

KwOrderContext.prototype.K_ORDER = function() {
    return this.getToken(CqlParser.K_ORDER, 0);
};

KwOrderContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwOrder(this);
	}
};

KwOrderContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwOrder(this);
	}
};

KwOrderContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwOrder(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwOrderContext = KwOrderContext;

CqlParser.prototype.kwOrder = function() {

    var localctx = new KwOrderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 476, CqlParser.RULE_kwOrder);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2311;
        this.match(CqlParser.K_ORDER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwPasswordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwPassword;
    return this;
}

KwPasswordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwPasswordContext.prototype.constructor = KwPasswordContext;

KwPasswordContext.prototype.K_PASSWORD = function() {
    return this.getToken(CqlParser.K_PASSWORD, 0);
};

KwPasswordContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwPassword(this);
	}
};

KwPasswordContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwPassword(this);
	}
};

KwPasswordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwPassword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwPasswordContext = KwPasswordContext;

CqlParser.prototype.kwPassword = function() {

    var localctx = new KwPasswordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 478, CqlParser.RULE_kwPassword);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2313;
        this.match(CqlParser.K_PASSWORD);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwPrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwPrimary;
    return this;
}

KwPrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwPrimaryContext.prototype.constructor = KwPrimaryContext;

KwPrimaryContext.prototype.K_PRIMARY = function() {
    return this.getToken(CqlParser.K_PRIMARY, 0);
};

KwPrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwPrimary(this);
	}
};

KwPrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwPrimary(this);
	}
};

KwPrimaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwPrimary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwPrimaryContext = KwPrimaryContext;

CqlParser.prototype.kwPrimary = function() {

    var localctx = new KwPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 480, CqlParser.RULE_kwPrimary);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2315;
        this.match(CqlParser.K_PRIMARY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwRenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwRename;
    return this;
}

KwRenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwRenameContext.prototype.constructor = KwRenameContext;

KwRenameContext.prototype.K_RENAME = function() {
    return this.getToken(CqlParser.K_RENAME, 0);
};

KwRenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwRename(this);
	}
};

KwRenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwRename(this);
	}
};

KwRenameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwRename(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwRenameContext = KwRenameContext;

CqlParser.prototype.kwRename = function() {

    var localctx = new KwRenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 482, CqlParser.RULE_kwRename);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2317;
        this.match(CqlParser.K_RENAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwReplaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwReplace;
    return this;
}

KwReplaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwReplaceContext.prototype.constructor = KwReplaceContext;

KwReplaceContext.prototype.K_REPLACE = function() {
    return this.getToken(CqlParser.K_REPLACE, 0);
};

KwReplaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwReplace(this);
	}
};

KwReplaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwReplace(this);
	}
};

KwReplaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwReplace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwReplaceContext = KwReplaceContext;

CqlParser.prototype.kwReplace = function() {

    var localctx = new KwReplaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 484, CqlParser.RULE_kwReplace);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2319;
        this.match(CqlParser.K_REPLACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwReplicationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwReplication;
    return this;
}

KwReplicationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwReplicationContext.prototype.constructor = KwReplicationContext;

KwReplicationContext.prototype.K_REPLICATION = function() {
    return this.getToken(CqlParser.K_REPLICATION, 0);
};

KwReplicationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwReplication(this);
	}
};

KwReplicationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwReplication(this);
	}
};

KwReplicationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwReplication(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwReplicationContext = KwReplicationContext;

CqlParser.prototype.kwReplication = function() {

    var localctx = new KwReplicationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 486, CqlParser.RULE_kwReplication);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2321;
        this.match(CqlParser.K_REPLICATION);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwReturnsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwReturns;
    return this;
}

KwReturnsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwReturnsContext.prototype.constructor = KwReturnsContext;

KwReturnsContext.prototype.K_RETURNS = function() {
    return this.getToken(CqlParser.K_RETURNS, 0);
};

KwReturnsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwReturns(this);
	}
};

KwReturnsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwReturns(this);
	}
};

KwReturnsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwReturns(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwReturnsContext = KwReturnsContext;

CqlParser.prototype.kwReturns = function() {

    var localctx = new KwReturnsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 488, CqlParser.RULE_kwReturns);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2323;
        this.match(CqlParser.K_RETURNS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwRoleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwRole;
    return this;
}

KwRoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwRoleContext.prototype.constructor = KwRoleContext;

KwRoleContext.prototype.K_ROLE = function() {
    return this.getToken(CqlParser.K_ROLE, 0);
};

KwRoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwRole(this);
	}
};

KwRoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwRole(this);
	}
};

KwRoleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwRole(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwRoleContext = KwRoleContext;

CqlParser.prototype.kwRole = function() {

    var localctx = new KwRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 490, CqlParser.RULE_kwRole);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2325;
        this.match(CqlParser.K_ROLE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwInternalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwInternal;
    return this;
}

KwInternalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwInternalContext.prototype.constructor = KwInternalContext;

KwInternalContext.prototype.K_INTERNAL = function() {
    return this.getToken(CqlParser.K_INTERNAL, 0);
};

KwInternalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwInternal(this);
	}
};

KwInternalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwInternal(this);
	}
};

KwInternalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwInternal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwInternalContext = KwInternalContext;

CqlParser.prototype.kwInternal = function() {

    var localctx = new KwInternalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 492, CqlParser.RULE_kwInternal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2327;
        this.match(CqlParser.K_INTERNAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwLdapContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwLdap;
    return this;
}

KwLdapContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwLdapContext.prototype.constructor = KwLdapContext;

KwLdapContext.prototype.K_LDAP = function() {
    return this.getToken(CqlParser.K_LDAP, 0);
};

KwLdapContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwLdap(this);
	}
};

KwLdapContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwLdap(this);
	}
};

KwLdapContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwLdap(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwLdapContext = KwLdapContext;

CqlParser.prototype.kwLdap = function() {

    var localctx = new KwLdapContext(this, this._ctx, this.state);
    this.enterRule(localctx, 494, CqlParser.RULE_kwLdap);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2329;
        this.match(CqlParser.K_LDAP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwSchemeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwScheme;
    return this;
}

KwSchemeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwSchemeContext.prototype.constructor = KwSchemeContext;

KwSchemeContext.prototype.K_SCHEME = function() {
    return this.getToken(CqlParser.K_SCHEME, 0);
};

KwSchemeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwScheme(this);
	}
};

KwSchemeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwScheme(this);
	}
};

KwSchemeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwScheme(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwSchemeContext = KwSchemeContext;

CqlParser.prototype.kwScheme = function() {

    var localctx = new KwSchemeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 496, CqlParser.RULE_kwScheme);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2331;
        this.match(CqlParser.K_SCHEME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwRolesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwRoles;
    return this;
}

KwRolesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwRolesContext.prototype.constructor = KwRolesContext;

KwRolesContext.prototype.K_ROLES = function() {
    return this.getToken(CqlParser.K_ROLES, 0);
};

KwRolesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwRoles(this);
	}
};

KwRolesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwRoles(this);
	}
};

KwRolesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwRoles(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwRolesContext = KwRolesContext;

CqlParser.prototype.kwRoles = function() {

    var localctx = new KwRolesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 498, CqlParser.RULE_kwRoles);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2333;
        this.match(CqlParser.K_ROLES);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwSelectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwSelect;
    return this;
}

KwSelectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwSelectContext.prototype.constructor = KwSelectContext;

KwSelectContext.prototype.K_SELECT = function() {
    return this.getToken(CqlParser.K_SELECT, 0);
};

KwSelectContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwSelect(this);
	}
};

KwSelectContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwSelect(this);
	}
};

KwSelectContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwSelect(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwSelectContext = KwSelectContext;

CqlParser.prototype.kwSelect = function() {

    var localctx = new KwSelectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 500, CqlParser.RULE_kwSelect);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2335;
        this.match(CqlParser.K_SELECT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwSet;
    return this;
}

KwSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwSetContext.prototype.constructor = KwSetContext;

KwSetContext.prototype.K_SET = function() {
    return this.getToken(CqlParser.K_SET, 0);
};

KwSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwSet(this);
	}
};

KwSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwSet(this);
	}
};

KwSetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwSet(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwSetContext = KwSetContext;

CqlParser.prototype.kwSet = function() {

    var localctx = new KwSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 502, CqlParser.RULE_kwSet);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2337;
        this.match(CqlParser.K_SET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwSfuncContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwSfunc;
    return this;
}

KwSfuncContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwSfuncContext.prototype.constructor = KwSfuncContext;

KwSfuncContext.prototype.K_SFUNC = function() {
    return this.getToken(CqlParser.K_SFUNC, 0);
};

KwSfuncContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwSfunc(this);
	}
};

KwSfuncContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwSfunc(this);
	}
};

KwSfuncContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwSfunc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwSfuncContext = KwSfuncContext;

CqlParser.prototype.kwSfunc = function() {

    var localctx = new KwSfuncContext(this, this._ctx, this.state);
    this.enterRule(localctx, 504, CqlParser.RULE_kwSfunc);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2339;
        this.match(CqlParser.K_SFUNC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwStorageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwStorage;
    return this;
}

KwStorageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwStorageContext.prototype.constructor = KwStorageContext;

KwStorageContext.prototype.K_STORAGE = function() {
    return this.getToken(CqlParser.K_STORAGE, 0);
};

KwStorageContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwStorage(this);
	}
};

KwStorageContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwStorage(this);
	}
};

KwStorageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwStorage(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwStorageContext = KwStorageContext;

CqlParser.prototype.kwStorage = function() {

    var localctx = new KwStorageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 506, CqlParser.RULE_kwStorage);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2341;
        this.match(CqlParser.K_STORAGE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwStypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwStype;
    return this;
}

KwStypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwStypeContext.prototype.constructor = KwStypeContext;

KwStypeContext.prototype.K_STYPE = function() {
    return this.getToken(CqlParser.K_STYPE, 0);
};

KwStypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwStype(this);
	}
};

KwStypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwStype(this);
	}
};

KwStypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwStype(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwStypeContext = KwStypeContext;

CqlParser.prototype.kwStype = function() {

    var localctx = new KwStypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 508, CqlParser.RULE_kwStype);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2343;
        this.match(CqlParser.K_STYPE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwSuperuserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwSuperuser;
    return this;
}

KwSuperuserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwSuperuserContext.prototype.constructor = KwSuperuserContext;

KwSuperuserContext.prototype.K_SUPERUSER = function() {
    return this.getToken(CqlParser.K_SUPERUSER, 0);
};

KwSuperuserContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwSuperuser(this);
	}
};

KwSuperuserContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwSuperuser(this);
	}
};

KwSuperuserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwSuperuser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwSuperuserContext = KwSuperuserContext;

CqlParser.prototype.kwSuperuser = function() {

    var localctx = new KwSuperuserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 510, CqlParser.RULE_kwSuperuser);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2345;
        this.match(CqlParser.K_SUPERUSER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTable;
    return this;
}

KwTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwTableContext.prototype.constructor = KwTableContext;

KwTableContext.prototype.K_TABLE = function() {
    return this.getToken(CqlParser.K_TABLE, 0);
};

KwTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwTable(this);
	}
};

KwTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwTable(this);
	}
};

KwTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwTableContext = KwTableContext;

CqlParser.prototype.kwTable = function() {

    var localctx = new KwTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 512, CqlParser.RULE_kwTable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2347;
        this.match(CqlParser.K_TABLE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwTimestampContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTimestamp;
    return this;
}

KwTimestampContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwTimestampContext.prototype.constructor = KwTimestampContext;

KwTimestampContext.prototype.K_TIMESTAMP = function() {
    return this.getToken(CqlParser.K_TIMESTAMP, 0);
};

KwTimestampContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwTimestamp(this);
	}
};

KwTimestampContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwTimestamp(this);
	}
};

KwTimestampContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwTimestamp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwTimestampContext = KwTimestampContext;

CqlParser.prototype.kwTimestamp = function() {

    var localctx = new KwTimestampContext(this, this._ctx, this.state);
    this.enterRule(localctx, 514, CqlParser.RULE_kwTimestamp);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2349;
        this.match(CqlParser.K_TIMESTAMP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwToContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTo;
    return this;
}

KwToContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwToContext.prototype.constructor = KwToContext;

KwToContext.prototype.K_TO = function() {
    return this.getToken(CqlParser.K_TO, 0);
};

KwToContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwTo(this);
	}
};

KwToContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwTo(this);
	}
};

KwToContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwTo(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwToContext = KwToContext;

CqlParser.prototype.kwTo = function() {

    var localctx = new KwToContext(this, this._ctx, this.state);
    this.enterRule(localctx, 516, CqlParser.RULE_kwTo);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2351;
        this.match(CqlParser.K_TO);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwTriggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTrigger;
    return this;
}

KwTriggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwTriggerContext.prototype.constructor = KwTriggerContext;

KwTriggerContext.prototype.K_TRIGGER = function() {
    return this.getToken(CqlParser.K_TRIGGER, 0);
};

KwTriggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwTrigger(this);
	}
};

KwTriggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwTrigger(this);
	}
};

KwTriggerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwTrigger(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwTriggerContext = KwTriggerContext;

CqlParser.prototype.kwTrigger = function() {

    var localctx = new KwTriggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 518, CqlParser.RULE_kwTrigger);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2353;
        this.match(CqlParser.K_TRIGGER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwTruncateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTruncate;
    return this;
}

KwTruncateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwTruncateContext.prototype.constructor = KwTruncateContext;

KwTruncateContext.prototype.K_TRUNCATE = function() {
    return this.getToken(CqlParser.K_TRUNCATE, 0);
};

KwTruncateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwTruncate(this);
	}
};

KwTruncateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwTruncate(this);
	}
};

KwTruncateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwTruncate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwTruncateContext = KwTruncateContext;

CqlParser.prototype.kwTruncate = function() {

    var localctx = new KwTruncateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 520, CqlParser.RULE_kwTruncate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2355;
        this.match(CqlParser.K_TRUNCATE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwTtlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTtl;
    return this;
}

KwTtlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwTtlContext.prototype.constructor = KwTtlContext;

KwTtlContext.prototype.K_TTL = function() {
    return this.getToken(CqlParser.K_TTL, 0);
};

KwTtlContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwTtl(this);
	}
};

KwTtlContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwTtl(this);
	}
};

KwTtlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwTtl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwTtlContext = KwTtlContext;

CqlParser.prototype.kwTtl = function() {

    var localctx = new KwTtlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 522, CqlParser.RULE_kwTtl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2357;
        this.match(CqlParser.K_TTL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwType;
    return this;
}

KwTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwTypeContext.prototype.constructor = KwTypeContext;

KwTypeContext.prototype.K_TYPE = function() {
    return this.getToken(CqlParser.K_TYPE, 0);
};

KwTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwType(this);
	}
};

KwTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwType(this);
	}
};

KwTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwTypeContext = KwTypeContext;

CqlParser.prototype.kwType = function() {

    var localctx = new KwTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 524, CqlParser.RULE_kwType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2359;
        this.match(CqlParser.K_TYPE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwUnloggedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwUnlogged;
    return this;
}

KwUnloggedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwUnloggedContext.prototype.constructor = KwUnloggedContext;

KwUnloggedContext.prototype.K_UNLOGGED = function() {
    return this.getToken(CqlParser.K_UNLOGGED, 0);
};

KwUnloggedContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwUnlogged(this);
	}
};

KwUnloggedContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwUnlogged(this);
	}
};

KwUnloggedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwUnlogged(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwUnloggedContext = KwUnloggedContext;

CqlParser.prototype.kwUnlogged = function() {

    var localctx = new KwUnloggedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 526, CqlParser.RULE_kwUnlogged);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2361;
        this.match(CqlParser.K_UNLOGGED);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwUpdateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwUpdate;
    return this;
}

KwUpdateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwUpdateContext.prototype.constructor = KwUpdateContext;

KwUpdateContext.prototype.K_UPDATE = function() {
    return this.getToken(CqlParser.K_UPDATE, 0);
};

KwUpdateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwUpdate(this);
	}
};

KwUpdateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwUpdate(this);
	}
};

KwUpdateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwUpdate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwUpdateContext = KwUpdateContext;

CqlParser.prototype.kwUpdate = function() {

    var localctx = new KwUpdateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 528, CqlParser.RULE_kwUpdate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2363;
        this.match(CqlParser.K_UPDATE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwUseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwUse;
    return this;
}

KwUseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwUseContext.prototype.constructor = KwUseContext;

KwUseContext.prototype.K_USE = function() {
    return this.getToken(CqlParser.K_USE, 0);
};

KwUseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwUse(this);
	}
};

KwUseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwUse(this);
	}
};

KwUseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwUse(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwUseContext = KwUseContext;

CqlParser.prototype.kwUse = function() {

    var localctx = new KwUseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 530, CqlParser.RULE_kwUse);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2365;
        this.match(CqlParser.K_USE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwUserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwUser;
    return this;
}

KwUserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwUserContext.prototype.constructor = KwUserContext;

KwUserContext.prototype.K_USER = function() {
    return this.getToken(CqlParser.K_USER, 0);
};

KwUserContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwUser(this);
	}
};

KwUserContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwUser(this);
	}
};

KwUserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwUser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwUserContext = KwUserContext;

CqlParser.prototype.kwUser = function() {

    var localctx = new KwUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 532, CqlParser.RULE_kwUser);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2367;
        this.match(CqlParser.K_USER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwUsersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwUsers;
    return this;
}

KwUsersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwUsersContext.prototype.constructor = KwUsersContext;

KwUsersContext.prototype.K_USERS = function() {
    return this.getToken(CqlParser.K_USERS, 0);
};

KwUsersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwUsers(this);
	}
};

KwUsersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwUsers(this);
	}
};

KwUsersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwUsers(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwUsersContext = KwUsersContext;

CqlParser.prototype.kwUsers = function() {

    var localctx = new KwUsersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 534, CqlParser.RULE_kwUsers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2369;
        this.match(CqlParser.K_USERS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwUsingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwUsing;
    return this;
}

KwUsingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwUsingContext.prototype.constructor = KwUsingContext;

KwUsingContext.prototype.K_USING = function() {
    return this.getToken(CqlParser.K_USING, 0);
};

KwUsingContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwUsing(this);
	}
};

KwUsingContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwUsing(this);
	}
};

KwUsingContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwUsing(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwUsingContext = KwUsingContext;

CqlParser.prototype.kwUsing = function() {

    var localctx = new KwUsingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 536, CqlParser.RULE_kwUsing);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2371;
        this.match(CqlParser.K_USING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwValuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwValues;
    return this;
}

KwValuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwValuesContext.prototype.constructor = KwValuesContext;

KwValuesContext.prototype.K_VALUES = function() {
    return this.getToken(CqlParser.K_VALUES, 0);
};

KwValuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwValues(this);
	}
};

KwValuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwValues(this);
	}
};

KwValuesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwValues(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwValuesContext = KwValuesContext;

CqlParser.prototype.kwValues = function() {

    var localctx = new KwValuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 538, CqlParser.RULE_kwValues);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2373;
        this.match(CqlParser.K_VALUES);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwView;
    return this;
}

KwViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwViewContext.prototype.constructor = KwViewContext;

KwViewContext.prototype.K_VIEW = function() {
    return this.getToken(CqlParser.K_VIEW, 0);
};

KwViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwView(this);
	}
};

KwViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwView(this);
	}
};

KwViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwViewContext = KwViewContext;

CqlParser.prototype.kwView = function() {

    var localctx = new KwViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 540, CqlParser.RULE_kwView);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2375;
        this.match(CqlParser.K_VIEW);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwWhereContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwWhere;
    return this;
}

KwWhereContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwWhereContext.prototype.constructor = KwWhereContext;

KwWhereContext.prototype.K_WHERE = function() {
    return this.getToken(CqlParser.K_WHERE, 0);
};

KwWhereContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwWhere(this);
	}
};

KwWhereContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwWhere(this);
	}
};

KwWhereContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwWhere(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwWhereContext = KwWhereContext;

CqlParser.prototype.kwWhere = function() {

    var localctx = new KwWhereContext(this, this._ctx, this.state);
    this.enterRule(localctx, 542, CqlParser.RULE_kwWhere);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2377;
        this.match(CqlParser.K_WHERE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwWithContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwWith;
    return this;
}

KwWithContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwWithContext.prototype.constructor = KwWithContext;

KwWithContext.prototype.K_WITH = function() {
    return this.getToken(CqlParser.K_WITH, 0);
};

KwWithContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwWith(this);
	}
};

KwWithContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwWith(this);
	}
};

KwWithContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwWith(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwWithContext = KwWithContext;

CqlParser.prototype.kwWith = function() {

    var localctx = new KwWithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 544, CqlParser.RULE_kwWith);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2379;
        this.match(CqlParser.K_WITH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwRevokeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwRevoke;
    return this;
}

KwRevokeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwRevokeContext.prototype.constructor = KwRevokeContext;

KwRevokeContext.prototype.K_REVOKE = function() {
    return this.getToken(CqlParser.K_REVOKE, 0);
};

KwRevokeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwRevoke(this);
	}
};

KwRevokeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwRevoke(this);
	}
};

KwRevokeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwRevoke(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwRevokeContext = KwRevokeContext;

CqlParser.prototype.kwRevoke = function() {

    var localctx = new KwRevokeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 546, CqlParser.RULE_kwRevoke);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2381;
        this.match(CqlParser.K_REVOKE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EofContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_eof;
    return this;
}

EofContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EofContext.prototype.constructor = EofContext;

EofContext.prototype.EOF = function() {
    return this.getToken(CqlParser.EOF, 0);
};

EofContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterEof(this);
	}
};

EofContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitEof(this);
	}
};

EofContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitEof(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.EofContext = EofContext;

CqlParser.prototype.eof = function() {

    var localctx = new EofContext(this, this._ctx, this.state);
    this.enterRule(localctx, 548, CqlParser.RULE_eof);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2383;
        this.match(CqlParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SyntaxBracketLrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketLr;
    return this;
}

SyntaxBracketLrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxBracketLrContext.prototype.constructor = SyntaxBracketLrContext;

SyntaxBracketLrContext.prototype.LR_BRACKET = function() {
    return this.getToken(CqlParser.LR_BRACKET, 0);
};

SyntaxBracketLrContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxBracketLr(this);
	}
};

SyntaxBracketLrContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxBracketLr(this);
	}
};

SyntaxBracketLrContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxBracketLr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxBracketLrContext = SyntaxBracketLrContext;

CqlParser.prototype.syntaxBracketLr = function() {

    var localctx = new SyntaxBracketLrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 550, CqlParser.RULE_syntaxBracketLr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2385;
        this.match(CqlParser.LR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SyntaxBracketRrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketRr;
    return this;
}

SyntaxBracketRrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxBracketRrContext.prototype.constructor = SyntaxBracketRrContext;

SyntaxBracketRrContext.prototype.RR_BRACKET = function() {
    return this.getToken(CqlParser.RR_BRACKET, 0);
};

SyntaxBracketRrContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxBracketRr(this);
	}
};

SyntaxBracketRrContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxBracketRr(this);
	}
};

SyntaxBracketRrContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxBracketRr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxBracketRrContext = SyntaxBracketRrContext;

CqlParser.prototype.syntaxBracketRr = function() {

    var localctx = new SyntaxBracketRrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 552, CqlParser.RULE_syntaxBracketRr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2387;
        this.match(CqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SyntaxBracketLcContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketLc;
    return this;
}

SyntaxBracketLcContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxBracketLcContext.prototype.constructor = SyntaxBracketLcContext;

SyntaxBracketLcContext.prototype.LC_BRACKET = function() {
    return this.getToken(CqlParser.LC_BRACKET, 0);
};

SyntaxBracketLcContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxBracketLc(this);
	}
};

SyntaxBracketLcContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxBracketLc(this);
	}
};

SyntaxBracketLcContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxBracketLc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxBracketLcContext = SyntaxBracketLcContext;

CqlParser.prototype.syntaxBracketLc = function() {

    var localctx = new SyntaxBracketLcContext(this, this._ctx, this.state);
    this.enterRule(localctx, 554, CqlParser.RULE_syntaxBracketLc);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2389;
        this.match(CqlParser.LC_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SyntaxBracketRcContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketRc;
    return this;
}

SyntaxBracketRcContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxBracketRcContext.prototype.constructor = SyntaxBracketRcContext;

SyntaxBracketRcContext.prototype.RC_BRACKET = function() {
    return this.getToken(CqlParser.RC_BRACKET, 0);
};

SyntaxBracketRcContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxBracketRc(this);
	}
};

SyntaxBracketRcContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxBracketRc(this);
	}
};

SyntaxBracketRcContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxBracketRc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxBracketRcContext = SyntaxBracketRcContext;

CqlParser.prototype.syntaxBracketRc = function() {

    var localctx = new SyntaxBracketRcContext(this, this._ctx, this.state);
    this.enterRule(localctx, 556, CqlParser.RULE_syntaxBracketRc);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2391;
        this.match(CqlParser.RC_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SyntaxBracketLaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketLa;
    return this;
}

SyntaxBracketLaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxBracketLaContext.prototype.constructor = SyntaxBracketLaContext;

SyntaxBracketLaContext.prototype.OPERATOR_LT = function() {
    return this.getToken(CqlParser.OPERATOR_LT, 0);
};

SyntaxBracketLaContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxBracketLa(this);
	}
};

SyntaxBracketLaContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxBracketLa(this);
	}
};

SyntaxBracketLaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxBracketLa(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxBracketLaContext = SyntaxBracketLaContext;

CqlParser.prototype.syntaxBracketLa = function() {

    var localctx = new SyntaxBracketLaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 558, CqlParser.RULE_syntaxBracketLa);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2393;
        this.match(CqlParser.OPERATOR_LT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SyntaxBracketRaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketRa;
    return this;
}

SyntaxBracketRaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxBracketRaContext.prototype.constructor = SyntaxBracketRaContext;

SyntaxBracketRaContext.prototype.OPERATOR_GT = function() {
    return this.getToken(CqlParser.OPERATOR_GT, 0);
};

SyntaxBracketRaContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxBracketRa(this);
	}
};

SyntaxBracketRaContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxBracketRa(this);
	}
};

SyntaxBracketRaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxBracketRa(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxBracketRaContext = SyntaxBracketRaContext;

CqlParser.prototype.syntaxBracketRa = function() {

    var localctx = new SyntaxBracketRaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 560, CqlParser.RULE_syntaxBracketRa);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2395;
        this.match(CqlParser.OPERATOR_GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SyntaxBracketLsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketLs;
    return this;
}

SyntaxBracketLsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxBracketLsContext.prototype.constructor = SyntaxBracketLsContext;

SyntaxBracketLsContext.prototype.LS_BRACKET = function() {
    return this.getToken(CqlParser.LS_BRACKET, 0);
};

SyntaxBracketLsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxBracketLs(this);
	}
};

SyntaxBracketLsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxBracketLs(this);
	}
};

SyntaxBracketLsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxBracketLs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxBracketLsContext = SyntaxBracketLsContext;

CqlParser.prototype.syntaxBracketLs = function() {

    var localctx = new SyntaxBracketLsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 562, CqlParser.RULE_syntaxBracketLs);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2397;
        this.match(CqlParser.LS_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SyntaxBracketRsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketRs;
    return this;
}

SyntaxBracketRsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxBracketRsContext.prototype.constructor = SyntaxBracketRsContext;

SyntaxBracketRsContext.prototype.RS_BRACKET = function() {
    return this.getToken(CqlParser.RS_BRACKET, 0);
};

SyntaxBracketRsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxBracketRs(this);
	}
};

SyntaxBracketRsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxBracketRs(this);
	}
};

SyntaxBracketRsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxBracketRs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxBracketRsContext = SyntaxBracketRsContext;

CqlParser.prototype.syntaxBracketRs = function() {

    var localctx = new SyntaxBracketRsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 564, CqlParser.RULE_syntaxBracketRs);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2399;
        this.match(CqlParser.RS_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SyntaxCommaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxComma;
    return this;
}

SyntaxCommaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxCommaContext.prototype.constructor = SyntaxCommaContext;

SyntaxCommaContext.prototype.COMMA = function() {
    return this.getToken(CqlParser.COMMA, 0);
};

SyntaxCommaContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxComma(this);
	}
};

SyntaxCommaContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxComma(this);
	}
};

SyntaxCommaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxComma(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxCommaContext = SyntaxCommaContext;

CqlParser.prototype.syntaxComma = function() {

    var localctx = new SyntaxCommaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 566, CqlParser.RULE_syntaxComma);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2401;
        this.match(CqlParser.COMMA);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SyntaxColonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxColon;
    return this;
}

SyntaxColonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxColonContext.prototype.constructor = SyntaxColonContext;

SyntaxColonContext.prototype.COLON = function() {
    return this.getToken(CqlParser.COLON, 0);
};

SyntaxColonContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxColon(this);
	}
};

SyntaxColonContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxColon(this);
	}
};

SyntaxColonContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxColon(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxColonContext = SyntaxColonContext;

CqlParser.prototype.syntaxColon = function() {

    var localctx = new SyntaxColonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 568, CqlParser.RULE_syntaxColon);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2403;
        this.match(CqlParser.COLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_id;
    return this;
}

IdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdContext.prototype.constructor = IdContext;

IdContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

IdContext.prototype.K_ADD = function() {
    return this.getToken(CqlParser.K_ADD, 0);
};

IdContext.prototype.K_AGGREGATE = function() {
    return this.getToken(CqlParser.K_AGGREGATE, 0);
};

IdContext.prototype.K_ALL = function() {
    return this.getToken(CqlParser.K_ALL, 0);
};

IdContext.prototype.K_ALLOW = function() {
    return this.getToken(CqlParser.K_ALLOW, 0);
};

IdContext.prototype.K_ALTER = function() {
    return this.getToken(CqlParser.K_ALTER, 0);
};

IdContext.prototype.K_AND = function() {
    return this.getToken(CqlParser.K_AND, 0);
};

IdContext.prototype.K_ANY = function() {
    return this.getToken(CqlParser.K_ANY, 0);
};

IdContext.prototype.K_APPLY = function() {
    return this.getToken(CqlParser.K_APPLY, 0);
};

IdContext.prototype.K_AS = function() {
    return this.getToken(CqlParser.K_AS, 0);
};

IdContext.prototype.K_ASC = function() {
    return this.getToken(CqlParser.K_ASC, 0);
};

IdContext.prototype.K_AUTHORIZE = function() {
    return this.getToken(CqlParser.K_AUTHORIZE, 0);
};

IdContext.prototype.K_BATCH = function() {
    return this.getToken(CqlParser.K_BATCH, 0);
};

IdContext.prototype.K_BEGIN = function() {
    return this.getToken(CqlParser.K_BEGIN, 0);
};

IdContext.prototype.K_BY = function() {
    return this.getToken(CqlParser.K_BY, 0);
};

IdContext.prototype.K_CALLED = function() {
    return this.getToken(CqlParser.K_CALLED, 0);
};

IdContext.prototype.K_CLUSTERING = function() {
    return this.getToken(CqlParser.K_CLUSTERING, 0);
};

IdContext.prototype.K_COLUMNFAMILY = function() {
    return this.getToken(CqlParser.K_COLUMNFAMILY, 0);
};

IdContext.prototype.K_COMPACT = function() {
    return this.getToken(CqlParser.K_COMPACT, 0);
};

IdContext.prototype.K_CONSISTENCY = function() {
    return this.getToken(CqlParser.K_CONSISTENCY, 0);
};

IdContext.prototype.K_CONTAINS = function() {
    return this.getToken(CqlParser.K_CONTAINS, 0);
};

IdContext.prototype.K_CREATE = function() {
    return this.getToken(CqlParser.K_CREATE, 0);
};

IdContext.prototype.K_CUSTOM = function() {
    return this.getToken(CqlParser.K_CUSTOM, 0);
};

IdContext.prototype.K_DELETE = function() {
    return this.getToken(CqlParser.K_DELETE, 0);
};

IdContext.prototype.K_DESC = function() {
    return this.getToken(CqlParser.K_DESC, 0);
};

IdContext.prototype.K_DESCRIBE = function() {
    return this.getToken(CqlParser.K_DESCRIBE, 0);
};

IdContext.prototype.K_DISTINCT = function() {
    return this.getToken(CqlParser.K_DISTINCT, 0);
};

IdContext.prototype.K_DROP = function() {
    return this.getToken(CqlParser.K_DROP, 0);
};

IdContext.prototype.K_DURABLE_WRITES = function() {
    return this.getToken(CqlParser.K_DURABLE_WRITES, 0);
};

IdContext.prototype.K_EACH_QUORUM = function() {
    return this.getToken(CqlParser.K_EACH_QUORUM, 0);
};

IdContext.prototype.K_ENTRIES = function() {
    return this.getToken(CqlParser.K_ENTRIES, 0);
};

IdContext.prototype.K_EXECUTE = function() {
    return this.getToken(CqlParser.K_EXECUTE, 0);
};

IdContext.prototype.K_EXISTS = function() {
    return this.getToken(CqlParser.K_EXISTS, 0);
};

IdContext.prototype.K_FALSE = function() {
    return this.getToken(CqlParser.K_FALSE, 0);
};

IdContext.prototype.K_FILTERING = function() {
    return this.getToken(CqlParser.K_FILTERING, 0);
};

IdContext.prototype.K_FINALFUNC = function() {
    return this.getToken(CqlParser.K_FINALFUNC, 0);
};

IdContext.prototype.K_FROM = function() {
    return this.getToken(CqlParser.K_FROM, 0);
};

IdContext.prototype.K_FULL = function() {
    return this.getToken(CqlParser.K_FULL, 0);
};

IdContext.prototype.K_FUNCTION = function() {
    return this.getToken(CqlParser.K_FUNCTION, 0);
};

IdContext.prototype.K_FUNCTIONS = function() {
    return this.getToken(CqlParser.K_FUNCTIONS, 0);
};

IdContext.prototype.K_GRANT = function() {
    return this.getToken(CqlParser.K_GRANT, 0);
};

IdContext.prototype.K_IF = function() {
    return this.getToken(CqlParser.K_IF, 0);
};

IdContext.prototype.K_IN = function() {
    return this.getToken(CqlParser.K_IN, 0);
};

IdContext.prototype.K_INDEX = function() {
    return this.getToken(CqlParser.K_INDEX, 0);
};

IdContext.prototype.K_INFINITY = function() {
    return this.getToken(CqlParser.K_INFINITY, 0);
};

IdContext.prototype.K_INITCOND = function() {
    return this.getToken(CqlParser.K_INITCOND, 0);
};

IdContext.prototype.K_INPUT = function() {
    return this.getToken(CqlParser.K_INPUT, 0);
};

IdContext.prototype.K_INSERT = function() {
    return this.getToken(CqlParser.K_INSERT, 0);
};

IdContext.prototype.K_INTO = function() {
    return this.getToken(CqlParser.K_INTO, 0);
};

IdContext.prototype.K_IS = function() {
    return this.getToken(CqlParser.K_IS, 0);
};

IdContext.prototype.K_JSON = function() {
    return this.getToken(CqlParser.K_JSON, 0);
};

IdContext.prototype.K_KEY = function() {
    return this.getToken(CqlParser.K_KEY, 0);
};

IdContext.prototype.K_KEYS = function() {
    return this.getToken(CqlParser.K_KEYS, 0);
};

IdContext.prototype.K_KEYSPACE = function() {
    return this.getToken(CqlParser.K_KEYSPACE, 0);
};

IdContext.prototype.K_KEYSPACES = function() {
    return this.getToken(CqlParser.K_KEYSPACES, 0);
};

IdContext.prototype.K_LANGUAGE = function() {
    return this.getToken(CqlParser.K_LANGUAGE, 0);
};

IdContext.prototype.K_LEVEL = function() {
    return this.getToken(CqlParser.K_LEVEL, 0);
};

IdContext.prototype.K_LIMIT = function() {
    return this.getToken(CqlParser.K_LIMIT, 0);
};

IdContext.prototype.K_LOCAL_ONE = function() {
    return this.getToken(CqlParser.K_LOCAL_ONE, 0);
};

IdContext.prototype.K_LOCAL_QUORUM = function() {
    return this.getToken(CqlParser.K_LOCAL_QUORUM, 0);
};

IdContext.prototype.K_LOGGED = function() {
    return this.getToken(CqlParser.K_LOGGED, 0);
};

IdContext.prototype.K_LOGIN = function() {
    return this.getToken(CqlParser.K_LOGIN, 0);
};

IdContext.prototype.K_MATERIALIZED = function() {
    return this.getToken(CqlParser.K_MATERIALIZED, 0);
};

IdContext.prototype.K_MODIFY = function() {
    return this.getToken(CqlParser.K_MODIFY, 0);
};

IdContext.prototype.K_NAN = function() {
    return this.getToken(CqlParser.K_NAN, 0);
};

IdContext.prototype.K_NORECURSIVE = function() {
    return this.getToken(CqlParser.K_NORECURSIVE, 0);
};

IdContext.prototype.K_NOSUPERUSER = function() {
    return this.getToken(CqlParser.K_NOSUPERUSER, 0);
};

IdContext.prototype.K_NOT = function() {
    return this.getToken(CqlParser.K_NOT, 0);
};

IdContext.prototype.K_NULL = function() {
    return this.getToken(CqlParser.K_NULL, 0);
};

IdContext.prototype.K_OF = function() {
    return this.getToken(CqlParser.K_OF, 0);
};

IdContext.prototype.K_ON = function() {
    return this.getToken(CqlParser.K_ON, 0);
};

IdContext.prototype.K_ONE = function() {
    return this.getToken(CqlParser.K_ONE, 0);
};

IdContext.prototype.K_OPTIONS = function() {
    return this.getToken(CqlParser.K_OPTIONS, 0);
};

IdContext.prototype.K_OR = function() {
    return this.getToken(CqlParser.K_OR, 0);
};

IdContext.prototype.K_ORDER = function() {
    return this.getToken(CqlParser.K_ORDER, 0);
};

IdContext.prototype.K_PARTITION = function() {
    return this.getToken(CqlParser.K_PARTITION, 0);
};

IdContext.prototype.K_PASSWORD = function() {
    return this.getToken(CqlParser.K_PASSWORD, 0);
};

IdContext.prototype.K_PER = function() {
    return this.getToken(CqlParser.K_PER, 0);
};

IdContext.prototype.K_PERMISSION = function() {
    return this.getToken(CqlParser.K_PERMISSION, 0);
};

IdContext.prototype.K_PERMISSIONS = function() {
    return this.getToken(CqlParser.K_PERMISSIONS, 0);
};

IdContext.prototype.K_PRIMARY = function() {
    return this.getToken(CqlParser.K_PRIMARY, 0);
};

IdContext.prototype.K_QUORUM = function() {
    return this.getToken(CqlParser.K_QUORUM, 0);
};

IdContext.prototype.K_RENAME = function() {
    return this.getToken(CqlParser.K_RENAME, 0);
};

IdContext.prototype.K_REPLACE = function() {
    return this.getToken(CqlParser.K_REPLACE, 0);
};

IdContext.prototype.K_REPLICATION = function() {
    return this.getToken(CqlParser.K_REPLICATION, 0);
};

IdContext.prototype.K_RETURNS = function() {
    return this.getToken(CqlParser.K_RETURNS, 0);
};

IdContext.prototype.K_REVOKE = function() {
    return this.getToken(CqlParser.K_REVOKE, 0);
};

IdContext.prototype.K_ROLE = function() {
    return this.getToken(CqlParser.K_ROLE, 0);
};

IdContext.prototype.K_ROLES = function() {
    return this.getToken(CqlParser.K_ROLES, 0);
};

IdContext.prototype.K_SCHEMA = function() {
    return this.getToken(CqlParser.K_SCHEMA, 0);
};

IdContext.prototype.K_SELECT = function() {
    return this.getToken(CqlParser.K_SELECT, 0);
};

IdContext.prototype.K_SET = function() {
    return this.getToken(CqlParser.K_SET, 0);
};

IdContext.prototype.K_SFUNC = function() {
    return this.getToken(CqlParser.K_SFUNC, 0);
};

IdContext.prototype.K_STATIC = function() {
    return this.getToken(CqlParser.K_STATIC, 0);
};

IdContext.prototype.K_STORAGE = function() {
    return this.getToken(CqlParser.K_STORAGE, 0);
};

IdContext.prototype.K_STYPE = function() {
    return this.getToken(CqlParser.K_STYPE, 0);
};

IdContext.prototype.K_SUPERUSER = function() {
    return this.getToken(CqlParser.K_SUPERUSER, 0);
};

IdContext.prototype.K_TABLE = function() {
    return this.getToken(CqlParser.K_TABLE, 0);
};

IdContext.prototype.K_THREE = function() {
    return this.getToken(CqlParser.K_THREE, 0);
};

IdContext.prototype.K_TIMESTAMP = function() {
    return this.getToken(CqlParser.K_TIMESTAMP, 0);
};

IdContext.prototype.K_TO = function() {
    return this.getToken(CqlParser.K_TO, 0);
};

IdContext.prototype.K_TOKEN = function() {
    return this.getToken(CqlParser.K_TOKEN, 0);
};

IdContext.prototype.K_TRIGGER = function() {
    return this.getToken(CqlParser.K_TRIGGER, 0);
};

IdContext.prototype.K_TRUE = function() {
    return this.getToken(CqlParser.K_TRUE, 0);
};

IdContext.prototype.K_TRUNCATE = function() {
    return this.getToken(CqlParser.K_TRUNCATE, 0);
};

IdContext.prototype.K_TTL = function() {
    return this.getToken(CqlParser.K_TTL, 0);
};

IdContext.prototype.K_TWO = function() {
    return this.getToken(CqlParser.K_TWO, 0);
};

IdContext.prototype.K_TYPE = function() {
    return this.getToken(CqlParser.K_TYPE, 0);
};

IdContext.prototype.K_UNLOGGED = function() {
    return this.getToken(CqlParser.K_UNLOGGED, 0);
};

IdContext.prototype.K_UPDATE = function() {
    return this.getToken(CqlParser.K_UPDATE, 0);
};

IdContext.prototype.K_USE = function() {
    return this.getToken(CqlParser.K_USE, 0);
};

IdContext.prototype.K_USER = function() {
    return this.getToken(CqlParser.K_USER, 0);
};

IdContext.prototype.K_USING = function() {
    return this.getToken(CqlParser.K_USING, 0);
};

IdContext.prototype.K_UUID = function() {
    return this.getToken(CqlParser.K_UUID, 0);
};

IdContext.prototype.K_VALUES = function() {
    return this.getToken(CqlParser.K_VALUES, 0);
};

IdContext.prototype.K_VIEW = function() {
    return this.getToken(CqlParser.K_VIEW, 0);
};

IdContext.prototype.K_WHERE = function() {
    return this.getToken(CqlParser.K_WHERE, 0);
};

IdContext.prototype.K_WITH = function() {
    return this.getToken(CqlParser.K_WITH, 0);
};

IdContext.prototype.K_WRITETIME = function() {
    return this.getToken(CqlParser.K_WRITETIME, 0);
};

IdContext.prototype.K_ASCII = function() {
    return this.getToken(CqlParser.K_ASCII, 0);
};

IdContext.prototype.K_BIGINT = function() {
    return this.getToken(CqlParser.K_BIGINT, 0);
};

IdContext.prototype.K_BLOB = function() {
    return this.getToken(CqlParser.K_BLOB, 0);
};

IdContext.prototype.K_BOOLEAN = function() {
    return this.getToken(CqlParser.K_BOOLEAN, 0);
};

IdContext.prototype.K_COUNTER = function() {
    return this.getToken(CqlParser.K_COUNTER, 0);
};

IdContext.prototype.K_DATE = function() {
    return this.getToken(CqlParser.K_DATE, 0);
};

IdContext.prototype.K_DECIMAL = function() {
    return this.getToken(CqlParser.K_DECIMAL, 0);
};

IdContext.prototype.K_DOUBLE = function() {
    return this.getToken(CqlParser.K_DOUBLE, 0);
};

IdContext.prototype.K_FLOAT = function() {
    return this.getToken(CqlParser.K_FLOAT, 0);
};

IdContext.prototype.K_FROZEN = function() {
    return this.getToken(CqlParser.K_FROZEN, 0);
};

IdContext.prototype.K_INET = function() {
    return this.getToken(CqlParser.K_INET, 0);
};

IdContext.prototype.K_INT = function() {
    return this.getToken(CqlParser.K_INT, 0);
};

IdContext.prototype.K_LIST = function() {
    return this.getToken(CqlParser.K_LIST, 0);
};

IdContext.prototype.K_MAP = function() {
    return this.getToken(CqlParser.K_MAP, 0);
};

IdContext.prototype.K_SMALLINT = function() {
    return this.getToken(CqlParser.K_SMALLINT, 0);
};

IdContext.prototype.K_TEXT = function() {
    return this.getToken(CqlParser.K_TEXT, 0);
};

IdContext.prototype.K_TIMEUUID = function() {
    return this.getToken(CqlParser.K_TIMEUUID, 0);
};

IdContext.prototype.K_TIME = function() {
    return this.getToken(CqlParser.K_TIME, 0);
};

IdContext.prototype.K_TINYINT = function() {
    return this.getToken(CqlParser.K_TINYINT, 0);
};

IdContext.prototype.K_TUPLE = function() {
    return this.getToken(CqlParser.K_TUPLE, 0);
};

IdContext.prototype.K_VARCHAR = function() {
    return this.getToken(CqlParser.K_VARCHAR, 0);
};

IdContext.prototype.K_VARINT = function() {
    return this.getToken(CqlParser.K_VARINT, 0);
};

IdContext.prototype.K_USERS = function() {
    return this.getToken(CqlParser.K_USERS, 0);
};

IdContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterId(this);
	}
};

IdContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitId(this);
	}
};

IdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.IdContext = IdContext;

CqlParser.prototype.id = function() {

    var localctx = new IdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 570, CqlParser.RULE_id);
    try {
        this.state = 2547;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CqlParser.OBJECT_NAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 2405;
            this.match(CqlParser.OBJECT_NAME);
            break;
        case CqlParser.K_ADD:
            this.enterOuterAlt(localctx, 2);
            this.state = 2406;
            this.match(CqlParser.K_ADD);
            this.state = 2407;
            this.match(CqlParser.K_AGGREGATE);
            break;
        case CqlParser.K_ALL:
            this.enterOuterAlt(localctx, 3);
            this.state = 2408;
            this.match(CqlParser.K_ALL);
            break;
        case CqlParser.K_ALLOW:
            this.enterOuterAlt(localctx, 4);
            this.state = 2409;
            this.match(CqlParser.K_ALLOW);
            break;
        case CqlParser.K_ALTER:
            this.enterOuterAlt(localctx, 5);
            this.state = 2410;
            this.match(CqlParser.K_ALTER);
            break;
        case CqlParser.K_AND:
            this.enterOuterAlt(localctx, 6);
            this.state = 2411;
            this.match(CqlParser.K_AND);
            break;
        case CqlParser.K_ANY:
            this.enterOuterAlt(localctx, 7);
            this.state = 2412;
            this.match(CqlParser.K_ANY);
            break;
        case CqlParser.K_APPLY:
            this.enterOuterAlt(localctx, 8);
            this.state = 2413;
            this.match(CqlParser.K_APPLY);
            break;
        case CqlParser.K_AS:
            this.enterOuterAlt(localctx, 9);
            this.state = 2414;
            this.match(CqlParser.K_AS);
            break;
        case CqlParser.K_ASC:
            this.enterOuterAlt(localctx, 10);
            this.state = 2415;
            this.match(CqlParser.K_ASC);
            break;
        case CqlParser.K_AUTHORIZE:
            this.enterOuterAlt(localctx, 11);
            this.state = 2416;
            this.match(CqlParser.K_AUTHORIZE);
            break;
        case CqlParser.K_BATCH:
            this.enterOuterAlt(localctx, 12);
            this.state = 2417;
            this.match(CqlParser.K_BATCH);
            break;
        case CqlParser.K_BEGIN:
            this.enterOuterAlt(localctx, 13);
            this.state = 2418;
            this.match(CqlParser.K_BEGIN);
            break;
        case CqlParser.K_BY:
            this.enterOuterAlt(localctx, 14);
            this.state = 2419;
            this.match(CqlParser.K_BY);
            break;
        case CqlParser.K_CALLED:
            this.enterOuterAlt(localctx, 15);
            this.state = 2420;
            this.match(CqlParser.K_CALLED);
            break;
        case CqlParser.K_CLUSTERING:
            this.enterOuterAlt(localctx, 16);
            this.state = 2421;
            this.match(CqlParser.K_CLUSTERING);
            break;
        case CqlParser.K_COLUMNFAMILY:
            this.enterOuterAlt(localctx, 17);
            this.state = 2422;
            this.match(CqlParser.K_COLUMNFAMILY);
            break;
        case CqlParser.K_COMPACT:
            this.enterOuterAlt(localctx, 18);
            this.state = 2423;
            this.match(CqlParser.K_COMPACT);
            break;
        case CqlParser.K_CONSISTENCY:
            this.enterOuterAlt(localctx, 19);
            this.state = 2424;
            this.match(CqlParser.K_CONSISTENCY);
            break;
        case CqlParser.K_CONTAINS:
            this.enterOuterAlt(localctx, 20);
            this.state = 2425;
            this.match(CqlParser.K_CONTAINS);
            break;
        case CqlParser.K_CREATE:
            this.enterOuterAlt(localctx, 21);
            this.state = 2426;
            this.match(CqlParser.K_CREATE);
            break;
        case CqlParser.K_CUSTOM:
            this.enterOuterAlt(localctx, 22);
            this.state = 2427;
            this.match(CqlParser.K_CUSTOM);
            break;
        case CqlParser.K_DELETE:
            this.enterOuterAlt(localctx, 23);
            this.state = 2428;
            this.match(CqlParser.K_DELETE);
            break;
        case CqlParser.K_DESC:
            this.enterOuterAlt(localctx, 24);
            this.state = 2429;
            this.match(CqlParser.K_DESC);
            break;
        case CqlParser.K_DESCRIBE:
            this.enterOuterAlt(localctx, 25);
            this.state = 2430;
            this.match(CqlParser.K_DESCRIBE);
            break;
        case CqlParser.K_DISTINCT:
            this.enterOuterAlt(localctx, 26);
            this.state = 2431;
            this.match(CqlParser.K_DISTINCT);
            break;
        case CqlParser.K_DROP:
            this.enterOuterAlt(localctx, 27);
            this.state = 2432;
            this.match(CqlParser.K_DROP);
            break;
        case CqlParser.K_DURABLE_WRITES:
            this.enterOuterAlt(localctx, 28);
            this.state = 2433;
            this.match(CqlParser.K_DURABLE_WRITES);
            break;
        case CqlParser.K_EACH_QUORUM:
            this.enterOuterAlt(localctx, 29);
            this.state = 2434;
            this.match(CqlParser.K_EACH_QUORUM);
            break;
        case CqlParser.K_ENTRIES:
            this.enterOuterAlt(localctx, 30);
            this.state = 2435;
            this.match(CqlParser.K_ENTRIES);
            break;
        case CqlParser.K_EXECUTE:
            this.enterOuterAlt(localctx, 31);
            this.state = 2436;
            this.match(CqlParser.K_EXECUTE);
            break;
        case CqlParser.K_EXISTS:
            this.enterOuterAlt(localctx, 32);
            this.state = 2437;
            this.match(CqlParser.K_EXISTS);
            break;
        case CqlParser.K_FALSE:
            this.enterOuterAlt(localctx, 33);
            this.state = 2438;
            this.match(CqlParser.K_FALSE);
            break;
        case CqlParser.K_FILTERING:
            this.enterOuterAlt(localctx, 34);
            this.state = 2439;
            this.match(CqlParser.K_FILTERING);
            break;
        case CqlParser.K_FINALFUNC:
            this.enterOuterAlt(localctx, 35);
            this.state = 2440;
            this.match(CqlParser.K_FINALFUNC);
            break;
        case CqlParser.K_FROM:
            this.enterOuterAlt(localctx, 36);
            this.state = 2441;
            this.match(CqlParser.K_FROM);
            break;
        case CqlParser.K_FULL:
            this.enterOuterAlt(localctx, 37);
            this.state = 2442;
            this.match(CqlParser.K_FULL);
            break;
        case CqlParser.K_FUNCTION:
            this.enterOuterAlt(localctx, 38);
            this.state = 2443;
            this.match(CqlParser.K_FUNCTION);
            break;
        case CqlParser.K_FUNCTIONS:
            this.enterOuterAlt(localctx, 39);
            this.state = 2444;
            this.match(CqlParser.K_FUNCTIONS);
            break;
        case CqlParser.K_GRANT:
            this.enterOuterAlt(localctx, 40);
            this.state = 2445;
            this.match(CqlParser.K_GRANT);
            break;
        case CqlParser.K_IF:
            this.enterOuterAlt(localctx, 41);
            this.state = 2446;
            this.match(CqlParser.K_IF);
            break;
        case CqlParser.K_IN:
            this.enterOuterAlt(localctx, 42);
            this.state = 2447;
            this.match(CqlParser.K_IN);
            break;
        case CqlParser.K_INDEX:
            this.enterOuterAlt(localctx, 43);
            this.state = 2448;
            this.match(CqlParser.K_INDEX);
            break;
        case CqlParser.K_INFINITY:
            this.enterOuterAlt(localctx, 44);
            this.state = 2449;
            this.match(CqlParser.K_INFINITY);
            break;
        case CqlParser.K_INITCOND:
            this.enterOuterAlt(localctx, 45);
            this.state = 2450;
            this.match(CqlParser.K_INITCOND);
            break;
        case CqlParser.K_INPUT:
            this.enterOuterAlt(localctx, 46);
            this.state = 2451;
            this.match(CqlParser.K_INPUT);
            break;
        case CqlParser.K_INSERT:
            this.enterOuterAlt(localctx, 47);
            this.state = 2452;
            this.match(CqlParser.K_INSERT);
            break;
        case CqlParser.K_INTO:
            this.enterOuterAlt(localctx, 48);
            this.state = 2453;
            this.match(CqlParser.K_INTO);
            break;
        case CqlParser.K_IS:
            this.enterOuterAlt(localctx, 49);
            this.state = 2454;
            this.match(CqlParser.K_IS);
            break;
        case CqlParser.K_JSON:
            this.enterOuterAlt(localctx, 50);
            this.state = 2455;
            this.match(CqlParser.K_JSON);
            break;
        case CqlParser.K_KEY:
            this.enterOuterAlt(localctx, 51);
            this.state = 2456;
            this.match(CqlParser.K_KEY);
            break;
        case CqlParser.K_KEYS:
            this.enterOuterAlt(localctx, 52);
            this.state = 2457;
            this.match(CqlParser.K_KEYS);
            break;
        case CqlParser.K_KEYSPACE:
            this.enterOuterAlt(localctx, 53);
            this.state = 2458;
            this.match(CqlParser.K_KEYSPACE);
            break;
        case CqlParser.K_KEYSPACES:
            this.enterOuterAlt(localctx, 54);
            this.state = 2459;
            this.match(CqlParser.K_KEYSPACES);
            break;
        case CqlParser.K_LANGUAGE:
            this.enterOuterAlt(localctx, 55);
            this.state = 2460;
            this.match(CqlParser.K_LANGUAGE);
            break;
        case CqlParser.K_LEVEL:
            this.enterOuterAlt(localctx, 56);
            this.state = 2461;
            this.match(CqlParser.K_LEVEL);
            break;
        case CqlParser.K_LIMIT:
            this.enterOuterAlt(localctx, 57);
            this.state = 2462;
            this.match(CqlParser.K_LIMIT);
            break;
        case CqlParser.K_LOCAL_ONE:
            this.enterOuterAlt(localctx, 58);
            this.state = 2463;
            this.match(CqlParser.K_LOCAL_ONE);
            break;
        case CqlParser.K_LOCAL_QUORUM:
            this.enterOuterAlt(localctx, 59);
            this.state = 2464;
            this.match(CqlParser.K_LOCAL_QUORUM);
            break;
        case CqlParser.K_LOGGED:
            this.enterOuterAlt(localctx, 60);
            this.state = 2465;
            this.match(CqlParser.K_LOGGED);
            break;
        case CqlParser.K_LOGIN:
            this.enterOuterAlt(localctx, 61);
            this.state = 2466;
            this.match(CqlParser.K_LOGIN);
            break;
        case CqlParser.K_MATERIALIZED:
            this.enterOuterAlt(localctx, 62);
            this.state = 2467;
            this.match(CqlParser.K_MATERIALIZED);
            break;
        case CqlParser.K_MODIFY:
            this.enterOuterAlt(localctx, 63);
            this.state = 2468;
            this.match(CqlParser.K_MODIFY);
            break;
        case CqlParser.K_NAN:
            this.enterOuterAlt(localctx, 64);
            this.state = 2469;
            this.match(CqlParser.K_NAN);
            break;
        case CqlParser.K_NORECURSIVE:
            this.enterOuterAlt(localctx, 65);
            this.state = 2470;
            this.match(CqlParser.K_NORECURSIVE);
            break;
        case CqlParser.K_NOSUPERUSER:
            this.enterOuterAlt(localctx, 66);
            this.state = 2471;
            this.match(CqlParser.K_NOSUPERUSER);
            break;
        case CqlParser.K_NOT:
            this.enterOuterAlt(localctx, 67);
            this.state = 2472;
            this.match(CqlParser.K_NOT);
            break;
        case CqlParser.K_NULL:
            this.enterOuterAlt(localctx, 68);
            this.state = 2473;
            this.match(CqlParser.K_NULL);
            break;
        case CqlParser.K_OF:
            this.enterOuterAlt(localctx, 69);
            this.state = 2474;
            this.match(CqlParser.K_OF);
            break;
        case CqlParser.K_ON:
            this.enterOuterAlt(localctx, 70);
            this.state = 2475;
            this.match(CqlParser.K_ON);
            break;
        case CqlParser.K_ONE:
            this.enterOuterAlt(localctx, 71);
            this.state = 2476;
            this.match(CqlParser.K_ONE);
            break;
        case CqlParser.K_OPTIONS:
            this.enterOuterAlt(localctx, 72);
            this.state = 2477;
            this.match(CqlParser.K_OPTIONS);
            break;
        case CqlParser.K_OR:
            this.enterOuterAlt(localctx, 73);
            this.state = 2478;
            this.match(CqlParser.K_OR);
            break;
        case CqlParser.K_ORDER:
            this.enterOuterAlt(localctx, 74);
            this.state = 2479;
            this.match(CqlParser.K_ORDER);
            break;
        case CqlParser.K_PARTITION:
            this.enterOuterAlt(localctx, 75);
            this.state = 2480;
            this.match(CqlParser.K_PARTITION);
            break;
        case CqlParser.K_PASSWORD:
            this.enterOuterAlt(localctx, 76);
            this.state = 2481;
            this.match(CqlParser.K_PASSWORD);
            break;
        case CqlParser.K_PER:
            this.enterOuterAlt(localctx, 77);
            this.state = 2482;
            this.match(CqlParser.K_PER);
            break;
        case CqlParser.K_PERMISSION:
            this.enterOuterAlt(localctx, 78);
            this.state = 2483;
            this.match(CqlParser.K_PERMISSION);
            break;
        case CqlParser.K_PERMISSIONS:
            this.enterOuterAlt(localctx, 79);
            this.state = 2484;
            this.match(CqlParser.K_PERMISSIONS);
            break;
        case CqlParser.K_PRIMARY:
            this.enterOuterAlt(localctx, 80);
            this.state = 2485;
            this.match(CqlParser.K_PRIMARY);
            break;
        case CqlParser.K_QUORUM:
            this.enterOuterAlt(localctx, 81);
            this.state = 2486;
            this.match(CqlParser.K_QUORUM);
            break;
        case CqlParser.K_RENAME:
            this.enterOuterAlt(localctx, 82);
            this.state = 2487;
            this.match(CqlParser.K_RENAME);
            break;
        case CqlParser.K_REPLACE:
            this.enterOuterAlt(localctx, 83);
            this.state = 2488;
            this.match(CqlParser.K_REPLACE);
            break;
        case CqlParser.K_REPLICATION:
            this.enterOuterAlt(localctx, 84);
            this.state = 2489;
            this.match(CqlParser.K_REPLICATION);
            break;
        case CqlParser.K_RETURNS:
            this.enterOuterAlt(localctx, 85);
            this.state = 2490;
            this.match(CqlParser.K_RETURNS);
            break;
        case CqlParser.K_REVOKE:
            this.enterOuterAlt(localctx, 86);
            this.state = 2491;
            this.match(CqlParser.K_REVOKE);
            break;
        case CqlParser.K_ROLE:
            this.enterOuterAlt(localctx, 87);
            this.state = 2492;
            this.match(CqlParser.K_ROLE);
            break;
        case CqlParser.K_ROLES:
            this.enterOuterAlt(localctx, 88);
            this.state = 2493;
            this.match(CqlParser.K_ROLES);
            break;
        case CqlParser.K_SCHEMA:
            this.enterOuterAlt(localctx, 89);
            this.state = 2494;
            this.match(CqlParser.K_SCHEMA);
            break;
        case CqlParser.K_SELECT:
            this.enterOuterAlt(localctx, 90);
            this.state = 2495;
            this.match(CqlParser.K_SELECT);
            break;
        case CqlParser.K_SET:
            this.enterOuterAlt(localctx, 91);
            this.state = 2496;
            this.match(CqlParser.K_SET);
            break;
        case CqlParser.K_SFUNC:
            this.enterOuterAlt(localctx, 92);
            this.state = 2497;
            this.match(CqlParser.K_SFUNC);
            break;
        case CqlParser.K_STATIC:
            this.enterOuterAlt(localctx, 93);
            this.state = 2498;
            this.match(CqlParser.K_STATIC);
            break;
        case CqlParser.K_STORAGE:
            this.enterOuterAlt(localctx, 94);
            this.state = 2499;
            this.match(CqlParser.K_STORAGE);
            break;
        case CqlParser.K_STYPE:
            this.enterOuterAlt(localctx, 95);
            this.state = 2500;
            this.match(CqlParser.K_STYPE);
            break;
        case CqlParser.K_SUPERUSER:
            this.enterOuterAlt(localctx, 96);
            this.state = 2501;
            this.match(CqlParser.K_SUPERUSER);
            break;
        case CqlParser.K_TABLE:
            this.enterOuterAlt(localctx, 97);
            this.state = 2502;
            this.match(CqlParser.K_TABLE);
            break;
        case CqlParser.K_THREE:
            this.enterOuterAlt(localctx, 98);
            this.state = 2503;
            this.match(CqlParser.K_THREE);
            break;
        case CqlParser.K_TIMESTAMP:
            this.enterOuterAlt(localctx, 99);
            this.state = 2504;
            this.match(CqlParser.K_TIMESTAMP);
            break;
        case CqlParser.K_TO:
            this.enterOuterAlt(localctx, 100);
            this.state = 2505;
            this.match(CqlParser.K_TO);
            break;
        case CqlParser.K_TOKEN:
            this.enterOuterAlt(localctx, 101);
            this.state = 2506;
            this.match(CqlParser.K_TOKEN);
            break;
        case CqlParser.K_TRIGGER:
            this.enterOuterAlt(localctx, 102);
            this.state = 2507;
            this.match(CqlParser.K_TRIGGER);
            break;
        case CqlParser.K_TRUE:
            this.enterOuterAlt(localctx, 103);
            this.state = 2508;
            this.match(CqlParser.K_TRUE);
            break;
        case CqlParser.K_TRUNCATE:
            this.enterOuterAlt(localctx, 104);
            this.state = 2509;
            this.match(CqlParser.K_TRUNCATE);
            break;
        case CqlParser.K_TTL:
            this.enterOuterAlt(localctx, 105);
            this.state = 2510;
            this.match(CqlParser.K_TTL);
            break;
        case CqlParser.K_TWO:
            this.enterOuterAlt(localctx, 106);
            this.state = 2511;
            this.match(CqlParser.K_TWO);
            break;
        case CqlParser.K_TYPE:
            this.enterOuterAlt(localctx, 107);
            this.state = 2512;
            this.match(CqlParser.K_TYPE);
            break;
        case CqlParser.K_UNLOGGED:
            this.enterOuterAlt(localctx, 108);
            this.state = 2513;
            this.match(CqlParser.K_UNLOGGED);
            break;
        case CqlParser.K_UPDATE:
            this.enterOuterAlt(localctx, 109);
            this.state = 2514;
            this.match(CqlParser.K_UPDATE);
            break;
        case CqlParser.K_USE:
            this.enterOuterAlt(localctx, 110);
            this.state = 2515;
            this.match(CqlParser.K_USE);
            break;
        case CqlParser.K_USER:
            this.enterOuterAlt(localctx, 111);
            this.state = 2516;
            this.match(CqlParser.K_USER);
            break;
        case CqlParser.K_USING:
            this.enterOuterAlt(localctx, 112);
            this.state = 2517;
            this.match(CqlParser.K_USING);
            break;
        case CqlParser.K_UUID:
            this.enterOuterAlt(localctx, 113);
            this.state = 2518;
            this.match(CqlParser.K_UUID);
            break;
        case CqlParser.K_VALUES:
            this.enterOuterAlt(localctx, 114);
            this.state = 2519;
            this.match(CqlParser.K_VALUES);
            break;
        case CqlParser.K_VIEW:
            this.enterOuterAlt(localctx, 115);
            this.state = 2520;
            this.match(CqlParser.K_VIEW);
            break;
        case CqlParser.K_WHERE:
            this.enterOuterAlt(localctx, 116);
            this.state = 2521;
            this.match(CqlParser.K_WHERE);
            break;
        case CqlParser.K_WITH:
            this.enterOuterAlt(localctx, 117);
            this.state = 2522;
            this.match(CqlParser.K_WITH);
            break;
        case CqlParser.K_WRITETIME:
            this.enterOuterAlt(localctx, 118);
            this.state = 2523;
            this.match(CqlParser.K_WRITETIME);
            break;
        case CqlParser.K_ASCII:
            this.enterOuterAlt(localctx, 119);
            this.state = 2524;
            this.match(CqlParser.K_ASCII);
            break;
        case CqlParser.K_BIGINT:
            this.enterOuterAlt(localctx, 120);
            this.state = 2525;
            this.match(CqlParser.K_BIGINT);
            break;
        case CqlParser.K_BLOB:
            this.enterOuterAlt(localctx, 121);
            this.state = 2526;
            this.match(CqlParser.K_BLOB);
            break;
        case CqlParser.K_BOOLEAN:
            this.enterOuterAlt(localctx, 122);
            this.state = 2527;
            this.match(CqlParser.K_BOOLEAN);
            break;
        case CqlParser.K_COUNTER:
            this.enterOuterAlt(localctx, 123);
            this.state = 2528;
            this.match(CqlParser.K_COUNTER);
            break;
        case CqlParser.K_DATE:
            this.enterOuterAlt(localctx, 124);
            this.state = 2529;
            this.match(CqlParser.K_DATE);
            break;
        case CqlParser.K_DECIMAL:
            this.enterOuterAlt(localctx, 125);
            this.state = 2530;
            this.match(CqlParser.K_DECIMAL);
            break;
        case CqlParser.K_DOUBLE:
            this.enterOuterAlt(localctx, 126);
            this.state = 2531;
            this.match(CqlParser.K_DOUBLE);
            break;
        case CqlParser.K_FLOAT:
            this.enterOuterAlt(localctx, 127);
            this.state = 2532;
            this.match(CqlParser.K_FLOAT);
            break;
        case CqlParser.K_FROZEN:
            this.enterOuterAlt(localctx, 128);
            this.state = 2533;
            this.match(CqlParser.K_FROZEN);
            break;
        case CqlParser.K_INET:
            this.enterOuterAlt(localctx, 129);
            this.state = 2534;
            this.match(CqlParser.K_INET);
            break;
        case CqlParser.K_INT:
            this.enterOuterAlt(localctx, 130);
            this.state = 2535;
            this.match(CqlParser.K_INT);
            break;
        case CqlParser.K_LIST:
            this.enterOuterAlt(localctx, 131);
            this.state = 2536;
            this.match(CqlParser.K_LIST);
            break;
        case CqlParser.K_MAP:
            this.enterOuterAlt(localctx, 132);
            this.state = 2537;
            this.match(CqlParser.K_MAP);
            break;
        case CqlParser.K_SMALLINT:
            this.enterOuterAlt(localctx, 133);
            this.state = 2538;
            this.match(CqlParser.K_SMALLINT);
            break;
        case CqlParser.K_TEXT:
            this.enterOuterAlt(localctx, 134);
            this.state = 2539;
            this.match(CqlParser.K_TEXT);
            break;
        case CqlParser.K_TIMEUUID:
            this.enterOuterAlt(localctx, 135);
            this.state = 2540;
            this.match(CqlParser.K_TIMEUUID);
            break;
        case CqlParser.K_TIME:
            this.enterOuterAlt(localctx, 136);
            this.state = 2541;
            this.match(CqlParser.K_TIME);
            break;
        case CqlParser.K_TINYINT:
            this.enterOuterAlt(localctx, 137);
            this.state = 2542;
            this.match(CqlParser.K_TINYINT);
            break;
        case CqlParser.K_TUPLE:
            this.enterOuterAlt(localctx, 138);
            this.state = 2543;
            this.match(CqlParser.K_TUPLE);
            break;
        case CqlParser.K_VARCHAR:
            this.enterOuterAlt(localctx, 139);
            this.state = 2544;
            this.match(CqlParser.K_VARCHAR);
            break;
        case CqlParser.K_VARINT:
            this.enterOuterAlt(localctx, 140);
            this.state = 2545;
            this.match(CqlParser.K_VARINT);
            break;
        case CqlParser.K_USERS:
            this.enterOuterAlt(localctx, 141);
            this.state = 2546;
            this.match(CqlParser.K_USERS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.CqlParser = CqlParser;
